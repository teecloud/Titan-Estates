{"version":3,"sources":["./src/app/food/details/food-details.model.ts","./src/app/food/food.service.ts","./src/app/pipes/time-ago.pipe.ts","./src/app/food/listing/food-listing.model.ts","./src/app/utils/resolver-helper.ts","./src/app/shell/data-store.ts","./src/app/pipes/pipes.module.ts","./src/app/pipes/time-difference.pipe.ts"],"names":[],"mappings":"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","file":"food-details-food-details-module~food-listing-food-listing-module.js","sourcesContent":["import { ShellModel } from '../../shell/data-store';\n\nexport class FoodDetailsModel extends ShellModel {\n  icon: string;\n  slug: string;\n  showcaseImage: string;\n  name: string;\n  shortName: string;\n  style: string;\n  priceRange: number;\n  avgRating: number;\n  ratings: Array<{concept: string, rate: number}> = [\n    {\n      concept: '',\n      rate: null\n    },\n    {\n      concept: '',\n      rate: null\n    },\n    {\n      concept: '',\n      rate: null\n    }\n  ];\n  reviewsCount: number;\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: false,\n      hourFrom: '',\n      hourTo: ''\n    }\n  ];\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  tags: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  usersPictures: Array<string> = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    ''\n  ];\n  popularDishes: Array<{name: string, rate: number, votesCount: number}> = [\n    {\n      name: '',\n      rate: null,\n      votesCount: null\n    },\n    {\n      name: '',\n      rate: null,\n      votesCount: null\n    }\n  ];\n  reviews: Array<{\n    user: {image: string, name: string, reviewsCount: number, points: number},\n    avgRating: number,\n    ratings: Array<{concept: string, rate: number}>,\n    publishedAt: string,\n    message: string\n  }> = [\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    },\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    },\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    }\n  ];\n  popularRecipes: Array<{\n    showcaseImage: string,\n    name: string,\n    chef: {name: string, image: string},\n    difficulty: string,\n    time: string,\n    calories: string,\n    chefExtract: string\n  }> = [\n    {\n      showcaseImage: '',\n      name: '',\n      chef: {\n        name: '',\n        image: ''\n      },\n      difficulty: '',\n      time: '',\n      calories: '',\n      chefExtract: ''\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { FoodListingModel } from './listing/food-listing.model';\nimport { FoodDetailsModel } from './details/food-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class FoodService {\n  private listingDataStore: DataStore<FoodListingModel>;\n  private detailsDataStore: DataStore<FoodDetailsModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  public getListingDataSource(): Observable<FoodListingModel> {\n    const rawDataSource = this.http.get<FoodListingModel>('./assets/sample-data/food/listing.json')\n    .pipe(\n      map(\n        (data: FoodListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new FoodListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-listing-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getListingStore(dataSource: Observable<FoodListingModel>): DataStore<FoodListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FoodListingModel = new FoodListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(slug: string): Observable<FoodDetailsModel> {\n    const rawDataSource = this.http.get<{items: Array<FoodDetailsModel>}>('./assets/sample-data/food/details.json')\n    .pipe(\n      mergeMap(details => details.items.filter(item => item.slug === slug)),\n      map(\n        (data: FoodDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new FoodDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-details-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDetailsStore(dataSource: Observable<FoodDetailsModel>): DataStore<FoodDetailsModel> {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: FoodDetailsModel = new FoodDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.detailsDataStore.load(dataSource, 0);\n    } else { // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.detailsDataStore.load(dataSource);\n    }\n\n    return this.detailsDataStore;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n@Pipe({ name: 'appTimeAgo' })\nexport class TimeAgoPipe implements PipeTransform {\n  transform(value: any): string {\n    dayjs.extend(relativeTime);\n    let timeAgo = '';\n\n    if (value) {\n      const withoutSuffix = (dayjs(value).diff(dayjs(), 'day') < 0) ? false : true;\n      timeAgo = dayjs().to(dayjs(value), withoutSuffix);\n    }\n\n    return timeAgo;\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FoodItemModel {\n  icon: string;\n  image: string;\n  name: string;\n  address: string;\n  priceRange: number;\n  rating: number;\n  tags: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  pictures: Array<string> = [\n    '',\n    '',\n    '',\n    '',\n    ''\n  ];\n}\n\nexport class FoodListingModel extends ShellModel {\n  items: Array<FoodItemModel> = [\n    new FoodItemModel(),\n    new FoodItemModel(),\n    new FoodItemModel(),\n    new FoodItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { DataStore } from '../shell/data-store';\nimport { Observable, of } from 'rxjs';\n\nexport interface IResolvedRouteData<T> {\n  data: T | DataStore<T>;\n}\n\nexport class ResolverHelper<T> {\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\n    if (source instanceof DataStore) {\n      return source.state;\n    } else if (source instanceof constructor) {\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\n      // That's why we included an extra parameter which acts as a constructor function for type T\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\n      return of(source);\n    }\n  }\n}\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { delay, map, startWith } from 'rxjs/operators';\n\nimport { AppShellConfig } from './config/app-shell.config';\n\nexport class ShellModel {\n  isShell = false;\n}\n\nexport class DataStore<T> {\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the assets/config/app-shell.config.prod.json file.\n  // tslint:disable-next-line:max-line-length\n  private networkDelay = (AppShellConfig.settings && AppShellConfig.settings.networkDelay) ? AppShellConfig.settings.networkDelay : 0;\n\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\n\n  constructor(private shellModel: T) { }\n\n  // Static function with generics\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\n    const delayObservable = of(true).pipe(\n      delay(networkDelay)\n    );\n\n    // Assign shell flag accordingly\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    return combineLatest([\n      delayObservable,\n      dataObservable\n    ]).pipe(\n      // Dismiss unnecessary delayValue\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\n      // Set the shell model as the initial value\n      startWith(Object.assign(shellModel, {isShell: true}))\n    );\n  }\n\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\n    // tslint:disable-next-line:no-shadowed-variable\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\n\n    let processedDataSource: Observable<any>;\n\n    // If no network delay, then don't show shell\n    if (delay === 0) {\n      processedDataSource = dataSourceObservable;\n    } else {\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\n    }\n\n    processedDataSource\n    .subscribe((dataValue: T & ShellModel) => {\n      this.timeline.next(dataValue);\n    });\n  }\n\n  public get state(): Observable<T & ShellModel> {\n    return this.timeline.asObservable();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { NgFloorPipeModule } from 'angular-pipes';\n\nimport { TimeDifferencePipe } from './time-difference.pipe';\nimport { TimeAgoPipe } from './time-ago.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    NgFloorPipeModule\n  ],\n  declarations: [\n    TimeDifferencePipe,\n    TimeAgoPipe\n  ],\n  exports: [\n    NgFloorPipeModule,\n    TimeDifferencePipe,\n    TimeAgoPipe\n  ]\n})\nexport class PipesModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as dayjs from 'dayjs';\n\n@Pipe({ name: 'appTimeDifference' })\nexport class TimeDifferencePipe implements PipeTransform {\n  transform(value: any): number {\n    return dayjs(value).diff(dayjs(), 'day');\n  }\n}\n"],"sourceRoot":"webpack:///"}