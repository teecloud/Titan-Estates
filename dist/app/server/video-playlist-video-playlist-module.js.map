{"version":3,"sources":["./src/app/video-playlist/video-playlist.page.ts","./src/app/video-playlist/video-playlist.page.html","./src/app/video-playlist/video-playlist.resolver.ts","./src/app/video-playlist/video-playlist.model.ts","./src/app/shell/data-store.ts","./src/app/video-playlist/video-playlist.service.ts","./src/app/video-playlist/video-playlist.module.ts"],"names":[],"mappings":"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","file":"video-playlist-video-playlist-module.js","sourcesContent":["import { Component, OnInit, HostBinding, Inject, PLATFORM_ID } from '@angular/core';\nimport { VideoPlaylistModel } from './video-playlist.model';\nimport { VgApiService } from '@videogular/ngx-videogular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Plugins } from '@capacitor/core';\nimport { switchMap } from 'rxjs/operators';\nimport { isPlatformBrowser } from '@angular/common';\nconst { Share } = Plugins;\n\n@Component({\n  selector: 'app-video-playlist',\n  templateUrl: './video-playlist.page.html',\n  styleUrls: [\n    './styles/video-playlist.page.scss',\n    './styles/video-playlist.shell.scss'\n  ]\n})\nexport class VideoPlaylistPage implements OnInit {\n  ssr = true;\n  start_playing = false;\n  api: VgApiService;\n  video_playlist_model: VideoPlaylistModel;\n\n  @HostBinding('class.is-shell') get isShell() {\n    return (this.video_playlist_model && this.video_playlist_model.isShell) ? true : false;\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    @Inject(PLATFORM_ID) private platformId: object\n  ) { }\n\n  ngOnInit(): void {\n    // In SSR show a placeholder for the <vg-player>\n    if (isPlatformBrowser(this.platformId)) {\n      this.ssr = false;\n    }\n\n    this.route.data\n    .pipe(\n      // Extract data for this page\n      switchMap((resolvedRouteData) => resolvedRouteData['data'].state)\n    )\n    .subscribe((state: any) => {\n      this.video_playlist_model = state;\n      if (!state.isShell) {\n        this.video_playlist_model.video_playlist = state.videos;\n        this.video_playlist_model.selected_video = state.videos[0];\n      }\n    }, (error) => console.log(error));\n  }\n\n  playMedia(media) {\n    // Check if this media is not the same we are currently playing\n    if (media !== this.video_playlist_model.selected_video) {\n      // Change sources\n      this.video_playlist_model.selected_video = media;\n      // When changing sources we wait until the metadata is loaded and then we start playing the video\n    }\n  }\n\n  onPlayerReady(api: VgApiService) {\n    this.api = api;\n    this.api.getDefaultMedia().subscriptions.loadedMetadata.subscribe(this.playVideo.bind(this));\n  }\n\n  playVideo() {\n    if (this.start_playing) {\n      this.api.play();\n    } else {\n      this.start_playing = true;\n    }\n  }\n\n  shareMedia() {\n    const selectedVideo = this.video_playlist_model.selected_video;\n    Share.share({\n      title: selectedVideo.title,\n      text: selectedVideo.description,\n      url: 'https://ionicthemes.com/',\n      dialogTitle: 'Share Media'\n    })\n    .then(() => console.log('Successful share'))\n    .catch((error) => console.log('Error sharing', error));\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>Video Playlist</ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"shareMedia()\">\n        <ion-icon slot=\"icon-only\" name=\"share\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"video-playlist-content\">\n  <app-aspect-ratio [ratio]=\"{w: 16, h: 9}\">\n    <!-- SSR placeholder -->\n    <video *ngIf=\"ssr\" class=\"ssr-video\" controls preload=\"auto\">\n      <source *ngFor=\"let video of video_playlist_model?.selected_video?.sources\" [src]=\"video.src\" [type]=\"video.type\">\n    </video>\n    <!-- In the Browser, show the <vg-player> -->\n    <vg-player *ngIf=\"!ssr\" class=\"video-player\" (onPlayerReady)=\"onPlayerReady($event)\">\n\t\t\t<video controls #player_video [vgMedia]=\"player_video\" id=\"player-video\" preload=\"auto\">\n\t      <source *ngFor=\"let video of video_playlist_model?.selected_video?.sources\" [src]=\"video.src\" [type]=\"video.type\">\n\t    </video>\n    </vg-player>\n  </app-aspect-ratio>\n\n  <section class=\"video-data-section\">\n    <h3 class=\"video-title\">\n      <app-text-shell animation=\"gradient\" [data]=\"video_playlist_model?.selected_video?.title\"></app-text-shell>\n    </h3>\n    <p class=\"video-description\">\n      <app-text-shell lines=\"5\" animation=\"gradient\" [data]=\"video_playlist_model?.selected_video?.description\"></app-text-shell>\n    </p>\n  </section>\n\n  <section class=\"video-playlist-section\">\n    <ion-row class=\"playlist-item-row\" *ngFor=\"let video of video_playlist_model?.video_playlist\">\n      <ion-col size=\"4\">\n        <app-image-shell [display]=\"'cover'\" class=\"video-image\" animation=\"spinner\" [src]=\"video.thumbnail\" [alt]=\"'video thumbnail'\" (click)=\"playMedia(video)\">\n          <app-aspect-ratio [ratio]=\"{w:3, h: 2}\">\n            <a class=\"play-icon-wrapper\" (click)=\"playMedia(video)\">\n              <ion-icon class=\"play-icon\" name=\"play\"></ion-icon>\n            </a>\n          </app-aspect-ratio>\n        </app-image-shell>\n      </ion-col>\n      <ion-col size=\"8\" class=\"video-info-wrapper\">\n        <h4 class=\"image-title\">\n          <app-text-shell animation=\"gradient\" [data]=\"video.title\"></app-text-shell>\n        </h4>\n        <p class=\"image-description\">\n          <app-text-shell lines=\"3\" animation=\"gradient\" [data]=\"video.description\"></app-text-shell>\n        </p>\n      </ion-col>\n    </ion-row>\n  </section>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { VideoPlaylistService } from './video-playlist.service';\nimport { Observable } from 'rxjs';\nimport { DataStore } from '../shell/data-store';\nimport { VideoPlaylistModel } from './video-playlist.model';\n\n@Injectable()\nexport class VideoPlaylistResolver implements Resolve<any> {\n\n  constructor(private videoPlaylistService: VideoPlaylistService) { }\n\n  resolve() {\n    const dataSource: Observable<VideoPlaylistModel> = this.videoPlaylistService.getVideoPlaylistDataSource();\n\n    const dataStore: DataStore<VideoPlaylistModel> = this.videoPlaylistService.getVideoPlaylistStore(dataSource);\n\n    return dataStore;\n  }\n}\n","import { ShellModel } from '../shell/data-store';\n\nexport class VideoModel {\n  title: string;\n  description: string;\n  thumbnail: string;\n  sources: Array<{ src: string, type: string }>;\n}\n\nexport class VideoPlaylistModel extends ShellModel {\n  selected_video: VideoModel = new VideoModel();\n\n  video_playlist: Array<VideoModel> = [\n    new VideoModel(),\n    new VideoModel(),\n    new VideoModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { delay, map, startWith } from 'rxjs/operators';\n\nimport { AppShellConfig } from './config/app-shell.config';\n\nexport class ShellModel {\n  isShell = false;\n}\n\nexport class DataStore<T> {\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the assets/config/app-shell.config.prod.json file.\n  // tslint:disable-next-line:max-line-length\n  private networkDelay = (AppShellConfig.settings && AppShellConfig.settings.networkDelay) ? AppShellConfig.settings.networkDelay : 0;\n\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\n\n  constructor(private shellModel: T) { }\n\n  // Static function with generics\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\n    const delayObservable = of(true).pipe(\n      delay(networkDelay)\n    );\n\n    // Assign shell flag accordingly\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    return combineLatest([\n      delayObservable,\n      dataObservable\n    ]).pipe(\n      // Dismiss unnecessary delayValue\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\n      // Set the shell model as the initial value\n      startWith(Object.assign(shellModel, {isShell: true}))\n    );\n  }\n\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\n    // tslint:disable-next-line:no-shadowed-variable\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\n\n    let processedDataSource: Observable<any>;\n\n    // If no network delay, then don't show shell\n    if (delay === 0) {\n      processedDataSource = dataSourceObservable;\n    } else {\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\n    }\n\n    processedDataSource\n    .subscribe((dataValue: T & ShellModel) => {\n      this.timeline.next(dataValue);\n    });\n  }\n\n  public get state(): Observable<T & ShellModel> {\n    return this.timeline.asObservable();\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { VideoPlaylistModel } from './video-playlist.model';\nimport { DataStore } from '../shell/data-store';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class VideoPlaylistService {\n\n  private videoPlaylistDataStore: DataStore<VideoPlaylistModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  public getVideoPlaylistDataSource(): Observable<VideoPlaylistModel> {\n    const rawDataSource = this.http.get<VideoPlaylistModel>('./assets/sample-data/video-playlist/video-playlist.json');\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('video-playlist-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getVideoPlaylistStore(dataSource: Observable<VideoPlaylistModel>): DataStore<VideoPlaylistModel> {\n    // Use cache if available\n    if (!this.videoPlaylistDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: VideoPlaylistModel = new VideoPlaylistModel();\n      this.videoPlaylistDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.videoPlaylistDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.videoPlaylistDataStore.load(dataSource);\n      }\n    }\n\n    return this.videoPlaylistDataStore;\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VideoPlaylistPage } from './video-playlist.page';\nimport { VideoPlaylistResolver } from './video-playlist.resolver';\nimport { VideoPlaylistService } from './video-playlist.service';\nimport { ComponentsModule } from '../components/components.module';\n\nimport { VgCoreModule } from '@videogular/ngx-videogular/core';\nimport { VgControlsModule } from '@videogular/ngx-videogular/controls';\nimport { VgOverlayPlayModule } from '@videogular/ngx-videogular/overlay-play';\nimport { VgBufferingModule } from '@videogular/ngx-videogular/buffering';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VideoPlaylistPage,\n    resolve: {\n      data: VideoPlaylistResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    ComponentsModule,\n    RouterModule.forChild(routes),\n    VgCoreModule,\n    VgControlsModule,\n    VgOverlayPlayModule,\n    VgBufferingModule\n  ],\n  declarations: [ VideoPlaylistPage ],\n  providers: [\n    VideoPlaylistResolver,\n    VideoPlaylistService\n  ]\n})\nexport class VideoPlaylistPageModule {}\n"],"sourceRoot":"webpack:///"}