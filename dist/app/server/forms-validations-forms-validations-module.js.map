{"version":3,"sources":["./src/app/forms/validations/country-phone.model.ts","./src/app/forms/validations/forms-validations.page.ts","./src/app/forms/validations/forms-validations.page.html","./src/app/validators/phone.validator.ts","./src/app/validators/password.validator.ts","./src/app/forms/validations/forms-validations.module.ts","./src/app/validators/username.validator.ts"],"names":[],"mappings":"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","file":"forms-validations-forms-validations-module.js","sourcesContent":["import libphonenumber from 'google-libphonenumber';\n\nexport class CountryPhone {\n  iso: string;\n  name: string;\n  code: string;\n  sample_phone: string;\n\n  constructor (iso: string, name: string) {\n    this.iso = iso;\n    this.name = name;\n\n    const phoneUtil = libphonenumber.PhoneNumberUtil.getInstance(),\n        PNF = libphonenumber.PhoneNumberFormat,\n        PNT = libphonenumber.PhoneNumberType,\n        country_example_number = phoneUtil.getExampleNumberForType(this.iso, PNT.MOBILE),\n        // We need to define what kind of country phone number type we are going to use as a mask.\n        // You can choose between many types including:\n        //    - FIXED_LINE\n        //    - MOBILE\n        //    - For more types please refer to google libphonenumber repo\n        // (https://bit.ly/2QZb6J9)\n        example_number_formatted = phoneUtil.format(country_example_number, PNF.NATIONAL);\n        // We need to define how are we going to format the phone number\n        // You can choose between many formats including:\n        //    - NATIONAL\n        //    - INTERNATIONAL\n        //    - E164\n        //    - RFC3966\n\n    this.sample_phone = example_number_formatted;\n    this.code = '+' + country_example_number.getCountryCode();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\n\nimport { UsernameValidator } from '../../validators/username.validator';\nimport { PasswordValidator } from '../../validators/password.validator';\nimport { PhoneValidator } from '../../validators/phone.validator';\n\nimport { counterRangeValidator } from '../../components/counter-input/counter-input.component';\nimport { CountryPhone } from './country-phone.model';\n\n@Component({\n  selector: 'forms-validations-page',\n  templateUrl: './forms-validations.page.html',\n  styleUrls: [\n    './styles/forms-validations.page.scss'\n  ]\n})\nexport class FormsValidationsPage implements OnInit {\n\n  validationsForm: FormGroup;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n  countries: Array<CountryPhone>;\n  genders: Array<string>;\n\n  validations = {\n    'username': [\n      { type: 'required', message: 'Username is required.' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long.' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters.' },\n      { type: 'usernameNotAvailable', message: 'Your username is already taken.' }\n    ],\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'invalidCountryPhone', message: 'Phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Password confirmation is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areNotEqual', message: 'Password mismatch' }\n    ],\n    'guests': [\n      { type: 'rangeError', message: 'Number must be between: ' }\n    ],\n    'bedrooms': [\n      { type: 'rangeError', message: 'Number must be between: ' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ]\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n    //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n    this.countries = [\n      new CountryPhone('UY', 'Uruguay'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('ES', 'España'),\n      new CountryPhone('BR', 'Brasil'),\n      new CountryPhone('FR', 'France')\n    ];\n\n    this.genders = [\n      'Female',\n      'Male',\n      'Other'\n    ];\n\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areNotEqual(formGroup);\n    });\n\n    const country = new FormControl(this.countries[0], Validators.required);\n\n    const phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.invalidCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validationsForm = new FormGroup({\n      'username': new FormControl('', Validators.compose([\n        UsernameValidator.usernameNotAvailable,\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n      ])),\n      'name': new FormControl('', Validators.required),\n      'lastname': new FormControl('', Validators.required),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'gender': new FormControl(this.genders[0], Validators.required),\n      'country_phone': this.country_phone_group,\n      'matching_passwords': this.matching_passwords_group,\n      'guests': new FormControl(6, counterRangeValidator(1, 12)),\n      'bedrooms': new FormControl(3, counterRangeValidator(1, 5)),\n      'terms': new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  onSubmit(values) {\n    console.log(values);\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>Forms & Validations</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"forms-validations-content\">\n  <form class=\"validations-form\" [formGroup]=\"validationsForm\" (ngSubmit)=\"onSubmit(validationsForm.value)\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-list-header>\n        <ion-label class=\"header-title\">Basic Validations</ion-label>\n      </ion-list-header>\n\n      <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n      <ion-item class=\"input-item item-label-floating\">\n        <ion-label position=\"floating\">Username</ion-label>\n        <ion-input type=\"text\" formControlName=\"username\" clearInput required></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.username\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('username').hasError(validation.type) && (validationsForm.get('username').dirty || validationsForm.get('username').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n      <ion-item class=\"input-item item-label-floating\">\n        <ion-label position=\"floating\">Name</ion-label>\n        <ion-input type=\"text\" formControlName=\"name\" clearInput></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.name\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('name').hasError(validation.type) && (validationsForm.get('name').dirty || validationsForm.get('name').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n      <ion-item class=\"input-item item-label-floating\">\n        <ion-label position=\"floating\">Last Name</ion-label>\n        <ion-input type=\"text\" formControlName=\"lastname\" clearInput></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.lastname\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('lastname').hasError(validation.type) && (validationsForm.get('lastname').dirty || validationsForm.get('lastname').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n      <ion-item class=\"input-item item-label-floating\">\n        <ion-label position=\"floating\">Email</ion-label>\n        <ion-input type=\"text\" formControlName=\"email\" clearInput inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.email\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('email').hasError(validation.type) && (validationsForm.get('email').dirty || validationsForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n      <ion-item class=\"input-item item-label-floating\">\n        <ion-label position=\"floating\">Gender</ion-label>\n        <ion-select formControlName=\"gender\" cancelText=\"Cancel\" okText=\"OK\">\n          <ion-select-option *ngFor=\"let gender of genders\" [value]=\"gender\" >{{ gender }}</ion-select-option>\n        </ion-select>\n      </ion-item>\n    </ion-list>\n\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-list-header>\n        <ion-label class=\"header-title\">Phone Validations</ion-label>\n      </ion-list-header>\n\n      <div formGroupName=\"country_phone\">\n        <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n        <ion-item class=\"input-item item-label-floating\">\n          <ion-label position=\"floating\">Country</ion-label>\n          <ion-select formControlName=\"country\" cancelText=\"Cancel\" okText=\"OK\">\n            <ion-select-option *ngFor=\"let item of countries\" [value]=\"item\" >{{item.name}}</ion-select-option>\n          </ion-select>\n        </ion-item>\n        <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n        <ion-item class=\"input-item item-label-floating\">\n          <ion-label position=\"floating\">Phone</ion-label>\n          <ion-input clearInput placeholder=\"{{ validationsForm.value.country_phone.country.sample_phone }}\" type=\"text\" formControlName=\"phone\"></ion-input>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validations.phone\">\n            <div class=\"error-message\" *ngIf=\"validationsForm.get('country_phone').get('phone').hasError(validation.type) && (validationsForm.get('country_phone').get('phone').dirty || validationsForm.get('country_phone').get('phone').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </ion-list>\n\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-list-header>\n        <ion-label class=\"header-title\">Password Validations</ion-label>\n      </ion-list-header>\n\n      <div formGroupName=\"matching_passwords\">\n        <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n        <ion-item class=\"input-item item-label-floating\">\n          <ion-label position=\"floating\">Password</ion-label>\n          <ion-input type=\"password\" formControlName=\"password\"></ion-input>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validations.password\">\n            <div class=\"error-message\" *ngIf=\"validationsForm.get('matching_passwords').get('password').hasError(validation.type) && (validationsForm.get('matching_passwords').get('password').dirty || validationsForm.get('matching_passwords').get('password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n\n        <!-- When this bug (https://github.com/ionic-team/ionic-framework/issues/22117) gets fixed, remove .item-label-floating class -->\n        <ion-item class=\"input-item item-label-floating\">\n          <ion-label position=\"floating\">Confirm Password</ion-label>\n          <ion-input type=\"password\" formControlName=\"confirm_password\"></ion-input>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validations.confirm_password\">\n            <div class=\"error-message\" *ngIf=\"validationsForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (validationsForm.get('matching_passwords').get('confirm_password').dirty || validationsForm.get('matching_passwords').get('confirm_password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.matching_passwords\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('matching_passwords').hasError(validation.type) && (validationsForm.get('matching_passwords').get('confirm_password').dirty || validationsForm.get('matching_passwords').get('confirm_password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-list-header>\n        <ion-label class=\"header-title\">Counter Validations</ion-label>\n      </ion-list-header>\n      <ion-item class=\"counter-item input-item\">\n        <ion-label>Guests</ion-label>\n        <app-counter-input formControlName=\"guests\"></app-counter-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.guests\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('guests').hasError(validation.type) && (validationsForm.get('guests').dirty || validationsForm.get('guests').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }} {{ validationsForm.get('guests').getError(validation.type).min }} and {{ validationsForm.get('guests').getError(validation.type).max }}</span>\n          </div>\n        </ng-container>\n      </div>\n      <ion-item class=\"counter-item input-item\">\n        <ion-label class=\"counter-label\">Bedrooms</ion-label>\n        <ion-label class=\"counter-value\">{{validationsForm.controls.bedrooms.value}}</ion-label>\n        <app-counter-input formControlName=\"bedrooms\" basic></app-counter-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.bedrooms\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('bedrooms').hasError(validation.type) && (validationsForm.get('bedrooms').dirty || validationsForm.get('bedrooms').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }} {{ validationsForm.get('bedrooms').getError(validation.type).min }} and {{ validationsForm.get('bedrooms').getError(validation.type).max }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-list-header>\n        <ion-label class=\"header-title\">Terms and Conditions</ion-label>\n      </ion-list-header>\n\n      <ion-item class=\"input-item terms-item\">\n        <ion-label>I accept terms and conditions</ion-label>\n        <ion-checkbox formControlName=\"terms\"></ion-checkbox>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validations.terms\">\n          <div class=\"error-message\" *ngIf=\"validationsForm.get('terms').hasError(validation.type) && (validationsForm.get('terms').dirty || validationsForm.get('terms').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"submit-btn\" type=\"submit\" expand=\"block\" fill=\"outline\" [disabled]=\"!validationsForm.valid\">Submit</ion-button>\n  </form>\n</ion-content>\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\n\nexport class PhoneValidator {\n\n  // Validate if a phone number belongs to a certain country.\n  // If our validation fails, we return an object with a key for the error name and a value of true.\n  // Otherwise, if the validation passes, we simply return null because there is no error.\n\n  static invalidCountryPhone = (countryControl: AbstractControl): ValidatorFn => {\n    let subscribe = false;\n\n    return (phoneControl: AbstractControl): {[key: string]: boolean} => {\n      if (!subscribe) {\n        subscribe = true;\n        countryControl.valueChanges.subscribe(() => {\n          phoneControl.updateValueAndValidity();\n        });\n      }\n\n      if (phoneControl.value !== '') {\n        try {\n          const phoneUtil = libphonenumber.PhoneNumberUtil.getInstance();\n          const phoneNumber = '' + phoneControl.value + '',\n              region = countryControl.value.iso,\n              number = phoneUtil.parse(phoneNumber, region),\n              isValidNumber = phoneUtil.isValidNumber(number);\n\n          if (isValidNumber) {\n            return null;\n          }\n        } catch (e) {\n          return {\n            invalidCountryPhone: true\n          };\n        }\n\n        return {\n          invalidCountryPhone: true\n        };\n      } else {\n        return null;\n      }\n    };\n  }\n}\n","import { FormControl, FormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n\n  // If our validation fails, we return an object with a key for the error name and a value of true.\n  // Otherwise, if the validation passes, we simply return null because there is no error.\n\n  static areNotEqual(formGroup: FormGroup) {\n    let firstControlValue: any;\n    let valid = true;\n\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control: FormControl = <FormControl>formGroup.controls[key];\n\n        if (firstControlValue === undefined) {\n          firstControlValue = control.value;\n        } else {\n          // check if the value of the first control is equal to the value of the second control\n          if (firstControlValue !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areNotEqual: true\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ComponentsModule } from '../../components/components.module';\nimport { FormsValidationsPage } from './forms-validations.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FormsValidationsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [FormsValidationsPage]\n})\nexport class FormsValidationsPageModule {}\n","import { FormControl } from '@angular/forms';\n\nexport class UsernameValidator {\n\n  static usernameNotAvailable(fc: FormControl) {\n\n    // this is a dummy validator to check if the username is valid or not.\n    // In a real app you should check against your DB if the username is already in use.\n    // in this example we define two existing usernames: 'abc123' and '123abc'\n    // If our validation fails, we return an object with a key for the error name and a value of true.\n    // Otherwise, if the validation passes, we simply return null because there is no error.\n\n    if (fc.value.toLowerCase() === 'abc123' || fc.value.toLowerCase() === '123abc') {\n      return {\n        usernameNotAvailable: true\n      };\n    } else {\n      return null;\n    }\n  }\n}\n"],"sourceRoot":"webpack:///"}