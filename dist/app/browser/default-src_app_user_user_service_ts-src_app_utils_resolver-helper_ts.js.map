{"version":3,"file":"default-src_app_user_user_service_ts-src_app_utils_resolver-helper_ts.js","mappings":"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","sources":["./src/app/shell/data-store.ts","./src/app/user/friends/user-friends.model.ts","./src/app/user/profile/user-profile.model.ts","./src/app/user/user.service.ts","./src/app/utils/resolver-helper.ts"],"sourcesContent":["import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { delay, map, startWith } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport class ShellModel {\n  isShell = false;\n}\n\nexport class DataStore<T> {\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the environment.prod file.\n  // eslint-disable-next-line max-len\n  private networkDelay = (environment.appShellConfig && environment.appShellConfig.networkDelay) ? environment.appShellConfig.networkDelay : 0;\n\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\n\n  constructor(private shellModel: T) { }\n\n  // Static function with generics\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\n    const delayObservable = of(true).pipe(\n      delay(networkDelay)\n    );\n\n    // Assign shell flag accordingly\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    return combineLatest([\n      delayObservable,\n      dataObservable\n    ]).pipe(\n      // Dismiss unnecessary delayValue\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\n      // Set the shell model as the initial value\n      startWith(Object.assign(shellModel, {isShell: true}))\n    );\n  }\n\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\n    // eslint-disable-next-line no-shadow, @typescript-eslint/no-shadow\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\n\n    let processedDataSource: Observable<any>;\n\n    // If no network delay, then don't show shell\n    if (delay === 0) {\n      processedDataSource = dataSourceObservable;\n    } else {\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\n    }\n\n    processedDataSource\n    .subscribe((dataValue: T & ShellModel) => {\n      this.timeline.next(dataValue);\n    });\n  }\n\n  public get state(): Observable<T & ShellModel> {\n    return this.timeline.asObservable();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class UserFriendsModel extends ShellModel {\n  friends: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: true\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    }\n  ];\n  followers: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: true\n    }\n  ];\n  following: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class UserProfileModel extends ShellModel {\n  userImage: string;\n  name: string;\n  membership: string;\n  job: string;\n  likes: string;\n  followers: string;\n  following: string;\n  about: string;\n  friends: Array<{image: string, name: string}> = [\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    }\n  ];\n  photos: Array<string> = [\n    '',\n    '',\n    '',\n    ''\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { UserProfileModel } from './profile/user-profile.model';\nimport { UserFriendsModel } from './friends/user-friends.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class UserService {\n  private profileDataStore: DataStore<UserProfileModel>;\n  private friendsDataStore: DataStore<UserFriendsModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  public getProfileDataSource(): Observable<UserProfileModel> {\n    const rawDataSource = this.http.get<UserProfileModel>('./assets/sample-data/user/user-profile.json')\n    .pipe(\n      map(\n        (data: UserProfileModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const profile = new UserProfileModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. profile = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(profile, data);\n\n          return profile;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('profile-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getProfileStore(dataSource: Observable<UserProfileModel>): DataStore<UserProfileModel> {\n    // Use cache if available\n    if (!this.profileDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: UserProfileModel = new UserProfileModel();\n      this.profileDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.profileDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.profileDataStore.load(dataSource);\n      }\n    }\n\n    return this.profileDataStore;\n  }\n\n  public getFriendsDataSource(): Observable<UserFriendsModel> {\n    const rawDataSource = this.http.get<UserFriendsModel>('./assets/sample-data/user/user-friends.json')\n    .pipe(\n      map(\n        (data: UserFriendsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const friends = new UserFriendsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. friends = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(friends, data);\n\n          return friends;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('friends-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getFriendsStore(dataSource: Observable<UserFriendsModel>): DataStore<UserFriendsModel> {\n    // Use cache if available\n    if (!this.friendsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: UserFriendsModel = new UserFriendsModel();\n      this.friendsDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.friendsDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.friendsDataStore.load(dataSource);\n      }\n    }\n\n    return this.friendsDataStore;\n  }\n}\n","import { DataStore } from '../shell/data-store';\nimport { Observable, of } from 'rxjs';\n\nexport interface IResolvedRouteData<T> {\n  data: T | DataStore<T>;\n}\n\nexport class ResolverHelper<T> {\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\n    if (source instanceof DataStore) {\n      return source.state;\n    } else if (source instanceof constructor) {\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\n      // That's why we included an extra parameter which acts as a constructor function for type T\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\n      return of(source);\n    }\n  }\n}\n"],"names":["of","combineLatest","ReplaySubject","delay","map","startWith","environment","ShellModel","constructor","isShell","DataStore","shellModel","networkDelay","appShellConfig","timeline","AppendShell","dataObservable","delayObservable","pipe","delayValue","dataValue","Object","assign","load","dataSourceObservable","processedDataSource","subscribe","next","state","asObservable","UserFriendsModel","friends","image","name","job","followers","followings","following","UserProfileModel","photos","PLATFORM_ID","HttpClient","TransferStateHelper","isPlatformServer","UserService","platformId","transferStateHelper","http","getProfileDataSource","rawDataSource","get","data","profile","cachedDataSource","checkDataSourceState","getProfileStore","dataSource","profileDataStore","getFriendsDataSource","getFriendsStore","friendsDataStore","_","i0","ɵɵinject","i1","i2","_2","factory","ɵfac","ResolverHelper","extractData","source"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}