{"version":3,"file":"src_app_firebase_auth_sign-in_firebase-sign-in_module_ts.js","mappings":"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","sources":["./src/app/firebase/auth/sign-in/firebase-sign-in.module.ts","./src/app/firebase/auth/sign-in/firebase-sign-in.page.ts","./src/app/firebase/auth/sign-in/firebase-sign-in.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { map } from 'rxjs/operators';\n\nimport { canActivate, AuthPipeGenerator } from '@angular/fire/auth-guard';\n\nimport { FirebaseSignInPage } from './firebase-sign-in.page';\nimport { ComponentsModule } from '../../../components/components.module';\n\n\n// ? Firebase guard to redirect logged in users to profile\nconst redirectLoggedInToProfile: AuthPipeGenerator = (next) => map(user => {\n  // ? When queryParams['auth-redirect'] don't redirect because we want the component to handle the redirection\n  if (user !== null && !next.queryParams['auth-redirect']) {\n    return ['firebase/auth/profile'];\n  } else {\n    return true;\n  }\n});\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FirebaseSignInPage,\n    ...canActivate(redirectLoggedInToProfile)\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [FirebaseSignInPage]\n})\nexport class FirebaseSignInPageModule {}\n","import { Component, NgZone } from '@angular/core';\nimport { Validators, UntypedFormGroup, UntypedFormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthStateChange, SignInResult } from '@capacitor-firebase/authentication';\n\nimport { Subscription } from 'rxjs';\n\nimport { HistoryHelperService } from '../../../utils/history-helper.service';\nimport { FirebaseAuthService } from '../firebase-auth.service';\n\n@Component({\n  selector: 'app-firebase-sign-in',\n  templateUrl: './firebase-sign-in.page.html',\n  styleUrls: [\n    './styles/firebase-sign-in.page.scss'\n  ]\n})\nexport class FirebaseSignInPage {\n  loginForm: UntypedFormGroup;\n  submitError: string;\n  authRedirectResult: Subscription;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ]\n  };\n\n  constructor(\n    public router: Router,\n    public firebaseAuthService: FirebaseAuthService,\n    private ngZone: NgZone,\n    public historyHelper: HistoryHelperService\n  ) {\n    this.loginForm = new UntypedFormGroup({\n      'email': new UntypedFormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'password': new UntypedFormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ]))\n    });\n\n    // ? Get firebase authentication redirect result invoked when using signInWithRedirect()\n    // ? signInWithRedirect() is only used when client is in web but not desktop. For example a PWA\n    this.authRedirectResult = this.firebaseAuthService.redirectResult$\n    .subscribe(result => {\n      if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      } else {\n        this.redirectLoggedUserToProfilePage();\n      }\n    });\n\n    this.firebaseAuthService.authState$\n    .subscribe((stateChange: AuthStateChange) => {\n      if (!stateChange.user) {\n        this.manageAuthWithProvidersErrors('No user logged in');\n      } else {\n        this.redirectLoggedUserToProfilePage();\n      }\n    });\n  }\n\n  public async doFacebookLogin(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithFacebook()\n      .then((result: SignInResult) => {\n        // ? This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        // const token = result.credential.accessToken;\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async doGoogleLogin(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithGoogle()\n      .then((result) => {\n        // ? This gives you a Google Access Token. You can use it to access the Google API.\n        // const token = result.credential.accessToken;\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async doTwitterLogin(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithTwitter()\n      .then((result) => {\n        // ? This gives you a Twitter Access Token. You can use it to access the Twitter API.\n        // const token = result.credential.accessToken;\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async doAppleLogin(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithApple()\n      .then((result) => {\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async signInWithEmail(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithEmail(this.loginForm.value['email'], this.loginForm.value['password'])\n      .then((result) => {\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.submitError = error.message;\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  // ? Once the auth provider finished the authentication flow, and the auth redirect completes, hide the loader and redirect the user to the profile page\n  private redirectLoggedUserToProfilePage(): void {\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'firebase/auth/profile';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's just a a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n  private manageAuthWithProvidersErrors(errorMessage: string): void {\n    this.submitError = errorMessage;\n  }\n\n  private resetSubmitError(): void {\n    this.submitError = null;\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"app/categories\"></ion-back-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"login-content\">\n  <h2 class=\"auth-title\">\n    Sign In with Firebase\n    <br/>\n  </h2>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"signInWithEmail()\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-item class=\"input-item\">\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <ion-item class=\"input-item\">\n        <app-show-hide-password>\n          <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n        </app-show-hide-password>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.password\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"login-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!loginForm.valid\">Log In</ion-button>\n    <div class=\"error-container\" *ngIf=\"submitError\">\n      <div class=\"error-message\">\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\n        <span>{{ submitError }}</span>\n      </div>\n    </div>\n    <ion-row class=\"other-auth-options-row\">\n      <ion-button class=\"signup-btn\" fill=\"clear\" [routerLink]=\"['/firebase/auth/sign-up']\">\n        Sign Up!\n      </ion-button>\n    </ion-row>\n  </form>\n\n  <div class=\"social-auth-options\">\n    <p class=\"options-divider\">Or</p>\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookLogin()\">Log In with Facebook</ion-button>\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleLogin()\">Log In with Google</ion-button>\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterLogin()\">Log In with Twitter</ion-button>\n    <ion-button class=\"social-auth-btn apple-auth-btn\" expand=\"block\" color=\"dark\" (click)=\"doAppleLogin()\">Log In with Apple</ion-button>\n  </div>\n</ion-content>\n"],"names":["CommonModule","FormsModule","ReactiveFormsModule","RouterModule","IonicModule","map","canActivate","FirebaseSignInPage","ComponentsModule","redirectLoggedInToProfile","next","user","queryParams","routes","path","component","FirebaseSignInPageModule","_","_2","_3","forChild","declarations","imports","i1","NgZone","Validators","UntypedFormGroup","UntypedFormControl","Router","HistoryHelperService","FirebaseAuthService","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","validation_r3","message","ɵɵelementContainerStart","ɵɵtemplate","FirebaseSignInPage_ng_container_13_div_1_Template","ɵɵelementContainerEnd","ɵɵproperty","ctx_r0","loginForm","get","hasError","type","dirty","touched","validation_r6","FirebaseSignInPage_ng_container_18_div_1_Template","ctx_r1","ctx_r2","submitError","constructor","router","firebaseAuthService","ngZone","historyHelper","validation_messages","compose","required","pattern","minLength","authRedirectResult","redirectResult$","subscribe","result","error","manageAuthWithProvidersErrors","redirectLoggedUserToProfilePage","authState$","stateChange","doFacebookLogin","_this","_asyncToGenerator","resetSubmitError","signInWithFacebook","then","catch","doGoogleLogin","_this2","signInWithGoogle","doTwitterLogin","_this3","signInWithTwitter","doAppleLogin","_this4","signInWithApple","signInWithEmail","_this5","value","run","previousUrl","navigate","replaceUrl","errorMessage","ɵɵdirectiveInject","i2","i3","selectors","decls","vars","consts","template","FirebaseSignInPage_Template","rf","ctx","ɵɵlistener","FirebaseSignInPage_Template_form_ngSubmit_8_listener","FirebaseSignInPage_ng_container_13_Template","FirebaseSignInPage_ng_container_18_Template","FirebaseSignInPage_div_21_Template","FirebaseSignInPage_Template_ion_button_click_28_listener","FirebaseSignInPage_Template_ion_button_click_30_listener","FirebaseSignInPage_Template_ion_button_click_32_listener","FirebaseSignInPage_Template_ion_button_click_34_listener","email","password","valid","ɵɵpureFunction0","_c0"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}