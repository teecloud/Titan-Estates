{"version":3,"file":"src_app_notifications_notifications_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA6C;AACE;AAEA;AAEoB;AAEV;AACuB;AACF;;;AAuBxE,MAAOO,uBAAuB;EAAA,QAAAC,CAAA;qBAAvBD,uBAAuB;EAAA;EAAA,QAAAE,EAAA;UAAvBF;EAAuB;EAAA,QAAAG,EAAA;eALvB,CACTL,wFAAqB,EACrBC,sFAAoB,CACrB;IAAAK,OAAA,GAjBCX,uDAAW,EACXE,yDAAY,EACZC,2EAAgB,EAChBF,kEAAqB,CAAC,CACpB;MACEY,IAAI,EAAE,EAAE;MACRC,SAAS,EAAEV,kEAAiB;MAC5BW,OAAO,EAAE;QACPC,IAAI,EAAEX,wFAAqBA;;KAE9B,CACF,CAAC;EAAA;;;sHAQOE,uBAAuB;IAAAU,YAAA,GANlBb,kEAAiB;IAAAO,OAAA,GAb/BX,uDAAW,EACXE,yDAAY,EACZC,2EAAgB,EAAAe,yDAAA;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACd6B;AAEN;;;;;;;;;;;;;;;ICcrCG,4DAAA,kBAAkG;IAI1FA,uDAAA,0BAA8G;IAChHA,0DAAA,EAAmB;IAErBA,4DAAA,kBAAiC;IACNA,oDAAA,GAAuB;IAAAA,0DAAA,EAAK;IACrDA,4DAAA,YAA+B;IAAAA,oDAAA,GAA0B;IAAAA,0DAAA,EAAI;IAE/DA,4DAAA,mBAAuC;IACPA,oDAAA,IAAuB;IAAAA,0DAAA,EAAK;;;;IATxCA,uDAAA,GAAsB;IAAtBA,wDAAA,UAAAA,6DAAA,IAAAQ,GAAA,EAAsB;IACMR,uDAAA,GAA0B;IAA1BA,wDAAA,QAAAS,eAAA,CAAAC,KAAA,CAA0B;IAI/CV,uDAAA,GAAuB;IAAvBA,+DAAA,CAAAS,eAAA,CAAAG,IAAA,CAAuB;IACjBZ,uDAAA,GAA0B;IAA1BA,+DAAA,CAAAS,eAAA,CAAAI,OAAA,CAA0B;IAG3Bb,uDAAA,GAAuB;IAAvBA,+DAAA,CAAAS,eAAA,CAAAK,IAAA,CAAuB;;;;;IAS3Dd,4DAAA,kBAAsG;IAI9FA,uDAAA,0BAA8G;IAChHA,0DAAA,EAAmB;IAErBA,4DAAA,kBAAiC;IACNA,oDAAA,GAAuB;IAAAA,0DAAA,EAAK;IACrDA,4DAAA,YAA+B;IAAAA,oDAAA,GAA0B;IAAAA,0DAAA,EAAI;IAE/DA,4DAAA,mBAAuC;IACPA,oDAAA,IAAuB;IAAAA,0DAAA,EAAK;;;;IATxCA,uDAAA,GAAsB;IAAtBA,wDAAA,UAAAA,6DAAA,IAAAQ,GAAA,EAAsB;IACMR,uDAAA,GAA0B;IAA1BA,wDAAA,QAAAe,eAAA,CAAAL,KAAA,CAA0B;IAI/CV,uDAAA,GAAuB;IAAvBA,+DAAA,CAAAe,eAAA,CAAAH,IAAA,CAAuB;IACjBZ,uDAAA,GAA0B;IAA1BA,+DAAA,CAAAe,eAAA,CAAAF,OAAA,CAA0B;IAG3Bb,uDAAA,GAAuB;IAAvBA,+DAAA,CAAAe,eAAA,CAAAD,IAAA,CAAuB;;;;;IAtC/Dd,qEAAA,GAAoC;IAClCA,4DAAA,qBAAgB;IAEDA,oDAAA,YAAK;IAAAA,0DAAA,EAAY;IAE9BA,wDAAA,IAAAkB,oDAAA,uBAeW;IACblB,0DAAA,EAAiB;IACjBA,4DAAA,qBAAgB;IAEDA,oDAAA,gBAAS;IAAAA,0DAAA,EAAY;IAElCA,wDAAA,KAAAmB,qDAAA,uBAeW;IACbnB,0DAAA,EAAiB;IACnBA,mEAAA,EAAe;;;;IAtC+DA,uDAAA,GAAsB;IAAtBA,wDAAA,YAAAqB,MAAA,CAAAC,aAAA,CAAAC,KAAA,CAAsB;IAqBtBvB,uDAAA,GAA0B;IAA1BA,wDAAA,YAAAqB,MAAA,CAAAC,aAAA,CAAAE,SAAA,CAA0B;;;ADzBpG,MAAOzC,iBAAiB;EAM5B0C,YAAoBC,KAAqB;IAArB,KAAAA,KAAK,GAALA,KAAK;EAAoB;EAE7CC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,GAAG,IAAI,CAACF,KAAK,CAAC/B,IAAI,CACnCkC,IAAI;IACH;IACA9B,yDAAS,CAAE+B,iBAA4C,IAAI;MACzD,OAAOA,iBAAiB,CAAC,MAAM,CAAC,CAACC,MAAM;IACzC,CAAC,CAAC,CACH,CACAC,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACZ,aAAa,GAAGY,QAAQ;MAC/B,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;KACpC,CAAC;EACJ;EAGA;EACA;EACAG,gBAAgBA,CAAA;IACd,IAAI,CAACV,aAAa,CAACW,WAAW,EAAE;EAClC;EAAC,QAAApD,CAAA;qBA7BUJ,iBAAiB,EAAAiB,+DAAA,CAAAH,2DAAA;EAAA;EAAA,QAAAT,EAAA;UAAjBL,iBAAiB;IAAA0D,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCb9B/C,4DAAA,iBAAY;QAGNA,uDAAA,sBAAmC;QACrCA,0DAAA,EAAc;QACdA,4DAAA,gBAAW;QACTA,oDAAA,sBACF;QAAAA,0DAAA,EAAY;QAIhBA,4DAAA,qBAA2C;QACzCA,wDAAA,IAAAiD,yCAAA,2BA2Ce;QACjBjD,0DAAA,EAAc;;;QA5CGA,uDAAA,GAAmB;QAAnBA,wDAAA,SAAAgD,GAAA,CAAA1B,aAAA,CAAmB;;;;;;;;;;;;;;;;;;;;;;ACR2B;;;AAGzD,MAAOtC,qBAAqB;EAEhCyC,YAAoByB,oBAA0C;IAA1C,KAAAA,oBAAoB,GAApBA,oBAAoB;EAA0B;EAElExD,OAAOA,CAAA;IACL;IACA,MAAMyD,cAAc,GAAoB,IAAI,CAACD,oBAAoB,CAACE,OAAO,EAAE;IAE3E,OAAO;MAAErB,MAAM,EAAEoB;IAAc,CAAE;EACnC;EAAC,QAAAhE,CAAA;qBATUH,qBAAqB,EAAAgB,sDAAA,CAAAH,wEAAA;EAAA;EAAA,QAAAT,EAAA;WAArBJ,qBAAqB;IAAAsE,OAAA,EAArBtE,qBAAqB,CAAAuE;EAAA;;;;;;;;;;;;;;;;;ACNgB;;;AAI5C,MAAOtE,oBAAoB;EAC/BwC,YAAoBgC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAEjCL,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACK,IAAI,CAACC,GAAG,CAAM,yCAAyC,CAAC;EACtE;EAAC,QAAAvE,CAAA;qBALUF,oBAAoB,EAAAe,sDAAA,CAAAH,4DAAA;EAAA;EAAA,QAAAT,EAAA;WAApBH,oBAAoB;IAAAqE,OAAA,EAApBrE,oBAAoB,CAAAsE;EAAA","sources":["./src/app/notifications/notifications.module.ts","./src/app/notifications/notifications.page.ts","./src/app/notifications/notifications.page.html","./src/app/notifications/notifications.resolver.ts","./src/app/notifications/notifications.service.ts"],"sourcesContent":["import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ComponentsModule } from '../components/components.module';\n\nimport { NotificationsPage } from './notifications.page';\nimport { NotificationsResolver } from '../notifications/notifications.resolver';\nimport { NotificationsService } from '../notifications/notifications.service';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    ComponentsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: NotificationsPage,\n        resolve: {\n          data: NotificationsResolver\n        }\n      }\n    ])\n  ],\n  declarations: [ NotificationsPage ],\n  providers: [\n    NotificationsResolver,\n    NotificationsService\n  ]\n})\nexport class NotificationsPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.page.html',\n  styleUrls: [\n    './styles/notifications.page.scss',\n    './styles/notifications.shell.scss'\n  ]\n})\nexport class NotificationsPage implements OnInit {\n  // Gather all component subscription in one place. Can be one Subscription or multiple (chained using the Subscription.add() method)\n  subscriptions: Subscription;\n\n  notifications: any;\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.subscriptions = this.route.data\n    .pipe(\n      // Extract data for this page\n      switchMap((resolvedRouteData: {source: Observable<any>}) => {\n        return resolvedRouteData['data'].source;\n      })\n    )\n    .subscribe({\n      next: (pageData) => {\n        this.notifications = pageData;\n      },\n      error: (error) => console.log(error)\n    });\n  }\n\n\n  // NOTE: Ionic only calls ngOnDestroy if the page was popped (ex: when navigating back)\n  // Since ngOnDestroy might not fire when you navigate from the current page, use ionViewWillLeave to cleanup Subscriptions\n  ionViewWillLeave(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Notifications\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"notifications-content\">\n  <ng-container *ngIf=\"notifications\">\n    <ion-item-group>\n      <ion-item-divider sticky>\n        <ion-label>Today</ion-label>\n      </ion-item-divider>\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.today\">\n        <ion-row class=\"notification-item-wrapper\">\n          <ion-col size=\"2\">\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\n            </app-aspect-ratio>\n          </ion-col>\n          <ion-col class=\"details-wrapper\">\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\n            <p class=\"details-description\">{{ notification.message }}</p>\n          </ion-col>\n          <ion-col size=\"2\" class=\"date-wrapper\">\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\n          </ion-col>\n        </ion-row>\n      </ion-item>\n    </ion-item-group>\n    <ion-item-group>\n      <ion-item-divider sticky>\n        <ion-label>Yesterday</ion-label>\n      </ion-item-divider>\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.yesterday\">\n        <ion-row class=\"notification-item-wrapper\">\n          <ion-col size=\"2\">\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\n            </app-aspect-ratio>\n          </ion-col>\n          <ion-col class=\"details-wrapper\">\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\n            <p class=\"details-description\">{{ notification.message }}</p>\n          </ion-col>\n          <ion-col size=\"2\" class=\"date-wrapper\">\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\n          </ion-col>\n        </ion-row>\n      </ion-item>\n    </ion-item-group>\n  </ng-container>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NotificationsService } from './notifications.service';\n\n@Injectable()\nexport class NotificationsResolver implements Resolve<any> {\n\n  constructor(private notificationsService: NotificationsService) { }\n\n  resolve() {\n    // Base Observable (where we get data from)\n    const dataObservable: Observable<any> = this.notificationsService.getData();\n\n    return { source: dataObservable };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(private http: HttpClient) { }\n\n  public getData(): Observable<any> {\n    return this.http.get<any>('./assets/sample-data/notifications.json');\n  }\n}\n"],"names":["IonicModule","RouterModule","CommonModule","ComponentsModule","NotificationsPage","NotificationsResolver","NotificationsService","NotificationsPageModule","_","_2","_3","imports","forChild","path","component","resolve","data","declarations","i1","ActivatedRoute","switchMap","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵproperty","ɵɵpureFunction0","_c0","notification_r3","image","ɵɵtextInterpolate","name","message","date","notification_r4","ɵɵelementContainerStart","ɵɵtemplate","NotificationsPage_ng_container_7_ion_item_5_Template","NotificationsPage_ng_container_7_ion_item_10_Template","ɵɵelementContainerEnd","ctx_r0","notifications","today","yesterday","constructor","route","ngOnInit","subscriptions","pipe","resolvedRouteData","source","subscribe","next","pageData","error","console","log","ionViewWillLeave","unsubscribe","ɵɵdirectiveInject","selectors","decls","vars","consts","template","NotificationsPage_Template","rf","ctx","NotificationsPage_ng_container_7_Template","notificationsService","dataObservable","getData","ɵɵinject","factory","ɵfac","HttpClient","http","get"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}