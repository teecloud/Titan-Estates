{"version":3,"file":"src_app_firebase_auth_sign-up_firebase-sign-up_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAC+C;AACmB;AACX;AAEV;AAER;AAEqC;AAEb;AACY;;;AAGzE;AACA,MAAMS,yBAAyB,GAAuBC,IAAI,IAAKL,mDAAG,CAACM,IAAI,IAAG;EACxE;EACA,IAAIA,IAAI,KAAK,IAAI,IAAI,CAACD,IAAI,CAACE,WAAW,CAAC,eAAe,CAAC,EAAE;IACvD,OAAO,CAAC,uBAAuB,CAAC;GACjC,MAAM;IACL,OAAO,IAAI;;AAEf,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAW,CACrB;EACEC,IAAI,EAAE,EAAE;EACRC,SAAS,EAAER,sEAAkB;EAC7B,GAAGD,qEAAW,CAACG,yBAAyB;CACzC,CACF;AAaK,MAAOO,wBAAwB;EAAA,QAAAC,CAAA;qBAAxBD,wBAAwB;EAAA;EAAA,QAAAE,EAAA;UAAxBF;EAAwB;EAAA,QAAAG,EAAA;cATjCnB,yDAAY,EACZC,uDAAW,EACXC,+DAAmB,EACnBE,uDAAW,EACXD,kEAAqB,CAACU,MAAM,CAAC,EAC7BL,2EAAgB;EAAA;;;sHAIPQ,wBAAwB;IAAAK,YAAA,GAFpBd,sEAAkB;IAAAe,OAAA,GAP/BtB,yDAAY,EACZC,uDAAW,EACXC,+DAAmB,EACnBE,uDAAW,EAAAmB,yDAAA,EAEXf,2EAAgB;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACxCsC;AACwB;AACzC;AACO;AAM6B;AACF;AACZ;;;;;;;;;;;ICQrDyB,4DAAA,cAA2J;IACzJA,uDAAA,mBAAuD;IACvDA,4DAAA,WAAM;IAAAA,oDAAA,GAAwB;IAAAA,0DAAA,EAAO;;;;IAA/BA,uDAAA,GAAwB;IAAxBA,+DAAA,CAAAO,aAAA,CAAAC,OAAA,CAAwB;;;;;IAHlCR,qEAAA,GAAmE;IACjEA,wDAAA,IAAAW,iDAAA,kBAGM;IACRX,mEAAA,EAAe;;;;;IAJeA,uDAAA,GAA6H;IAA7HA,wDAAA,SAAAc,MAAA,CAAAC,UAAA,CAAAC,GAAA,UAAAC,QAAA,CAAAV,aAAA,CAAAW,IAAA,MAAAJ,MAAA,CAAAC,UAAA,CAAAC,GAAA,UAAAG,KAAA,IAAAL,MAAA,CAAAC,UAAA,CAAAC,GAAA,UAAAI,OAAA,EAA6H;;;;;IAevJpB,4DAAA,cAAkP;IAChPA,uDAAA,mBAAuD;IACvDA,4DAAA,WAAM;IAAAA,oDAAA,GAAwB;IAAAA,0DAAA,EAAO;;;;IAA/BA,uDAAA,GAAwB;IAAxBA,+DAAA,CAAAqB,aAAA,CAAAb,OAAA,CAAwB;;;;;IAHlCR,qEAAA,GAAsE;IACpEA,wDAAA,IAAAsB,iDAAA,kBAGM;IACRtB,mEAAA,EAAe;;;;;IAJeA,uDAAA,GAAoN;IAApNA,wDAAA,SAAAuB,MAAA,CAAAR,UAAA,CAAAC,GAAA,uBAAAA,GAAA,aAAAC,QAAA,CAAAI,aAAA,CAAAH,IAAA,MAAAK,MAAA,CAAAR,UAAA,CAAAC,GAAA,uBAAAA,GAAA,aAAAG,KAAA,IAAAI,MAAA,CAAAR,UAAA,CAAAC,GAAA,uBAAAA,GAAA,aAAAI,OAAA,EAAoN;;;;;IAchPpB,4DAAA,cAA0Q;IACxQA,uDAAA,mBAAuD;IACvDA,4DAAA,WAAM;IAAAA,oDAAA,GAAwB;IAAAA,0DAAA,EAAO;;;;IAA/BA,uDAAA,GAAwB;IAAxBA,+DAAA,CAAAwB,cAAA,CAAAhB,OAAA,CAAwB;;;;;IAHlCR,qEAAA,GAA8E;IAC5EA,wDAAA,IAAAyB,iDAAA,kBAGM;IACRzB,mEAAA,EAAe;;;;;IAJeA,uDAAA,GAA4O;IAA5OA,wDAAA,SAAA0B,MAAA,CAAAX,UAAA,CAAAC,GAAA,uBAAAA,GAAA,qBAAAC,QAAA,CAAAO,cAAA,CAAAN,IAAA,MAAAQ,MAAA,CAAAX,UAAA,CAAAC,GAAA,uBAAAA,GAAA,qBAAAG,KAAA,IAAAO,MAAA,CAAAX,UAAA,CAAAC,GAAA,uBAAAA,GAAA,qBAAAI,OAAA,EAA4O;;;;;IAS1QpB,4DAAA,cAAkP;IAChPA,uDAAA,mBAAuD;IACvDA,4DAAA,WAAM;IAAAA,oDAAA,GAAwB;IAAAA,0DAAA,EAAO;;;;IAA/BA,uDAAA,GAAwB;IAAxBA,+DAAA,CAAA2B,cAAA,CAAAnB,OAAA,CAAwB;;;;;IAHlCR,qEAAA,GAAgF;IAC9EA,wDAAA,IAAA4B,iDAAA,kBAGM;IACR5B,mEAAA,EAAe;;;;;IAJeA,uDAAA,GAAoN;IAApNA,wDAAA,SAAA6B,MAAA,CAAAd,UAAA,CAAAC,GAAA,uBAAAC,QAAA,CAAAU,cAAA,CAAAT,IAAA,MAAAW,MAAA,CAAAd,UAAA,CAAAC,GAAA,uBAAAA,GAAA,qBAAAG,KAAA,IAAAU,MAAA,CAAAd,UAAA,CAAAC,GAAA,uBAAAA,GAAA,qBAAAI,OAAA,EAAoN;;;;;IAStPpB,4DAAA,aAAiD;IAE7CA,uDAAA,mBAAuD;IACvDA,4DAAA,WAAM;IAAAA,oDAAA,GAAiB;IAAAA,0DAAA,EAAO;;;;IAAxBA,uDAAA,GAAiB;IAAjBA,+DAAA,CAAA8B,MAAA,CAAAC,WAAA,CAAiB;;;;;;ADjDzB,MAAOzD,kBAAkB;EAuB7B0D,YACSC,IAAoB,EACpBC,MAAc,EACdC,mBAAwC,EACvCC,MAAc,EACfC,aAAmC;IAJnC,KAAAJ,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAClB,KAAAC,MAAM,GAANA,MAAM;IACP,KAAAC,aAAa,GAAbA,aAAa;IAtBtB,KAAAC,mBAAmB,GAAG;MACpB,OAAO,EAAE,CACP;QAAEpB,IAAI,EAAE,UAAU;QAAEV,OAAO,EAAE;MAAoB,CAAE,EACnD;QAAEU,IAAI,EAAE,SAAS;QAAEV,OAAO,EAAE;MAAsB,CAAE,CACrD;MACD,UAAU,EAAE,CACV;QAAEU,IAAI,EAAE,UAAU;QAAEV,OAAO,EAAE;MAAuB,CAAE,EACtD;QAAEU,IAAI,EAAE,WAAW;QAAEV,OAAO,EAAE;MAA8C,CAAE,CAC/E;MACD,kBAAkB,EAAE,CAClB;QAAEU,IAAI,EAAE,UAAU;QAAEV,OAAO,EAAE;MAA8B,CAAE,CAC9D;MACD,oBAAoB,EAAE,CACpB;QAAEU,IAAI,EAAE,aAAa;QAAEV,OAAO,EAAE;MAAmB,CAAE;KAExD;IASC,IAAI,CAAC+B,wBAAwB,GAAG,IAAI9C,4DAAgB,CAAC;MACnD,UAAU,EAAE,IAAIC,8DAAkB,CAAC,EAAE,EAAEF,8DAAkB,CAAC,CACxDA,gEAAoB,CAAC,CAAC,CAAC,EACvBA,+DAAmB,CACpB,CAAC,CAAC;MACH,kBAAkB,EAAE,IAAIE,8DAAkB,CAAC,EAAE,EAAEF,+DAAmB;KACnE,EAAGmD,SAA2B,IAAI;MACjC,OAAO7C,yFAA6B,CAAC6C,SAAS,CAAC;IACjD,CAAC,CAAC;IAEF,IAAI,CAAC5B,UAAU,GAAG,IAAItB,4DAAgB,CAAC;MACrC,OAAO,EAAE,IAAIC,8DAAkB,CAAC,EAAE,EAAEF,8DAAkB,CAAC,CACrDA,+DAAmB,EACnBA,8DAAkB,CAAC,iDAAiD,CAAC,CACtE,CAAC,CAAC;MACH,oBAAoB,EAAE,IAAI,CAAC+C;KAC5B,CAAC;IAEF;IACA;IACA,IAAI,CAACO,kBAAkB,GAAG,IAAI,CAACX,mBAAmB,CAACY,eAAe,CACjEC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAIA,MAAM,CAACC,KAAK,EAAE;QAChB,IAAI,CAACC,6BAA6B,CAACF,MAAM,CAACC,KAAK,CAAC;OACjD,MAAM;QACL,IAAI,CAACE,+BAA+B,EAAE;;IAE1C,CAAC,CAAC;IAEF,IAAI,CAACjB,mBAAmB,CAACkB,UAAU,CAClCL,SAAS,CAAEM,WAA4B,IAAI;MAC1C,IAAI,CAACA,WAAW,CAAC5E,IAAI,EAAE;QACrB,IAAI,CAACyE,6BAA6B,CAAC,mBAAmB,CAAC;OACxD,MAAM;QACL,IAAI,CAACC,+BAA+B,EAAE;;IAE1C,CAAC,CAAC;EACJ;EAEAG,QAAQA,CAAA;IACN,IAAI,CAACtB,IAAI,CAACuB,MAAM,CAAC,KAAK,CAAC;EACzB;EAEaC,gBAAgBA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,4LAAA;MAC3BD,KAAI,CAACE,gBAAgB,EAAE;MAEvB,IAAI;QACF,MAAMF,KAAI,CAACvB,mBAAmB,CAAC0B,kBAAkB,EAAE,CAClDC,IAAI,CAAEb,MAAoB,IAAI;UAC7B;UACA;UACAS,KAAI,CAACN,+BAA+B,EAAE;QACxC,CAAC,CAAC,CACDW,KAAK,CAAEb,KAAK,IAAI;UACfQ,KAAI,CAACP,6BAA6B,CAACD,KAAK,CAAC1C,OAAO,CAAC;QACnD,CAAC,CAAC;OACH,SAAS;QACR;MAAA;IACD;EACH;EAEawD,cAAcA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAN,4LAAA;MACzBM,MAAI,CAACL,gBAAgB,EAAE;MAEvB,IAAI;QACF,MAAMK,MAAI,CAAC9B,mBAAmB,CAAC+B,gBAAgB,EAAE,CAChDJ,IAAI,CAAEb,MAAM,IAAI;UACf;UACA;UACAgB,MAAI,CAACb,+BAA+B,EAAE;QACxC,CAAC,CAAC,CACDW,KAAK,CAAEb,KAAK,IAAI;UACfe,MAAI,CAACd,6BAA6B,CAACD,KAAK,CAAC1C,OAAO,CAAC;QACnD,CAAC,CAAC;OACH,SAAS;QACR;MAAA;IACD;EACH;EAEa2D,eAAeA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAT,4LAAA;MAC1BS,MAAI,CAACR,gBAAgB,EAAE;MAEvB,IAAI;QACF,MAAMQ,MAAI,CAACjC,mBAAmB,CAACkC,iBAAiB,EAAE,CACjDP,IAAI,CAAEb,MAAM,IAAI;UACf;UACA;UACAmB,MAAI,CAAChB,+BAA+B,EAAE;QACxC,CAAC,CAAC,CACDW,KAAK,CAAEb,KAAK,IAAI;UACfkB,MAAI,CAACjB,6BAA6B,CAACD,KAAK,CAAC1C,OAAO,CAAC;QACnD,CAAC,CAAC;OACH,SAAS;QACR;MAAA;IACD;EACH;EAEa8D,aAAaA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAZ,4LAAA;MACxBY,MAAI,CAACX,gBAAgB,EAAE;MAEvB,IAAI;QACF,MAAMW,MAAI,CAACpC,mBAAmB,CAACqC,eAAe,EAAE,CAC/CV,IAAI,CAAEb,MAAM,IAAI;UACfsB,MAAI,CAACnB,+BAA+B,EAAE;QACxC,CAAC,CAAC,CACDW,KAAK,CAAEb,KAAK,IAAI;UACfqB,MAAI,CAACpB,6BAA6B,CAACD,KAAK,CAAC1C,OAAO,CAAC;QACnD,CAAC,CAAC;OACH,SAAS;QACR;MAAA;IACD;EACH;EAEaiE,eAAeA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAf,4LAAA;MAC1Be,MAAI,CAACd,gBAAgB,EAAE;MAEvB,IAAI;QACF,MAAMc,MAAI,CAACvC,mBAAmB,CAACsC,eAAe,CAACC,MAAI,CAAC3D,UAAU,CAAC4D,KAAK,CAAC,OAAO,CAAC,EAAED,MAAI,CAAC3D,UAAU,CAAC4D,KAAK,CAACC,kBAAkB,CAACC,QAAQ,CAAC,CAChIf,IAAI,CAAEb,MAAM,IAAI;UACfyB,MAAI,CAACtB,+BAA+B,EAAE;QACxC,CAAC,CAAC,CACDW,KAAK,CAAEb,KAAK,IAAI;UACfwB,MAAI,CAAC3C,WAAW,GAAGmB,KAAK,CAAC1C,OAAO;QAClC,CAAC,CAAC;OACH,SAAS;QACR;MAAA;IACD;EACH;EAEA;EACQ4C,+BAA+BA,CAAA;IACrC;IACA;IACA,IAAI,CAAChB,MAAM,CAAC0C,GAAG,CAAC,MAAK;MACnB;MACA;MACA;MACA,MAAMC,WAAW,GAAG,uBAAuB;MAE3C;MACA;MACA,IAAI,CAAC7C,MAAM,CAAC8C,QAAQ,CAAC,CAACD,WAAW,CAAC,EAAE;QAAEE,UAAU,EAAE;MAAI,CAAE,CAAC;IAC3D,CAAC,CAAC;EACJ;EAEQ9B,6BAA6BA,CAAC+B,YAAoB;IACxD,IAAI,CAACnD,WAAW,GAAGmD,YAAY;EACjC;EAEQtB,gBAAgBA,CAAA;IACtB,IAAI,CAAC7B,WAAW,GAAG,IAAI;EACzB;EAAC,QAAA/C,CAAA;qBArLUV,kBAAkB,EAAA0B,+DAAA,CAAAV,0DAAA,GAAAU,+DAAA,CAAAoF,mDAAA,GAAApF,+DAAA,CAAAqF,uEAAA,GAAArF,+DAAA,CAAAA,iDAAA,GAAAA,+DAAA,CAAAsF,+EAAA;EAAA;EAAA,QAAArG,EAAA;UAAlBX,kBAAkB;IAAAiH,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCpB/B7F,4DAAA,oBAAkC;QAG5BA,uDAAA,yBAAgE;QAClEA,0DAAA,EAAc;QAIlBA,4DAAA,qBAAoC;QAEhCA,oDAAA,8BACF;QAAAA,0DAAA,EAAK;QACLA,4DAAA,cAA8D;QAA/BA,wDAAA,sBAAAgG,qDAAA;UAAA,OAAYF,GAAA,CAAArB,eAAA,EAAiB;QAAA,EAAC;QAC3DzE,4DAAA,kBAA2C;QAEvCA,uDAAA,oBAAkI;QACpIA,0DAAA,EAAW;QACXA,4DAAA,cAA6B;QAC3BA,wDAAA,KAAAiG,2CAAA,2BAKe;QACjBjG,0DAAA,EAAM;QAENA,4DAAA,eAAwC;QAGlCA,uDAAA,qBAAyF;QAC3FA,0DAAA,EAAyB;QAE3BA,4DAAA,cAA6B;QAC3BA,wDAAA,KAAAkG,2CAAA,2BAKe;QACjBlG,0DAAA,EAAM;QAENA,4DAAA,mBAA6B;QAEzBA,uDAAA,qBAAyG;QAC3GA,0DAAA,EAAyB;QAE3BA,4DAAA,cAA6B;QAC3BA,wDAAA,KAAAmG,2CAAA,2BAKe;QACjBnG,0DAAA,EAAM;QAERA,4DAAA,cAA6B;QAC3BA,wDAAA,KAAAoG,2CAAA,2BAKe;QACjBpG,0DAAA,EAAM;QAGRA,4DAAA,sBAA2F;QAAAA,oDAAA,eAAO;QAAAA,0DAAA,EAAa;QAC/GA,wDAAA,KAAAqG,kCAAA,kBAKM;QACNrG,4DAAA,mBAAwC;QAEpCA,oDAAA,kCACF;QAAAA,0DAAA,EAAa;QAIjBA,4DAAA,eAAiC;QACJA,oDAAA,UAAE;QAAAA,0DAAA,EAAI;QACjCA,4DAAA,sBAAmH;QAA7BA,wDAAA,mBAAAsG,yDAAA;UAAA,OAASR,GAAA,CAAArC,gBAAA,EAAkB;QAAA,EAAC;QAACzD,oDAAA,6BAAqB;QAAAA,0DAAA,EAAa;QACrJA,4DAAA,sBAA6G;QAA3BA,wDAAA,mBAAAuG,yDAAA;UAAA,OAAST,GAAA,CAAA9B,cAAA,EAAgB;QAAA,EAAC;QAAChE,oDAAA,2BAAmB;QAAAA,0DAAA,EAAa;QAC7IA,4DAAA,sBAAgH;QAA5BA,wDAAA,mBAAAwG,yDAAA;UAAA,OAASV,GAAA,CAAA3B,eAAA,EAAiB;QAAA,EAAC;QAACnE,oDAAA,4BAAoB;QAAAA,0DAAA,EAAa;QACjJA,4DAAA,sBAAyG;QAA1BA,wDAAA,mBAAAyG,yDAAA;UAAA,OAASX,GAAA,CAAAxB,aAAA,EAAe;QAAA,EAAC;QAACtE,oDAAA,yBAAiB;QAAAA,0DAAA,EAAa;;;QAxEnIA,uDAAA,GAAwB;QAAxBA,wDAAA,cAAA8F,GAAA,CAAA/E,UAAA,CAAwB;QAMaf,uDAAA,GAA4B;QAA5BA,wDAAA,YAAA8F,GAAA,CAAAxD,mBAAA,CAAAoE,KAAA,CAA4B;QAe1B1G,uDAAA,GAA+B;QAA/BA,wDAAA,YAAA8F,GAAA,CAAAxD,mBAAA,CAAAuC,QAAA,CAA+B;QAc/B7E,uDAAA,GAAuC;QAAvCA,wDAAA,YAAA8F,GAAA,CAAAxD,mBAAA,CAAAqE,gBAAA,CAAuC;QASzC3G,uDAAA,GAAyC;QAAzCA,wDAAA,YAAA8F,GAAA,CAAAxD,mBAAA,CAAAsC,kBAAA,CAAyC;QAStB5E,uDAAA,GAA8B;QAA9BA,wDAAA,cAAA8F,GAAA,CAAA/E,UAAA,CAAA6F,KAAA,CAA8B;QAC5D5G,uDAAA,GAAiB;QAAjBA,wDAAA,SAAA8F,GAAA,CAAA/D,WAAA,CAAiB;QAOF/B,uDAAA,GAAyC;QAAzCA,wDAAA,eAAAA,6DAAA,IAAA8G,GAAA,EAAyC","sources":["./src/app/firebase/auth/sign-up/firebase-sign-up.module.ts","./src/app/firebase/auth/sign-up/firebase-sign-up.page.ts","./src/app/firebase/auth/sign-up/firebase-sign-up.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { map } from 'rxjs/operators';\n\nimport { canActivate, AuthPipeGenerator } from '@angular/fire/auth-guard';\n\nimport { FirebaseSignUpPage } from './firebase-sign-up.page';\nimport { ComponentsModule } from '../../../components/components.module';\n\n\n// ? Firebase guard to redirect logged in users to profile\nconst redirectLoggedInToProfile: AuthPipeGenerator = (next) => map(user => {\n  // ? When queryParams['auth-redirect'] don't redirect because we want the component to handle the redirection\n  if (user !== null && !next.queryParams['auth-redirect']) {\n    return ['firebase/auth/profile'];\n  } else {\n    return true;\n  }\n});\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FirebaseSignUpPage,\n    ...canActivate(redirectLoggedInToProfile)\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [FirebaseSignUpPage]\n})\nexport class FirebaseSignUpPageModule {}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { Validators, UntypedFormGroup, UntypedFormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MenuController } from '@ionic/angular';\n\nimport { AuthStateChange, SignInResult } from '@capacitor-firebase/authentication';\n\nimport { Subscription } from 'rxjs';\n\nimport { HistoryHelperService } from '../../../utils/history-helper.service';\nimport { PasswordValidator } from '../../../validators/password.validator';\nimport { FirebaseAuthService } from '../firebase-auth.service';\n\n@Component({\n  selector: 'app-firebase-sign-up',\n  templateUrl: './firebase-sign-up.page.html',\n  styleUrls: [\n    './styles/firebase-sign-up.page.scss'\n  ]\n})\nexport class FirebaseSignUpPage implements OnInit {\n  signupForm: UntypedFormGroup;\n  matching_passwords_group: UntypedFormGroup;\n  submitError: string;\n  authRedirectResult: Subscription;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' }\n    ],\n    'matching_passwords': [\n      { type: 'areNotEqual', message: 'Password mismatch' }\n    ]\n  };\n\n  constructor(\n    public menu: MenuController,\n    public router: Router,\n    public firebaseAuthService: FirebaseAuthService,\n    private ngZone: NgZone,\n    public historyHelper: HistoryHelperService\n  ) {\n    this.matching_passwords_group = new UntypedFormGroup({\n      'password': new UntypedFormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ])),\n      'confirm_password': new UntypedFormControl('', Validators.required)\n    }, (formGroup: UntypedFormGroup) => {\n      return PasswordValidator.areNotEqual(formGroup);\n    });\n\n    this.signupForm = new UntypedFormGroup({\n      'email': new UntypedFormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'matching_passwords': this.matching_passwords_group\n    });\n\n    // ? Get firebase authentication redirect result invoked when using signInWithRedirect()\n    // ? signInWithRedirect() is only used when client is in web but not desktop. For example a PWA\n    this.authRedirectResult = this.firebaseAuthService.redirectResult$\n    .subscribe(result => {\n      if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      } else {\n        this.redirectLoggedUserToProfilePage();\n      }\n    });\n\n    this.firebaseAuthService.authState$\n    .subscribe((stateChange: AuthStateChange) => {\n      if (!stateChange.user) {\n        this.manageAuthWithProvidersErrors('No user logged in');\n      } else {\n        this.redirectLoggedUserToProfilePage();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.menu.enable(false);\n  }\n\n  public async doFacebookSignup(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithFacebook()\n      .then((result: SignInResult) => {\n        // ? This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        // const token = result.credential.accessToken;\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async doGoogleSignup(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithGoogle()\n      .then((result) => {\n        // ? This gives you a Google Access Token. You can use it to access the Google API.\n        // const token = result.credential.accessToken;\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async doTwitterSignup(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithTwitter()\n      .then((result) => {\n        // ? This gives you a Twitter Access Token. You can use it to access the Twitter API.\n        // const token = result.credential.accessToken;\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async doAppleSignup(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signInWithApple()\n      .then((result) => {\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.manageAuthWithProvidersErrors(error.message);\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  public async signUpWithEmail(): Promise<void> {\n    this.resetSubmitError();\n\n    try {\n      await this.firebaseAuthService.signUpWithEmail(this.signupForm.value['email'], this.signupForm.value.matching_passwords.password)\n      .then((result) => {\n        this.redirectLoggedUserToProfilePage();\n      })\n      .catch((error) => {\n        this.submitError = error.message;\n      });\n    } finally {\n      // ? Termination code goes here\n    }\n  }\n\n  // ? Once the auth provider finished the authentication flow, and the auth redirect completes, hide the loader and redirect the user to the profile page\n  private redirectLoggedUserToProfilePage(): void {\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'firebase/auth/profile';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n  private manageAuthWithProvidersErrors(errorMessage: string): void {\n    this.submitError = errorMessage;\n  }\n\n  private resetSubmitError(): void {\n    this.submitError = null;\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"app/categories\"></ion-back-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"signup-content\">\n  <h2 class=\"auth-title\">\n    Sign Up with Firebase\n  </h2>\n  <form [formGroup]=\"signupForm\" (ngSubmit)=\"signUpWithEmail()\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-item class=\"input-item\">\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\n          <div class=\"error-message\" *ngIf=\"signupForm.get('email').hasError(validation.type) && (signupForm.get('email').dirty || signupForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <div formGroupName=\"matching_passwords\">\n        <ion-item class=\"input-item\">\n          <app-show-hide-password>\n            <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n          </app-show-hide-password>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validation_messages.password\">\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('password').hasError(validation.type) && (signupForm.get('matching_passwords').get('password').dirty || signupForm.get('matching_passwords').get('password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n\n        <ion-item class=\"input-item\">\n          <app-show-hide-password>\n            <ion-input type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"></ion-input>\n          </app-show-hide-password>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validation_messages.confirm_password\">\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.matching_passwords\">\n          <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"signup-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!signupForm.valid\">Sign Up</ion-button>\n    <div class=\"error-container\" *ngIf=\"submitError\">\n      <div class=\"error-message\">\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\n        <span>{{ submitError }}</span>\n      </div>\n    </div>\n    <ion-row class=\"other-auth-options-row\">\n      <ion-button class=\"login-btn\" fill=\"clear\" [routerLink]=\"['/firebase/auth/sign-in']\">\n        Already have an account?\n      </ion-button>\n    </ion-row>\n  </form>\n\n  <div class=\"social-auth-options\">\n    <p class=\"options-divider\">Or</p>\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookSignup()\">Sign Up with Facebook</ion-button>\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleSignup()\">Sign Up with Google</ion-button>\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterSignup()\">Sign Up with Twitter</ion-button>\n    <ion-button class=\"social-auth-btn apple-auth-btn\" expand=\"block\" color=\"dark\" (click)=\"doAppleSignup()\">Log In with Apple</ion-button>\n  </div>\n</ion-content>\n"],"names":["CommonModule","FormsModule","ReactiveFormsModule","RouterModule","IonicModule","map","canActivate","FirebaseSignUpPage","ComponentsModule","redirectLoggedInToProfile","next","user","queryParams","routes","path","component","FirebaseSignUpPageModule","_","_2","_3","forChild","declarations","imports","i1","NgZone","Validators","UntypedFormGroup","UntypedFormControl","Router","MenuController","HistoryHelperService","PasswordValidator","FirebaseAuthService","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","validation_r5","message","ɵɵelementContainerStart","ɵɵtemplate","FirebaseSignUpPage_ng_container_12_div_1_Template","ɵɵelementContainerEnd","ɵɵproperty","ctx_r0","signupForm","get","hasError","type","dirty","touched","validation_r8","FirebaseSignUpPage_ng_container_18_div_1_Template","ctx_r1","validation_r11","FirebaseSignUpPage_ng_container_23_div_1_Template","ctx_r2","validation_r14","FirebaseSignUpPage_ng_container_25_div_1_Template","ctx_r3","ctx_r4","submitError","constructor","menu","router","firebaseAuthService","ngZone","historyHelper","validation_messages","matching_passwords_group","compose","minLength","required","formGroup","areNotEqual","pattern","authRedirectResult","redirectResult$","subscribe","result","error","manageAuthWithProvidersErrors","redirectLoggedUserToProfilePage","authState$","stateChange","ngOnInit","enable","doFacebookSignup","_this","_asyncToGenerator","resetSubmitError","signInWithFacebook","then","catch","doGoogleSignup","_this2","signInWithGoogle","doTwitterSignup","_this3","signInWithTwitter","doAppleSignup","_this4","signInWithApple","signUpWithEmail","_this5","value","matching_passwords","password","run","previousUrl","navigate","replaceUrl","errorMessage","ɵɵdirectiveInject","i2","i3","i4","selectors","decls","vars","consts","template","FirebaseSignUpPage_Template","rf","ctx","ɵɵlistener","FirebaseSignUpPage_Template_form_ngSubmit_7_listener","FirebaseSignUpPage_ng_container_12_Template","FirebaseSignUpPage_ng_container_18_Template","FirebaseSignUpPage_ng_container_23_Template","FirebaseSignUpPage_ng_container_25_Template","FirebaseSignUpPage_div_28_Template","FirebaseSignUpPage_Template_ion_button_click_35_listener","FirebaseSignUpPage_Template_ion_button_click_37_listener","FirebaseSignUpPage_Template_ion_button_click_39_listener","FirebaseSignUpPage_Template_ion_button_click_41_listener","email","confirm_password","valid","ɵɵpureFunction0","_c0"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}