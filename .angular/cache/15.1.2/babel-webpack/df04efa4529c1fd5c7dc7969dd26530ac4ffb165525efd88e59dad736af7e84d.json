{"ast":null,"code":"import { APP_INITIALIZER, Optional, PLATFORM_ID } from '@angular/core';\nimport { BrowserModule, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { RESPONSE } from '@nguniversal/express-engine/tokens';\nimport { isPlatformServer } from '@angular/common';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ComponentsModule } from './components/components.module';\nimport { environment } from '../environments/environment';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/service-worker\";\nimport * as i4 from \"@ngx-translate/core\";\nexport function createTranslateLoader(http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\nexport class AppModule {}\nAppModule.ɵfac = function AppModule_Factory(t) {\n  return new (t || AppModule)();\n};\nAppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: AppModule,\n  bootstrap: [AppComponent]\n});\nAppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [{\n    provide: RouteReuseStrategy,\n    useClass: IonicRouteStrategy\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: (platformId, response) => {\n      return () => {\n        // In the server.ts we added a custom response header with information about the device requesting the app\n        if (isPlatformServer(platformId)) {\n          if (response && response !== null) {\n            // Get custom header from the response sent from the server.ts\n            const mobileDeviceHeader = response.get('mobile-device');\n            // Set Ionic config mode?\n          }\n        }\n      };\n    },\n\n    deps: [PLATFORM_ID, [new Optional(), RESPONSE]],\n    multi: true\n  }],\n  imports: [BrowserModule.withServerTransition({\n    appId: 'serverApp'\n  }), BrowserTransferStateModule, IonicModule.forRoot(), ReactiveFormsModule, AppRoutingModule, HttpClientModule, ComponentsModule, ServiceWorkerModule.register('/ngsw-worker.js', {\n    enabled: environment.production\n  }), TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: createTranslateLoader,\n      deps: [HttpClient]\n    }\n  })]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    declarations: [AppComponent],\n    imports: [i1.BrowserModule, BrowserTransferStateModule, i2.IonicModule, ReactiveFormsModule, AppRoutingModule, HttpClientModule, ComponentsModule, i3.ServiceWorkerModule, i4.TranslateModule]\n  });\n})();","map":{"version":3,"mappings":"AAAA,SAASA,eAAe,EAAYC,QAAQ,EAAEC,WAAW,QAAQ,eAAe;AAChF,SAASC,aAAa,EAAEC,0BAA0B,QAAQ,2BAA2B;AACrF,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,WAAW,EAAEC,kBAAkB,QAAQ,gBAAgB;AAChE,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,QAAQ,QAAQ,oCAAoC;AAC7D,SAASC,gBAAgB,QAAQ,iBAAiB;AAElD,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,mBAAmB,QAAQ,gBAAgB;AAEpD,SAASC,gBAAgB,EAAEC,UAAU,QAAQ,sBAAsB;AACnE,SAASC,eAAe,EAAEC,eAAe,QAAQ,qBAAqB;AACtE,SAASC,mBAAmB,QAAQ,4BAA4B;;;;;;AAEhE,OAAM,SAAUC,qBAAqB,CAACC,IAAgB;EACpD,OAAO,IAAIF,mBAAmB,CAACE,IAAI,EAAE,gBAAgB,EAAE,OAAO,CAAC;AACjE;AA4CA,OAAM,MAAOC,SAAS;AAATA,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;QAATA,SAAS;EAAAC,YAFRZ,YAAY;AAAA;AAEbW,SAAS;aAvBT,CACT;IAAEE,OAAO,EAAEpB,kBAAkB;IAAEqB,QAAQ,EAAEnB;EAAkB,CAAE,EAC7D;IACEkB,OAAO,EAAEzB,eAAe;IACxB2B,UAAU,EAAE,CAACC,UAAkB,EAAEC,QAAa,KAAI;MAChD,OAAO,MAAK;QACV;QACA,IAAInB,gBAAgB,CAACkB,UAAU,CAAC,EAAE;UAChC,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;YACjC;YACA,MAAMC,kBAAkB,GAAGD,QAAQ,CAACE,GAAG,CAAC,eAAe,CAAC;YAExD;;;MAGN,CAAC;IACH,CAAC;;IACDC,IAAI,EAAE,CAAC9B,WAAW,EAAE,CAAC,IAAID,QAAQ,EAAE,EAAEQ,QAAQ,CAAC,CAAC;IAC/CwB,KAAK,EAAE;GACR,CACF;EAAAC,UApCC/B,aAAa,CAACgC,oBAAoB,CAAC;IAAEC,KAAK,EAAE;EAAW,CAAE,CAAC,EAC1DhC,0BAA0B,EAC1BE,WAAW,CAAC+B,OAAO,EAAE,EACrBtB,mBAAmB,EACnBJ,gBAAgB,EAChBK,gBAAgB,EAChBH,gBAAgB,EAChBL,mBAAmB,CAAC8B,QAAQ,CAAC,iBAAiB,EAAE;IAAEC,OAAO,EAAEzB,WAAW,CAAC0B;EAAU,CAAE,CAAC,EACpFtB,eAAe,CAACmB,OAAO,CAAC;IACtBI,MAAM,EAAE;MACNhB,OAAO,EAAEN,eAAe;MACxBQ,UAAU,EAAGN,qBAAsB;MACnCW,IAAI,EAAE,CAACf,UAAU;;GAEpB,CAAC;AAAA;;2EAyBOM,SAAS;IAAAmB,eAzCL9B,YAAY;IAAAsB,4BAGzB9B,0BAA0B,kBAE1BW,mBAAmB,EACnBJ,gBAAgB,EAChBK,gBAAgB,EAChBH,gBAAgB;EAAA;AAAA","names":["APP_INITIALIZER","Optional","PLATFORM_ID","BrowserModule","BrowserTransferStateModule","RouteReuseStrategy","IonicModule","IonicRouteStrategy","ServiceWorkerModule","RESPONSE","isPlatformServer","AppRoutingModule","AppComponent","ComponentsModule","environment","ReactiveFormsModule","HttpClientModule","HttpClient","TranslateModule","TranslateLoader","TranslateHttpLoader","createTranslateLoader","http","AppModule","bootstrap","provide","useClass","useFactory","platformId","response","mobileDeviceHeader","get","deps","multi","imports","withServerTransition","appId","forRoot","register","enabled","production","loader","declarations"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/app.module.ts"],"sourcesContent":["import { APP_INITIALIZER, NgModule, Optional, PLATFORM_ID } from '@angular/core';\nimport { BrowserModule, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { RESPONSE } from '@nguniversal/express-engine/tokens';\nimport { isPlatformServer } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ComponentsModule } from './components/components.module';\nimport { environment } from '../environments/environment';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    BrowserTransferStateModule,\n    IonicModule.forRoot(),\n    ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ComponentsModule,\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (createTranslateLoader),\n        deps: [HttpClient]\n      }\n    })\n  ],\n  providers: [\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (platformId: object, response: any) => {\n        return () => {\n          // In the server.ts we added a custom response header with information about the device requesting the app\n          if (isPlatformServer(platformId)) {\n            if (response && response !== null) {\n              // Get custom header from the response sent from the server.ts\n              const mobileDeviceHeader = response.get('mobile-device');\n\n              // Set Ionic config mode?\n            }\n          }\n        };\n      },\n      deps: [PLATFORM_ID, [new Optional(), RESPONSE]],\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}