{"ast":null,"code":"import { interval, timer } from 'rxjs';\nimport { takeUntil, finalize, take } from 'rxjs/operators';\nimport { ShowcaseService } from '../../showcase.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../../../shell/aspect-ratio/aspect-ratio.component\";\nimport * as i4 from \"../../../shell/image-shell/image-shell.component\";\nimport * as i5 from \"../../../shell/text-shell/text-shell.component\";\nconst _c0 = function () {\n  return {\n    w: 2,\n    h: 1\n  };\n};\nconst _c1 = function () {\n  return {\n    w: 1,\n    h: 1\n  };\n};\nexport class SimpleDataBindingPage {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n    // Aux properties for the Simple Fetch (HttpClient) showcase\n    this.simpleFetchButtonDisabled = true;\n    this.simpleFetchCountdown = 0;\n  }\n  ngOnInit() {\n    this.showcaseShellSimpleFetch(10);\n  }\n  showcaseShellSimpleFetch(countdown) {\n    // Assign an (empty / null) value to the shell object to restore it's 'loading' state\n    this.simpleFetchData = null;\n    // Prevent rage clicks on the 'Fetch more Data' button\n    this.simpleFetchButtonDisabled = true;\n    // Start a countdown and an interval before executing the fetch function\n    this.simpleFetchCountdown = countdown;\n    this.simpleFetchInterval = interval(1000);\n    // Start a countdown to showcase the shell elements animations for a few seconds before the data get's fetched into the shell object\n    const timer$ = timer(countdown * 1000);\n    // When timer emits after X seconds, complete source\n    this.simpleFetchInterval.pipe(takeUntil(timer$), finalize(() => this.simpleFetchButtonDisabled = false)).subscribe({\n      next: () => {\n        this.simpleFetchCountdown--;\n      },\n      complete: () => {\n        this.simpleFetchCountdown = 0;\n        // Once the countdown ends, fetch data using the HttpClient\n        this.showcaseService.getSimpleDataSource().pipe(take(1) // Force Observable to complete\n        ).subscribe(val => {\n          console.log('Fetching shell data using the HttpClient', val);\n          this.simpleFetchData = val;\n        });\n      }\n    });\n  }\n}\nSimpleDataBindingPage.ɵfac = function SimpleDataBindingPage_Factory(t) {\n  return new (t || SimpleDataBindingPage)(i0.ɵɵdirectiveInject(i1.ShowcaseService));\n};\nSimpleDataBindingPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SimpleDataBindingPage,\n  selectors: [[\"app-simple-data-binding\"]],\n  decls: 36,\n  vars: 13,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/app-shell\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [2, \"background-color\", \"#FFF\", \"padding\", \"10px\", \"margin\", \"20px\"], [\"size\", \"12\"], [\"animation\", \"gradient\", 1, \"add-overlay\", 3, \"display\", \"src\", \"alt\"], [3, \"ratio\"], [2, \"margin\", \"10px\", \"text-align\", \"center\", \"color\", \"#FFF\"], [\"size\", \"4\"], [\"animation\", \"gradient\", 3, \"src\", \"alt\"], [\"size\", \"8\"], [2, \"margin-top\", \"0px\"], [\"animation\", \"gradient\", 3, \"data\"], [\"animation\", \"gradient\", \"lines\", \"3\", 3, \"data\"], [3, \"disabled\", \"click\"]],\n  template: function SimpleDataBindingPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" Simple Data Binding \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"b\");\n      i0.ɵɵtext(9, \"Back to basics ...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"p\");\n      i0.ɵɵtext(11, \" We can tweak our data stream with some RxJs operators and achieve an app shell loading interaction \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"p\");\n      i0.ɵɵtext(13, \" Let's set a timeout and fetch data using the \");\n      i0.ɵɵelementStart(14, \"code\");\n      i0.ɵɵtext(15, \"HttpClient\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17, \" Data coming in \");\n      i0.ɵɵelementStart(18, \"b\");\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"ion-row\", 5)(21, \"ion-col\", 6)(22, \"app-image-shell\", 7)(23, \"app-aspect-ratio\", 8)(24, \"h4\", 9);\n      i0.ɵɵtext(25, \"Heading on top of a cover image\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(26, \"ion-col\", 10)(27, \"app-aspect-ratio\", 8);\n      i0.ɵɵelement(28, \"app-image-shell\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(29, \"ion-col\", 12)(30, \"h3\", 13);\n      i0.ɵɵelement(31, \"app-text-shell\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"p\");\n      i0.ɵɵelement(33, \"app-text-shell\", 15);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(34, \"ion-button\", 16);\n      i0.ɵɵlistener(\"click\", function SimpleDataBindingPage_Template_ion_button_click_34_listener() {\n        return ctx.showcaseShellSimpleFetch(3);\n      });\n      i0.ɵɵtext(35, \"Fetch more Data\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(19);\n      i0.ɵɵtextInterpolate1(\"\", ctx.simpleFetchCountdown, \" seconds\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"display\", \"cover\")(\"src\", ctx.simpleFetchData == null ? null : ctx.simpleFetchData.cover)(\"alt\", \"Sample Image Cover\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(11, _c0));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(12, _c1));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"src\", ctx.simpleFetchData == null ? null : ctx.simpleFetchData.image)(\"alt\", \"Sample Image\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"data\", ctx.simpleFetchData == null ? null : ctx.simpleFetchData.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"data\", ctx.simpleFetchData == null ? null : ctx.simpleFetchData.description);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.simpleFetchButtonDisabled);\n    }\n  },\n  dependencies: [i2.IonBackButton, i2.IonButton, i2.IonButtons, i2.IonCol, i2.IonContent, i2.IonHeader, i2.IonRow, i2.IonTitle, i2.IonToolbar, i2.IonBackButtonDelegate, i3.AspectRatioComponent, i4.ImageShellComponent, i5.TextShellComponent],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background);\\n}\\n.showcase-content[_ngcontent-%COMP%]   ion-item-divider[_ngcontent-%COMP%] {\\n  --background: var(--ion-color-secondary);\\n  --color: var(--ion-color-lightest);\\n  text-transform: uppercase;\\n  font-weight: 500;\\n  letter-spacing: 1px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 60px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  background: #CCC;\\n  padding: 10px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  color: #F92672;\\n  font-weight: 500;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvc2ltcGxlLWRhdGEtYmluZGluZy9zaW1wbGUtZGF0YS1iaW5kaW5nLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1DQUFBO0FDQ0Y7QURDRTtFQUNFLHdDQUFBO0VBQ0Esa0NBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUNDSjtBREVFO0VBQ0Usc0JBQUE7QUNBSjtBREdFO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtBQ0RKO0FESUU7RUFDRSxjQUFBO0VBQ0EsZ0JBQUE7QUNGSiIsInNvdXJjZXNDb250ZW50IjpbIi5zaG93Y2FzZS1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1hcHAtYmFja2dyb3VuZCk7XG5cbiAgaW9uLWl0ZW0tZGl2aWRlciB7XG4gICAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbiAgICAtLWNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHRlc3QpO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICB9XG5cbiAgLnNob3djYXNlLXNlY3Rpb24ge1xuICAgIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG4gIH1cblxuICBwcmUge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBiYWNrZ3JvdW5kOiAjQ0NDO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cblxuICBjb2RlIHtcbiAgICBjb2xvcjogI0Y5MjY3MjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG59XG4iLCIuc2hvd2Nhc2UtY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0tYXBwLWJhY2tncm91bmQpO1xufVxuLnNob3djYXNlLWNvbnRlbnQgaW9uLWl0ZW0tZGl2aWRlciB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG4gIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodGVzdCk7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCAuc2hvd2Nhc2Utc2VjdGlvbiB7XG4gIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBwcmUge1xuICBmb250LXNpemU6IDE0cHg7XG4gIGJhY2tncm91bmQ6ICNDQ0M7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBjb2RlIHtcbiAgY29sb3I6ICNGOTI2NzI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAqBA,QAAQ,EAAEC,KAAK,QAAQ,MAAM;AAClD,SAASC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,gBAAgB;AAG1D,SAASC,eAAe,QAAQ,wBAAwB;;;;;;;;;;;;;;;;;;;AAOxD,OAAM,MAAOC,qBAAqB;EAShCC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IALnC;IACA,8BAAyB,GAAG,IAAI;IAChC,yBAAoB,GAAG,CAAC;EAGgC;EAExDC,QAAQ;IACN,IAAI,CAACC,wBAAwB,CAAC,EAAE,CAAC;EACnC;EAEAA,wBAAwB,CAACC,SAAiB;IACxC;IACA,IAAI,CAACC,eAAe,GAAG,IAAI;IAE3B;IACA,IAAI,CAACC,yBAAyB,GAAG,IAAI;IAErC;IACA,IAAI,CAACC,oBAAoB,GAAGH,SAAS;IACrC,IAAI,CAACI,mBAAmB,GAAGf,QAAQ,CAAC,IAAI,CAAC;IAEzC;IACA,MAAMgB,MAAM,GAAGf,KAAK,CAACU,SAAS,GAAG,IAAI,CAAC;IACtC;IACA,IAAI,CAACI,mBAAmB,CACvBE,IAAI,CACHf,SAAS,CAACc,MAAM,CAAC,EACjBb,QAAQ,CAAC,MAAM,IAAI,CAACU,yBAAyB,GAAG,KAAK,CAAC,CACvD,CACAK,SAAS,CAAC;MACTC,IAAI,EAAE,MAAK;QACT,IAAI,CAACL,oBAAoB,EAAG;MAC9B,CAAC;MACDM,QAAQ,EAAE,MAAK;QACb,IAAI,CAACN,oBAAoB,GAAG,CAAC;QAC7B;QACA,IAAI,CAACN,eAAe,CAACa,mBAAmB,EAAE,CACzCJ,IAAI,CACHb,IAAI,CAAC,CAAC,CAAC,CAAC;QAAA,CACT,CAACc,SAAS,CAACI,GAAG,IAAG;UAChBC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEF,GAAG,CAAC;UAC5D,IAAI,CAACV,eAAe,GAAGU,GAAG;QAC5B,CAAC,CAAC;MACJ;KACD,CAAC;EACJ;;AAlDWhB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZlCC,kCAAY;MAGNA,qCAAoE;MACtEA,iBAAc;MACdA,iCAAW;MACTA,qCACF;MAAAA,iBAAY;MAIhBA,sCAAsC;MAE/BA,kCAAkB;MAAAA,iBAAI;MACzBA,0BAAG;MACDA,qHACF;MAAAA,iBAAI;MACJA,0BAAG;MACDA,+DAA6C;MAAAA,6BAAM;MAAAA,2BAAU;MAAAA,iBAAO;MAEtEA,0BAAG;MACDA,iCAAe;MAAAA,0BAAG;MAAAA,aAAkC;MAAAA,iBAAI;MAE1DA,mCAAsE;MAIHA,gDAA+B;MAAAA,iBAAK;MAIrGA,oCAAkB;MAEdA,uCAA8G;MAChHA,iBAAmB;MAErBA,oCAAkB;MAEdA,sCAAsF;MACxFA,iBAAK;MACLA,0BAAG;MACDA,sCAAsG;MACxGA,iBAAI;MAGRA,uCAAyF;MAA7EA;QAAA,OAASC,6BAAyB,CAAC,CAAC;MAAA,EAAC;MAAwCD,gCAAe;MAAAA,iBAAa;;;MAxBjGA,gBAAkC;MAAlCA,+DAAkC;MAIQA,eAAmB;MAAnBA,iCAAmB;MACzDA,eAAoB;MAApBA,mDAAoB;MAMtBA,eAAoB;MAApBA,mDAAoB;MACEA,eAA8B;MAA9BA,oFAA8B;MAK/BA,eAA+B;MAA/BA,qFAA+B;MAG/BA,eAAqC;MAArCA,2FAAqC;MAI9BA,eAAsC;MAAtCA,wDAAsC","names":["interval","timer","takeUntil","finalize","take","ShowcaseService","SimpleDataBindingPage","constructor","showcaseService","ngOnInit","showcaseShellSimpleFetch","countdown","simpleFetchData","simpleFetchButtonDisabled","simpleFetchCountdown","simpleFetchInterval","timer$","pipe","subscribe","next","complete","getSimpleDataSource","val","console","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/simple-data-binding/simple-data-binding.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/simple-data-binding/simple-data-binding.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, interval, timer } from 'rxjs';\nimport { takeUntil, finalize, take } from 'rxjs/operators';\n\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\n\n@Component({\n  selector: 'app-simple-data-binding',\n  templateUrl: './simple-data-binding.page.html',\n  styleUrls: ['./simple-data-binding.page.scss'],\n})\nexport class SimpleDataBindingPage implements OnInit {\n  // We will manually fetch data using the HttpClient and assign it to this property\n  simpleFetchData: ShowcaseShellModel;\n\n  // Aux properties for the Simple Fetch (HttpClient) showcase\n  simpleFetchButtonDisabled = true;\n  simpleFetchCountdown = 0;\n  simpleFetchInterval: Observable<any>;\n\n  constructor(private showcaseService: ShowcaseService) { }\n\n  ngOnInit() {\n    this.showcaseShellSimpleFetch(10);\n  }\n\n  showcaseShellSimpleFetch(countdown: number): void {\n    // Assign an (empty / null) value to the shell object to restore it's 'loading' state\n    this.simpleFetchData = null;\n\n    // Prevent rage clicks on the 'Fetch more Data' button\n    this.simpleFetchButtonDisabled = true;\n\n    // Start a countdown and an interval before executing the fetch function\n    this.simpleFetchCountdown = countdown;\n    this.simpleFetchInterval = interval(1000);\n\n    // Start a countdown to showcase the shell elements animations for a few seconds before the data get's fetched into the shell object\n    const timer$ = timer(countdown * 1000);\n    // When timer emits after X seconds, complete source\n    this.simpleFetchInterval\n    .pipe(\n      takeUntil(timer$),\n      finalize(() => this.simpleFetchButtonDisabled = false)\n    )\n    .subscribe({\n      next: () => {\n        this.simpleFetchCountdown --;\n      },\n      complete: () => {\n        this.simpleFetchCountdown = 0;\n        // Once the countdown ends, fetch data using the HttpClient\n        this.showcaseService.getSimpleDataSource()\n        .pipe(\n          take(1) // Force Observable to complete\n        ).subscribe(val => {\n          console.log('Fetching shell data using the HttpClient', val);\n          this.simpleFetchData = val;\n        });\n      }\n    });\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/app-shell\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      Simple Data Binding\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <b>Back to basics ...</b>\n    <p>\n      We can tweak our data stream with some RxJs operators and achieve an app shell loading interaction\n    </p>\n    <p>\n      Let's set a timeout and fetch data using the <code>HttpClient</code>\n    </p>\n    <p>\n      Data coming in <b>{{ simpleFetchCountdown }} seconds</b>\n    </p>\n    <ion-row style=\"background-color: #FFF; padding: 10px; margin: 20px;\">\n      <ion-col size=\"12\">\n        <app-image-shell animation=\"gradient\" class=\"add-overlay\" [display]=\"'cover'\" [src]=\"simpleFetchData?.cover\" [alt]=\"'Sample Image Cover'\">\n          <app-aspect-ratio [ratio]=\"{w:2, h:1}\">\n            <h4 style=\"margin: 10px; text-align: center; color: #FFF;\">Heading on top of a cover image</h4>\n          </app-aspect-ratio>\n        </app-image-shell>\n      </ion-col>\n      <ion-col size=\"4\">\n        <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          <app-image-shell animation=\"gradient\" [src]=\"simpleFetchData?.image\" [alt]=\"'Sample Image'\"></app-image-shell>\n        </app-aspect-ratio>\n      </ion-col>\n      <ion-col size=\"8\">\n        <h3 style=\"margin-top: 0px;\">\n          <app-text-shell animation=\"gradient\" [data]=\"simpleFetchData?.title\"></app-text-shell>\n        </h3>\n        <p>\n          <app-text-shell animation=\"gradient\" [data]=\"simpleFetchData?.description\" lines=\"3\"></app-text-shell>\n        </p>\n      </ion-col>\n    </ion-row>\n    <ion-button (click)=\"showcaseShellSimpleFetch(3)\" [disabled]=\"simpleFetchButtonDisabled\">Fetch more Data</ion-button>\n  </section>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}