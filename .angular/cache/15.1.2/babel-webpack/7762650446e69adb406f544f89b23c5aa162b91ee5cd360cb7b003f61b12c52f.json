{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DataStore } from '../shell/data-store';\nimport { RealEstateListingModel } from './listing/real-estate-listing.model';\nimport { RealEstateDetailsModel } from './details/real-estate-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utils/transfer-state-helper\";\nimport * as i2 from \"@angular/common/http\";\nexport class RealEstateService {\n  constructor(platformId, transferStateHelper, http) {\n    this.platformId = platformId;\n    this.transferStateHelper = transferStateHelper;\n    this.http = http;\n  }\n  getListingDataSource() {\n    const rawDataSource = this.http.get('./assets/sample-data/real-estate/listing.json').pipe(map(data => {\n      // Note: HttpClient cannot know how to instantiate a class for the returned data\n      // We need to properly cast types from json data\n      const listing = new RealEstateListingModel();\n      // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n      // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n      // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n      Object.assign(listing, data);\n      return listing;\n    }));\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('real-estate-listing-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getListingStore(dataSource) {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = new RealEstateListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else {\n        // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n  getDetailsDataSource() {\n    const rawDataSource = this.http.get('./assets/sample-data/real-estate/details.json').pipe(map(data => {\n      // Note: HttpClient cannot know how to instantiate a class for the returned data\n      // We need to properly cast types from json data\n      const details = new RealEstateDetailsModel();\n      // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n      // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n      // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n      Object.assign(details, data);\n      return details;\n    }));\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('real-estate-details-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getDetailsStore(dataSource) {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = new RealEstateDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.detailsDataStore.load(dataSource, 0);\n      } else {\n        // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.detailsDataStore.load(dataSource);\n      }\n    }\n    return this.detailsDataStore;\n  }\n}\nRealEstateService.ɵfac = function RealEstateService_Factory(t) {\n  return new (t || RealEstateService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.TransferStateHelper), i0.ɵɵinject(i2.HttpClient));\n};\nRealEstateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RealEstateService,\n  factory: RealEstateService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["PLATFORM_ID","HttpClient","map","DataStore","RealEstateListingModel","RealEstateDetailsModel","TransferStateHelper","isPlatformServer","RealEstateService","constructor","platformId","transferStateHelper","http","getListingDataSource","rawDataSource","get","pipe","data","listing","Object","assign","cachedDataSource","checkDataSourceState","getListingStore","dataSource","listingDataStore","shellModel","load","getDetailsDataSource","details","getDetailsStore","detailsDataStore","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/real-estate/real-estate.service.ts"],"sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { RealEstateListingModel } from './listing/real-estate-listing.model';\nimport { RealEstateDetailsModel } from './details/real-estate-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class RealEstateService {\n  private listingDataStore: DataStore<RealEstateListingModel>;\n  private detailsDataStore: DataStore<RealEstateDetailsModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  public getListingDataSource(): Observable<RealEstateListingModel> {\n    const rawDataSource = this.http.get<RealEstateListingModel>('./assets/sample-data/real-estate/listing.json')\n    .pipe(\n      map(\n        (data: RealEstateListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new RealEstateListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('real-estate-listing-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getListingStore(dataSource: Observable<RealEstateListingModel>): DataStore<RealEstateListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: RealEstateListingModel = new RealEstateListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<RealEstateDetailsModel> {\n    const rawDataSource = this.http.get<RealEstateDetailsModel>('./assets/sample-data/real-estate/details.json')\n    .pipe(\n      map(\n        (data: RealEstateDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new RealEstateDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('real-estate-details-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDetailsStore(dataSource: Observable<RealEstateDetailsModel>): DataStore<RealEstateDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: RealEstateDetailsModel = new RealEstateDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.detailsDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.detailsDataStore.load(dataSource);\n      }\n    }\n\n    return this.detailsDataStore;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}