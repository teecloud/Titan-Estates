{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { combineLatest, of, forkJoin, ReplaySubject, merge } from 'rxjs';\nimport { delay, finalize, tap, map, filter, concatMap } from 'rxjs/operators';\n// eslint-disable-next-line max-len\nimport { ShowcaseShellModel } from './showcase-shell.model';\nimport { DataStore } from '../shell/data-store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShowcaseService {\n  constructor(http) {\n    this.http = http;\n    this.openDataStream = new ReplaySubject();\n  }\n  getDataSourceWithDelay() {\n    return this.http.get('./assets/sample-data/showcase/shell.json').pipe(tap(val => {\n      console.log('getData STARTED');\n      // eslint-disable-next-line no-console\n      console.time('getData Roundtrip');\n    }), delay(5000), finalize(() => {\n      console.log('getData COMPLETED');\n      // eslint-disable-next-line no-console\n      console.timeEnd('getData Roundtrip');\n    }));\n  }\n  getSimpleDataSource() {\n    return this.http.get('./assets/sample-data/showcase/shell.json');\n  }\n  getSimpleDataStore(dataSource) {\n    // Use cache if available\n    if (!this.showcaseDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = new ShowcaseShellModel();\n      this.showcaseDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.showcaseDataStore.load(dataSource);\n    }\n    return this.showcaseDataStore;\n  }\n  getListDataSource() {\n    return this.http.get('https://reqres.in/api/users').pipe(map(result => result['data']));\n  }\n  getPaginationDataSource(page) {\n    return this.http.get('https://reqres.in/api/users?page=' + page).pipe(map(result => result['data']), filter(results => results.length > 0));\n  }\n  getMultipleDataSourceA() {\n    return this.http.get('./assets/sample-data/travel/listing.json');\n  }\n  getMultipleDataSourceB() {\n    return this.http.get('./assets/sample-data/fashion/listing.json');\n  }\n  getDependantDataSourcePost() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts/1');\n  }\n  // eslint-disable-next-line max-len\n  getDependantDataSourcePostComments(dependantDataSource) {\n    return dependantDataSource.pipe(\n    // Filter user values that are not shells. We need to add this filter if using the combinedUserDataStore timeline\n    filter(post => !post.isShell), concatMap(post => {\n      return this.http.get('https://jsonplaceholder.typicode.com/comments?postId=' + post.id);\n    }));\n  }\n  getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/' + userId);\n  }\n  // get the company details, a subset of the user data\n  getUserSubsetData(userId) {\n    const dataObservable = this.http.get('https://jsonplaceholder.typicode.com/users/' + userId);\n    return dataObservable.pipe(map(jsonResponse => {\n      const filteredData = {\n        ...jsonResponse.company\n      };\n      return filteredData;\n    }));\n  }\n  getTasks() {\n    return this.http.get('https://jsonplaceholder.typicode.com/todos');\n  }\n  // Concat the task with the details of the user\n  getCombinedTasksUserDataSource() {\n    return this.getTasks().pipe(concatMap(tasks => {\n      const completeTaskData = tasks.map(task => {\n        // for each task retrun a new observable with the ShowcaseCombinedTaskUserModel\n        const taskUser = this.getUser(task.userId);\n        return combineLatest([of(task), taskUser]).pipe(map(([taskData, user]) => {\n          return {\n            ...taskData,\n            user: user\n          };\n        }));\n      });\n      return forkJoin(completeTaskData);\n    }));\n  }\n  getOpenDataStream() {\n    const firstLoadData = this.getPaginationDataSource(1);\n    return merge(this.openDataStream.asObservable(), firstLoadData);\n  }\n  pushValuesToOpenStream() {\n    const stackedValues = this.getStackedValues();\n    this.openDataStream.next(stackedValues);\n  }\n  getStackedValuesDataSource() {\n    const stackedValues = this.getStackedValues();\n    return of(stackedValues).pipe(delay(3000));\n  }\n  getStackedValues() {\n    const newUser = {\n      first_name: 'Agustin',\n      last_name: 'Nitsuga',\n      avatar: './assets/sample-images/user/person_1.jpg'\n    };\n    // Get a random integer between 1 (and only 1) and 'max'\n    const getRand = (max, min = 1) => {\n      return Math.floor(Math.random() * max) + min;\n    };\n    // Randomly send one, two or three users\n    return Array(getRand(3)).fill(newUser);\n  }\n}\nShowcaseService.ɵfac = function ShowcaseService_Factory(t) {\n  return new (t || ShowcaseService)(i0.ɵɵinject(i1.HttpClient));\n};\nShowcaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShowcaseService,\n  factory: ShowcaseService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["HttpClient","combineLatest","of","forkJoin","ReplaySubject","merge","delay","finalize","tap","map","filter","concatMap","ShowcaseShellModel","DataStore","ShowcaseService","constructor","http","getDataSourceWithDelay","get","pipe","val","console","log","time","timeEnd","getSimpleDataSource","getSimpleDataStore","dataSource","showcaseDataStore","shellModel","load","getListDataSource","result","getPaginationDataSource","page","results","length","getMultipleDataSourceA","getMultipleDataSourceB","getDependantDataSourcePost","getDependantDataSourcePostComments","dependantDataSource","post","isShell","id","getUser","userId","getUserSubsetData","dataObservable","jsonResponse","filteredData","company","getTasks","getCombinedTasksUserDataSource","tasks","completeTaskData","task","taskUser","taskData","user","getOpenDataStream","firstLoadData","openDataStream","asObservable","pushValuesToOpenStream","stackedValues","getStackedValues","next","getStackedValuesDataSource","newUser","first_name","last_name","avatar","getRand","max","min","Math","floor","random","Array","fill","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/showcase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, combineLatest, of, forkJoin, ReplaySubject, merge } from 'rxjs';\nimport { delay, finalize, tap, map, filter, concatMap } from 'rxjs/operators';\n// eslint-disable-next-line max-len\nimport { ShowcaseShellModel, ShowcasePostModel, ShowcaseCommentModel, ShowcaseCombinedTaskUserModel, ShowcaseUser2Model, ShowcaseTaskModel, ShowcaseShellUserModel, ShowcaseCompanyModel } from './showcase-shell.model';\nimport { DataStore, ShellModel } from '../shell/data-store';\nimport { TravelListingModel } from '../travel/listing/travel-listing.model';\nimport { FashionListingModel } from '../fashion/listing/fashion-listing.model';\n\n@Injectable()\nexport class ShowcaseService {\n  private showcaseDataStore: DataStore<ShowcaseShellModel>;\n  private openDataStream: ReplaySubject<Array<ShowcaseShellUserModel>> = new ReplaySubject<Array<ShowcaseShellUserModel>>();\n\n  constructor(private http: HttpClient) { }\n\n  public getDataSourceWithDelay(): Observable<ShowcaseShellModel> {\n    return this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json').pipe(\n      tap(val => {\n        console.log('getData STARTED');\n        // eslint-disable-next-line no-console\n        console.time('getData Roundtrip');\n      }),\n      delay(5000),\n      finalize(() => {\n        console.log('getData COMPLETED');\n        // eslint-disable-next-line no-console\n        console.timeEnd('getData Roundtrip');\n      }));\n  }\n\n  public getSimpleDataSource(): Observable<ShowcaseShellModel> {\n    return this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json');\n  }\n\n  public getSimpleDataStore(dataSource: Observable<ShowcaseShellModel>): DataStore<ShowcaseShellModel> {\n    // Use cache if available\n    if (!this.showcaseDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: ShowcaseShellModel = new ShowcaseShellModel();\n      this.showcaseDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.showcaseDataStore.load(dataSource);\n    }\n    return this.showcaseDataStore;\n  }\n\n  public getListDataSource(): Observable<any> {\n    return this.http.get('https://reqres.in/api/users').pipe(map(result => result['data']));\n  }\n\n  public getPaginationDataSource(page: number): Observable<any> {\n    return this.http.get('https://reqres.in/api/users?page=' + page).pipe(\n      map(result => result['data']),\n      filter(results => results.length > 0)\n    );\n  }\n\n  public getMultipleDataSourceA(): Observable<TravelListingModel> {\n    return this.http.get<TravelListingModel>('./assets/sample-data/travel/listing.json');\n  }\n\n  public getMultipleDataSourceB(): Observable<FashionListingModel> {\n      return this.http.get<FashionListingModel>('./assets/sample-data/fashion/listing.json');\n  }\n\n  public getDependantDataSourcePost(): Observable<ShowcasePostModel> {\n    return this.http.get<any>('https://jsonplaceholder.typicode.com/posts/1');\n  }\n\n  // eslint-disable-next-line max-len\n  public getDependantDataSourcePostComments(dependantDataSource: Observable<ShowcasePostModel & ShellModel>): Observable<Array<ShowcaseCommentModel>> {\n    return dependantDataSource.pipe(\n      // Filter user values that are not shells. We need to add this filter if using the combinedUserDataStore timeline\n      filter(post => !post.isShell),\n      concatMap(post => {\n        return this.http.get<any>('https://jsonplaceholder.typicode.com/comments?postId=' + post.id);\n      })\n    );\n  }\n\n  getUser(userId: number): Observable<ShowcaseUser2Model> {\n    return this.http.get<ShowcaseUser2Model>('https://jsonplaceholder.typicode.com/users/' + userId);\n  }\n\n  // get the company details, a subset of the user data\n  getUserSubsetData(userId: number): Observable<ShowcaseCompanyModel> {\n    const dataObservable = this.http.get<ShowcaseUser2Model>('https://jsonplaceholder.typicode.com/users/' + userId);\n\n    return dataObservable.pipe(\n      map((jsonResponse) => {\n        const filteredData: ShowcaseCompanyModel = {\n          ...jsonResponse.company\n        };\n        return filteredData;\n      })\n    );\n  }\n\n  getTasks(): Observable<Array<ShowcaseTaskModel>> {\n    return this.http.get<Array<ShowcaseTaskModel>>('https://jsonplaceholder.typicode.com/todos');\n  }\n\n  // Concat the task with the details of the user\n  public getCombinedTasksUserDataSource(): Observable<Array<ShowcaseCombinedTaskUserModel>> {\n    return this.getTasks().pipe(\n      concatMap(tasks => {\n        const completeTaskData = tasks.map(task => {\n          // for each task retrun a new observable with the ShowcaseCombinedTaskUserModel\n          const taskUser: Observable<ShowcaseUser2Model> = this.getUser(task.userId);\n\n          return combineLatest([\n            of(task),\n            taskUser\n          ]).pipe(\n            map(([taskData, user]: [ShowcaseTaskModel, ShowcaseUser2Model]) => {\n              return {\n                ...taskData,\n                user: user\n              } as ShowcaseCombinedTaskUserModel;\n            })\n          );\n        });\n        return forkJoin(completeTaskData);\n      })\n    );\n  }\n\n  public getOpenDataStream(): Observable<Array<ShowcaseShellUserModel>> {\n    const firstLoadData = this.getPaginationDataSource(1);\n\n    return merge(\n      this.openDataStream.asObservable(),\n      firstLoadData\n    );\n  }\n\n  public pushValuesToOpenStream(): void {\n    const stackedValues = this.getStackedValues();\n\n    this.openDataStream.next(stackedValues);\n  }\n\n  public getStackedValuesDataSource(): Observable<Array<ShowcaseShellUserModel>> {\n    const stackedValues = this.getStackedValues();\n\n    return of(stackedValues).pipe(delay(3000));\n  }\n\n  public getStackedValues(): Array<ShowcaseShellUserModel> {\n    const newUser = {\n      first_name: 'Agustin',\n      last_name: 'Nitsuga',\n      avatar: './assets/sample-images/user/person_1.jpg'\n    } as ShowcaseShellUserModel;\n\n    // Get a random integer between 1 (and only 1) and 'max'\n    const getRand: (max: number, min?: number) => number = (max, min = 1) => {\n      return Math.floor(Math.random() * max) + min;\n    };\n\n    // Randomly send one, two or three users\n    return Array(getRand(3)).fill(newUser);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}