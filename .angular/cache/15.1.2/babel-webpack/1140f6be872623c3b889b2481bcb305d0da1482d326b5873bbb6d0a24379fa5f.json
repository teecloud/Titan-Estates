{"ast":null,"code":"import { getAdditionalUserInfo } from '@angular/fire/auth';\nimport { AuthCredential as FirebaseAuthCredential, CustomParameters as FirebaseCustomParameters, OAuthCredential, User as FirebaseUser, UserCredential as FirebaseUserCredential } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\n// * Aux methods inspired on the @capacitor-firebase/authentication library\nexport class FirebaseAuthHelper {\n  applySignInOptions(options, provider) {\n    if (options.customParameters) {\n      const customParameters = {};\n      options.customParameters.map(parameter => {\n        customParameters[parameter.key] = parameter.value;\n      });\n      provider.setCustomParameters(customParameters);\n    }\n    if (options.scopes) {\n      for (const scope of options.scopes) {\n        provider.addScope(scope);\n      }\n    }\n  }\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L594)\n  createSignInResult(userCredential, authCredential) {\n    const userResult = this.createUserResult(userCredential?.user || null);\n    const credentialResult = this.createCredentialResult(authCredential);\n    const additionalUserInfoResult = this.createAdditionalUserInfoResult(userCredential);\n    const result = {\n      user: userResult,\n      credential: credentialResult,\n      additionalUserInfo: additionalUserInfoResult\n    };\n    return result;\n  }\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L627)\n  createUserResult(user) {\n    if (!user) {\n      return null;\n    }\n    const result = {\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      isAnonymous: user.isAnonymous,\n      phoneNumber: user.phoneNumber,\n      photoUrl: user.providerData[0].photoURL,\n      providerId: user.providerData[0].providerId,\n      tenantId: user.tenantId,\n      uid: user.uid\n    };\n    return result;\n  }\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L610)\n  createCredentialResult(credential) {\n    if (!credential) {\n      return null;\n    }\n    const result = {\n      providerId: credential.providerId\n    };\n    if (credential instanceof OAuthCredential) {\n      result.accessToken = credential.accessToken;\n      result.idToken = credential.idToken;\n      result.secret = credential.secret;\n    }\n    return result;\n  }\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L645)\n  createAdditionalUserInfoResult(credential) {\n    if (!credential) {\n      return null;\n    }\n    const additionalUserInfo = getAdditionalUserInfo(credential);\n    if (!additionalUserInfo) {\n      return null;\n    }\n    const {\n      isNewUser,\n      profile,\n      providerId,\n      username\n    } = additionalUserInfo;\n    const result = {\n      isNewUser\n    };\n    if (providerId !== null) {\n      result.providerId = providerId;\n    }\n    if (profile !== null) {\n      result.profile = profile;\n    }\n    if (username !== null && username !== undefined) {\n      result.username = username;\n    }\n    return result;\n  }\n}\nFirebaseAuthHelper.ɵfac = function FirebaseAuthHelper_Factory(t) {\n  return new (t || FirebaseAuthHelper)();\n};\nFirebaseAuthHelper.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FirebaseAuthHelper,\n  factory: FirebaseAuthHelper.ɵfac\n});","map":{"version":3,"mappings":"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","names":["getAdditionalUserInfo","AuthCredential","FirebaseAuthCredential","CustomParameters","FirebaseCustomParameters","OAuthCredential","User","FirebaseUser","UserCredential","FirebaseUserCredential","FirebaseAuthHelper","applySignInOptions","options","provider","customParameters","map","parameter","key","value","setCustomParameters","scopes","scope","addScope","createSignInResult","userCredential","authCredential","userResult","createUserResult","user","credentialResult","createCredentialResult","additionalUserInfoResult","createAdditionalUserInfoResult","result","credential","additionalUserInfo","displayName","email","emailVerified","isAnonymous","phoneNumber","photoUrl","providerData","photoURL","providerId","tenantId","uid","accessToken","idToken","secret","isNewUser","profile","username","undefined","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/firebase/auth/firebase-auth.helper.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { FacebookAuthProvider, getAdditionalUserInfo, GoogleAuthProvider, OAuthProvider, TwitterAuthProvider } from '@angular/fire/auth';\nimport {\n  AuthCredential as FirebaseAuthCredential,\n  AuthProvider as FirebaseAuthProvider,\n  CustomParameters as FirebaseCustomParameters,\n  OAuthCredential,\n  User as FirebaseUser,\n  UserCredential as FirebaseUserCredential\n} from '@angular/fire/auth';\n\nimport { AuthCredential, SignInResult, User, AdditionalUserInfo, SignInOptions } from '@capacitor-firebase/authentication';\n\n\n// * Aux methods inspired on the @capacitor-firebase/authentication library\n@Injectable()\nexport class FirebaseAuthHelper {\n\n  public applySignInOptions(options: SignInOptions, provider: OAuthProvider | GoogleAuthProvider | FacebookAuthProvider | TwitterAuthProvider) {\n    if (options.customParameters) {\n      const customParameters: FirebaseCustomParameters = {};\n      options.customParameters.map(parameter => {\n        customParameters[parameter.key] = parameter.value;\n      });\n      provider.setCustomParameters(customParameters);\n    }\n    if (options.scopes) {\n      for (const scope of options.scopes) {\n        provider.addScope(scope);\n      }\n    }\n  }\n\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L594)\n  public createSignInResult(userCredential: FirebaseUserCredential | null, authCredential: FirebaseAuthCredential | null): SignInResult {\n    const userResult = this.createUserResult(userCredential?.user || null);\n    const credentialResult = this.createCredentialResult(authCredential);\n    const additionalUserInfoResult = this.createAdditionalUserInfoResult(userCredential);\n    const result: SignInResult = {\n      user: userResult,\n      credential: credentialResult,\n      additionalUserInfo: additionalUserInfoResult\n    };\n    return result;\n  }\n\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L627)\n  public createUserResult(user: FirebaseUser | null): User | null {\n    if (!user) {\n      return null;\n    }\n    const result: User = {\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      isAnonymous: user.isAnonymous,\n      phoneNumber: user.phoneNumber,\n      photoUrl: user.providerData[0].photoURL,\n      providerId: user.providerData[0].providerId,\n      tenantId: user.tenantId,\n      uid: user.uid\n    };\n    return result;\n  }\n\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L610)\n  private createCredentialResult(credential: FirebaseAuthCredential | null): AuthCredential | null {\n    if (!credential) {\n      return null;\n    }\n    const result: AuthCredential = {\n      providerId: credential.providerId\n    };\n    if (credential instanceof OAuthCredential) {\n      result.accessToken = credential.accessToken;\n      result.idToken = credential.idToken;\n      result.secret = credential.secret;\n    }\n    return result;\n  }\n\n  // ? (see: https://github.com/capawesome-team/capacitor-firebase/blob/9024eef856dbd25b2b6459e4b6bcee104ca89755/packages/authentication/src/web.ts#L645)\n  private createAdditionalUserInfoResult(credential: FirebaseUserCredential | null): AdditionalUserInfo | null {\n    if (!credential) {\n      return null;\n    }\n    const additionalUserInfo = getAdditionalUserInfo(credential);\n    if (!additionalUserInfo) {\n      return null;\n    }\n    const { isNewUser, profile, providerId, username } = additionalUserInfo;\n    const result: AdditionalUserInfo = {\n      isNewUser\n    };\n    if (providerId !== null) {\n      result.providerId = providerId;\n    }\n    if (profile !== null) {\n      result.profile = profile as { [key: string]: unknown };\n    }\n    if (username !== null && username !== undefined) {\n      result.username = username;\n    }\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}