{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { DataStore } from '../shell/data-store';\nimport { DealsListingModel } from './listing/deals-listing.model';\nimport { DealsDetailsModel } from './details/deals-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utils/transfer-state-helper\";\nimport * as i2 from \"@angular/common/http\";\nexport class DealsService {\n  constructor(platformId, transferStateHelper, http) {\n    this.platformId = platformId;\n    this.transferStateHelper = transferStateHelper;\n    this.http = http;\n  }\n  get relativeDates() {\n    return [dayjs().add(1, 'day').add(8, 'hour').add(10, 'second').format('MM/DD/YYYY HH:mm:ss'), dayjs().add(7, 'day').format('MM/DD/YYYY'), dayjs().subtract(1, 'month').format('MM/DD/YYYY'), dayjs().add(2, 'month').format('MM/DD/YYYY')];\n  }\n  getListingDataSource() {\n    const rawDataSource = this.http.get('./assets/sample-data/deals/listing.json').pipe(map(data => {\n      // Using rest operator to divide the data (see: https://dev.to/napoleon039/how-to-use-the-spread-and-rest-operator-4jbb)\n      const {\n        items,\n        ...otherData\n      } = data;\n      const itemsWithRelativeDates = items.map((dealItem, index) => {\n        // Relative date (better to showcase UI micro-interactions)\n        return {\n          ...dealItem,\n          expirationDate: this.relativeDates[index]\n        };\n      });\n      // Using spread operator to concat the data (see: https://dev.to/napoleon039/how-to-use-the-spread-and-rest-operator-4jbb)\n      const updatedListingData = {\n        ...otherData,\n        items: itemsWithRelativeDates\n      };\n      // Note: HttpClient cannot know how to instantiate a class for the returned data\n      // We need to properly cast types from json data\n      const listing = new DealsListingModel();\n      // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n      // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n      // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n      Object.assign(listing, updatedListingData);\n      return listing;\n    }));\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('deals-listing-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getListingStore(dataSource) {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = new DealsListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else {\n        // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n  getDetailsDataSource() {\n    const rawDataSource = this.http.get('./assets/sample-data/deals/details.json').pipe(map(data => {\n      const expirationDate = dayjs().add(1, 'day').add(8, 'hour').add(10, 'second').format('MM/DD/YYYY HH:mm:ss');\n      const updatedDetailsData = {\n        ...data,\n        expirationDate\n      };\n      // Note: HttpClient cannot know how to instantiate a class for the returned data\n      // We need to properly cast types from json data\n      const details = new DealsDetailsModel();\n      // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n      // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n      // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n      Object.assign(details, updatedDetailsData);\n      return details;\n    }));\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('deals-details-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getDetailsStore(dataSource) {\n    // Initialize the model specifying that it is a shell model\n    const shellModel = new DealsDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.detailsDataStore.load(dataSource, 0);\n    } else {\n      // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n}\nDealsService.ɵfac = function DealsService_Factory(t) {\n  return new (t || DealsService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.TransferStateHelper), i0.ɵɵinject(i2.HttpClient));\n};\nDealsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DealsService,\n  factory: DealsService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["PLATFORM_ID","HttpClient","map","dayjs","DataStore","DealsListingModel","DealsDetailsModel","TransferStateHelper","isPlatformServer","DealsService","constructor","platformId","transferStateHelper","http","relativeDates","add","format","subtract","getListingDataSource","rawDataSource","get","pipe","data","items","otherData","itemsWithRelativeDates","dealItem","index","expirationDate","updatedListingData","listing","Object","assign","cachedDataSource","checkDataSourceState","getListingStore","dataSource","listingDataStore","shellModel","load","getDetailsDataSource","updatedDetailsData","details","getDetailsStore","detailsDataStore","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/deals/deals.service.ts"],"sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport * as dayjs from 'dayjs';\n\nimport { DataStore } from '../shell/data-store';\nimport { DealsListingModel } from './listing/deals-listing.model';\nimport { DealsDetailsModel } from './details/deals-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class DealsService {\n  private listingDataStore: DataStore<DealsListingModel>;\n  private detailsDataStore: DataStore<DealsDetailsModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  get relativeDates(): Array<string> {\n    return [\n      dayjs().add(1, 'day').add(8, 'hour').add(10, 'second').format('MM/DD/YYYY HH:mm:ss') as string,\n      dayjs().add(7, 'day').format('MM/DD/YYYY') as string,\n      dayjs().subtract(1, 'month').format('MM/DD/YYYY') as string,\n      dayjs().add(2, 'month').format('MM/DD/YYYY') as string\n    ];\n  }\n\n  public getListingDataSource(): Observable<DealsListingModel> {\n    const rawDataSource = this.http.get<DealsListingModel>('./assets/sample-data/deals/listing.json')\n    .pipe(\n      map(\n        (data: DealsListingModel) => {\n          // Using rest operator to divide the data (see: https://dev.to/napoleon039/how-to-use-the-spread-and-rest-operator-4jbb)\n          const {items, ...otherData} = data;\n\n          const itemsWithRelativeDates = items.map((dealItem, index) => {\n            // Relative date (better to showcase UI micro-interactions)\n            return {...dealItem, expirationDate: this.relativeDates[index]};\n          });\n\n          // Using spread operator to concat the data (see: https://dev.to/napoleon039/how-to-use-the-spread-and-rest-operator-4jbb)\n          const updatedListingData = {...otherData, items: itemsWithRelativeDates};\n\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new DealsListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, updatedListingData);\n\n          return listing;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('deals-listing-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getListingStore(dataSource: Observable<DealsListingModel>): DataStore<DealsListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: DealsListingModel = new DealsListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<DealsDetailsModel> {\n    const rawDataSource = this.http.get<DealsDetailsModel>('./assets/sample-data/deals/details.json')\n    .pipe(\n      map(\n        (data: DealsDetailsModel) => {\n          const expirationDate = dayjs().add(1, 'day').add(8, 'hour').add(10, 'second').format('MM/DD/YYYY HH:mm:ss') as string;\n          const updatedDetailsData = {...data, expirationDate};\n\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new DealsDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, updatedDetailsData);\n\n          return details;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('deals-details-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDetailsStore(dataSource: Observable<DealsDetailsModel>): DataStore<DealsDetailsModel> {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: DealsDetailsModel = new DealsDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.detailsDataStore.load(dataSource, 0);\n    } else { // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.detailsDataStore.load(dataSource);\n    }\n\n    return this.detailsDataStore;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}