{"ast":null,"code":"import { ShowcaseService } from '../../showcase.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nexport class NonBlockingResolver {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n  }\n  resolve() {\n    // Base Observable (where we get data from)\n    const dataObservable = this.showcaseService.getDataSourceWithDelay();\n    // NON-BLOCKING RESOLVERS\n    // Resolver using a ReplySubject that emits the base Observable and then completes\n    // const subject = new ReplaySubject();\n    // subject.next(dataObservable);\n    // subject.complete();\n    // return subject;\n    // Resolver using an Observable that emits the base Observable and then completes\n    // const observable = Observable.create((observer) => {\n    //   observer.next(dataObservable);\n    //   observer.complete();\n    // });\n    // return observable;\n    // Resolver using a Promise that resolves the base Observable\n    const observablePromise = new Promise((resolve, reject) => {\n      resolve(dataObservable);\n    });\n    return observablePromise;\n  }\n}\nNonBlockingResolver.ɵfac = function NonBlockingResolver_Factory(t) {\n  return new (t || NonBlockingResolver)(i0.ɵɵinject(i1.ShowcaseService));\n};\nNonBlockingResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NonBlockingResolver,\n  factory: NonBlockingResolver.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,wBAAwB;;;AAGxD,OAAM,MAAOC,mBAAmB;EAE9BC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;EAAoB;EAEvDC,OAAO;IAEL;IACA,MAAMC,cAAc,GAAG,IAAI,CAACF,eAAe,CAACG,sBAAsB,EAAE;IAEpE;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,MAAMC,iBAAiB,GAAG,IAAIC,OAAO,CAAC,CAACJ,OAAO,EAAEK,MAAM,KAAI;MACxDL,OAAO,CAACC,cAAc,CAAC;IACzB,CAAC,CAAC;IACF,OAAOE,iBAAiB;EAC1B;;AA7BWN,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAS,SAAnBT,mBAAmB;AAAA","names":["ShowcaseService","NonBlockingResolver","constructor","showcaseService","resolve","dataObservable","getDataSourceWithDelay","observablePromise","Promise","reject","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/route-resolvers-ux/non-blocking-resolvers/non-blocking.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { ShowcaseService } from '../../showcase.service';\n\n@Injectable()\nexport class NonBlockingResolver implements Resolve<any> {\n\n  constructor(private showcaseService: ShowcaseService) {}\n\n  resolve() {\n\n    // Base Observable (where we get data from)\n    const dataObservable = this.showcaseService.getDataSourceWithDelay();\n\n    // NON-BLOCKING RESOLVERS\n\n    // Resolver using a ReplySubject that emits the base Observable and then completes\n    // const subject = new ReplaySubject();\n    // subject.next(dataObservable);\n    // subject.complete();\n    // return subject;\n\n    // Resolver using an Observable that emits the base Observable and then completes\n    // const observable = Observable.create((observer) => {\n    //   observer.next(dataObservable);\n    //   observer.complete();\n    // });\n    // return observable;\n\n    // Resolver using a Promise that resolves the base Observable\n    const observablePromise = new Promise((resolve, reject) => {\n      resolve(dataObservable);\n    });\n    return observablePromise;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}