{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { ImageShellState, TransferStateHelper } from '../../utils/transfer-state-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../utils/transfer-state-helper\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nfunction ImageShellComponent_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngIf\", \"_display === 'cover'\"]);\n  }\n}\nconst _c0 = [\"*\"];\nexport class ImageShellComponent {\n  constructor(transferStateHelper) {\n    this.transferStateHelper = transferStateHelper;\n    // To debug shell styles, change configuration in the environment file\n    this.debugDisplay = environment.appShellConfig && environment.appShellConfig.debug ? environment.appShellConfig.debug : false;\n    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle,id-blacklist,id-match\n    this._src = '';\n    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle,id-blacklist,id-match\n    this._alt = '';\n    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle,id-blacklist,id-match\n    this._loadingStrategy = 'lazy';\n    // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle, id-blacklist, id-match\n    this._display = '';\n    this.imageSSR = false;\n    this.imageLoaded = false;\n    this.imageError = false;\n    this.errorMessage = 'Could not load image';\n  }\n  set display(val) {\n    this._display = val !== undefined && val !== null ? val : '';\n    // For display 'cover' we use a hidden aux image. As it's hidden, if set loading to 'lazy' it won't ever trigger the loading mechanism\n    if (this._display === 'cover') {\n      this._loadingStrategy = 'eager';\n    }\n  }\n  get display() {\n    return this._display;\n  }\n  set src(val) {\n    if (!this.debugDisplay) {\n      this._src = val !== undefined && val !== null ? val : '';\n    }\n    // When using SSR (Server Side Rendering), avoid the loading animation while the image resource is being loaded\n    const imageState = this.transferStateHelper.checkImageShellState('shell-images-state', this._src);\n    if (imageState === ImageShellState.SSR || imageState === ImageShellState.BROWSER_FROM_SSR) {\n      this._imageProcessedInServer();\n    } else {\n      if (this._display === 'cover') {\n        // Unset the background-image until the image is loaded\n        this.backgroundImage = 'unset';\n      }\n    }\n  }\n  set alt(val) {\n    this._alt = val !== undefined && val !== null ? val : '';\n  }\n  _imageProcessedInServer() {\n    this.imageSSR = true;\n    // Also set backgroundImage so it's ready when transitioning from SSR to the browser\n    if (this._display === 'cover') {\n      this.backgroundImage = 'url(' + this._src + ')';\n    }\n  }\n  _imageLoaded() {\n    this.imageLoaded = true;\n    // If it's a cover image then set the background-image property accordingly\n    if (this._display === 'cover') {\n      // Now that the image is loaded, set the background image\n      this.backgroundImage = 'url(' + this._src + ')';\n    }\n  }\n  _imageLoadError(event) {\n    // Image error event get's called when the src is empty. We use emty values for the shell.\n    // (see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Image_loading_errors)\n    // Avoid that shell case\n    if (this._src && this._src !== '') {\n      this.imageLoaded = false;\n      this.imageSSR = false;\n      setTimeout(() => {\n        this.imageError = true;\n      }, 500);\n    }\n  }\n}\nImageShellComponent.ɵfac = function ImageShellComponent_Factory(t) {\n  return new (t || ImageShellComponent)(i0.ɵɵdirectiveInject(i1.TransferStateHelper));\n};\nImageShellComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ImageShellComponent,\n  selectors: [[\"app-image-shell\"]],\n  hostVars: 10,\n  hostBindings: function ImageShellComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"data-error\", ctx.errorMessage)(\"display\", ctx.display);\n      i0.ɵɵstyleProp(\"background-image\", ctx.backgroundImage);\n      i0.ɵɵclassProp(\"img-ssr\", ctx.imageSSR)(\"img-loaded\", ctx.imageLoaded)(\"img-error\", ctx.imageError);\n    }\n  },\n  inputs: {\n    display: \"display\",\n    src: \"src\",\n    alt: \"alt\"\n  },\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 4,\n  consts: [[1, \"spinner\"], [1, \"inner-img\", 3, \"src\", \"alt\", \"load\", \"error\"], [4, \"ngIf\"]],\n  template: function ImageShellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelement(0, \"ion-spinner\", 0);\n      i0.ɵɵelementStart(1, \"img\", 1);\n      i0.ɵɵlistener(\"load\", function ImageShellComponent_Template_img_load_1_listener() {\n        return ctx._imageLoaded();\n      })(\"error\", function ImageShellComponent_Template_img_error_1_listener($event) {\n        return ctx._imageLoadError($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ImageShellComponent_ng_content_2_Template, 1, 0, \"ng-content\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"src\", ctx._src, i0.ɵɵsanitizeUrl)(\"alt\", ctx._alt);\n      i0.ɵɵattribute(\"loading\", ctx._loadingStrategy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._display === \"cover\");\n    }\n  },\n  dependencies: [i2.NgIf, i3.IonSpinner],\n  styles: [\"[_nghost-%COMP%] {\\n  --image-shell-loading-background: #EEE;\\n  --image-shell-border-radius: 0px;\\n  --image-shell-color: #333;\\n  display: block;\\n  position: relative;\\n  height: 100%;\\n  border-radius: var(--image-shell-border-radius);\\n  transition: all ease-in-out 0.3s;\\n  z-index: 2;\\n}\\n[_nghost-%COMP%]    > .spinner[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n[_nghost-%COMP%]::before {\\n  content: \\\"\\\";\\n  background: var(--image-shell-loading-background);\\n  border-radius: var(--image-shell-border-radius);\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n[_nghost-%COMP%]:not([display=cover]) {\\n  width: 100%;\\n  overflow: hidden;\\n}\\n[_nghost-%COMP%]:not([display=cover])    > .inner-img[_ngcontent-%COMP%] {\\n  transition: visibility 0s linear, opacity 0.5s linear;\\n  opacity: 0;\\n  visibility: hidden;\\n  width: 100%;\\n  height: 100%;\\n  border-radius: var(--image-shell-border-radius);\\n  display: block;\\n}\\n[_nghost-%COMP%]:not([display=cover]).img-ssr::before, [_nghost-%COMP%]:not([display=cover]).img-loaded::before {\\n  display: none;\\n}\\n[_nghost-%COMP%]:not([display=cover]).img-ssr    > .inner-img[_ngcontent-%COMP%], [_nghost-%COMP%]:not([display=cover]).img-loaded    > .inner-img[_ngcontent-%COMP%] {\\n  opacity: 1;\\n  visibility: visible;\\n}\\n[_nghost-%COMP%]:not([display=cover]).img-error    > .inner-img[_ngcontent-%COMP%] {\\n  color: var(--image-shell-color);\\n  font-size: 12px;\\n}\\n[_nghost-%COMP%]:not([display=cover]).img-error::after {\\n  content: attr(data-error);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  position: absolute;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  box-sizing: border-box;\\n  padding: 10px;\\n  color: var(--image-shell-color);\\n  background-color: var(--image-shell-loading-background);\\n  font-size: 12px;\\n}\\n[display=cover][_nghost-%COMP%] {\\n  background-size: cover;\\n  background-repeat: no-repeat;\\n}\\n[display=cover][_nghost-%COMP%]::before, [display=cover][_nghost-%COMP%]    > .spinner[_ngcontent-%COMP%] {\\n  z-index: -1;\\n}\\n[display=cover][_nghost-%COMP%]    > .inner-img[_ngcontent-%COMP%] {\\n  display: none;\\n  visibility: hidden;\\n}\\n[display=cover].img-ssr[_nghost-%COMP%]::before, [display=cover].img-loaded[_nghost-%COMP%]::before {\\n  display: none;\\n}\\n\\n[animation=gradient][_nghost-%COMP%] {\\n  --image-shell-loading-background: #EEE;\\n  --image-shell-animation-color: #DDD;\\n}\\n[animation=gradient][_nghost-%COMP%]::before {\\n  background: linear-gradient(to right, var(--image-shell-loading-background) 8%, var(--image-shell-animation-color) 18%, var(--image-shell-loading-background) 33%);\\n  background-size: 800px 104px;\\n  animation: _ngcontent-%COMP%_animateBackground 2s ease-in-out infinite;\\n}\\n[animation=gradient].img-ssr[_nghost-%COMP%]::before, [animation=gradient].img-loaded[_nghost-%COMP%]::before, [animation=gradient].img-error[_nghost-%COMP%]::before {\\n  background: none;\\n  animation: 0;\\n}\\n@keyframes _ngcontent-%COMP%_animateBackground {\\n  0% {\\n    background-position: -468px 0;\\n  }\\n  100% {\\n    background-position: 468px 0;\\n  }\\n}\\n\\n[animation=spinner][_nghost-%COMP%] {\\n  --image-shell-spinner-size: 28px;\\n  --image-shell-spinner-color: #CCC;\\n}\\n[animation=spinner][_nghost-%COMP%]    > .spinner[_ngcontent-%COMP%] {\\n  display: block;\\n  position: absolute;\\n  top: calc(50% - var(--image-shell-spinner-size) / 2);\\n  left: calc(50% - var(--image-shell-spinner-size) / 2);\\n  width: var(--image-shell-spinner-size);\\n  height: var(--image-shell-spinner-size);\\n  font-size: var(--image-shell-spinner-size);\\n  line-height: var(--image-shell-spinner-size);\\n  color: var(--image-shell-spinner-color);\\n}\\n[animation=spinner].img-ssr[_nghost-%COMP%]    > .spinner[_ngcontent-%COMP%], [animation=spinner].img-loaded[_nghost-%COMP%]    > .spinner[_ngcontent-%COMP%], [animation=spinner].img-error[_nghost-%COMP%]    > .spinner[_ngcontent-%COMP%] {\\n  display: none;\\n  visibility: hidden;\\n}\\n\\n.add-overlay[_nghost-%COMP%] {\\n  --image-shell-overlay-background: rgba(0, 0, 0, .4);\\n}\\n.add-overlay.img-ssr[_nghost-%COMP%]::before, .add-overlay.img-loaded[_nghost-%COMP%]::before, .add-overlay.img-error[_nghost-%COMP%]::before {\\n  display: block;\\n  background: var(--image-shell-overlay-background);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"mappings":"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","names":["environment","ImageShellState","TransferStateHelper","i0","ImageShellComponent","constructor","transferStateHelper","appShellConfig","debug","display","val","_display","undefined","_loadingStrategy","src","debugDisplay","_src","imageState","checkImageShellState","SSR","BROWSER_FROM_SSR","_imageProcessedInServer","backgroundImage","alt","_alt","imageSSR","_imageLoaded","imageLoaded","_imageLoadError","event","setTimeout","imageError","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/shell/image-shell/image-shell.component.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/shell/image-shell/image-shell.component.html"],"sourcesContent":["import { Component, Input, HostBinding } from '@angular/core';\nimport { environment } from '../../../environments/environment';\n\nimport { ImageShellState, TransferStateHelper } from '../../utils/transfer-state-helper';\n\n@Component({\n  selector: 'app-image-shell',\n  templateUrl: './image-shell.component.html',\n  styleUrls: ['./image-shell.component.scss']\n})\nexport class ImageShellComponent {\n  // To debug shell styles, change configuration in the environment file\n  private debugDisplay = (environment.appShellConfig && environment.appShellConfig.debug) ? environment.appShellConfig.debug : false;\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle,id-blacklist,id-match\n  _src = '';\n  // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle,id-blacklist,id-match\n  _alt = '';\n  // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle,id-blacklist,id-match\n  _loadingStrategy: 'lazy' | 'eager' = 'lazy';\n  // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle, id-blacklist, id-match\n  _display = '';\n\n  @HostBinding('class.img-ssr') imageSSR = false;\n  @HostBinding('class.img-loaded') imageLoaded = false;\n  @HostBinding('class.img-error') imageError = false;\n\n  @HostBinding('attr.data-error') errorMessage = 'Could not load image';\n\n  @HostBinding('style.backgroundImage') backgroundImage: string;\n\n  @HostBinding('attr.display')\n  @Input()\n  set display(val: string) {\n    this._display = (val !== undefined && val !== null) ? val : '';\n\n    // For display 'cover' we use a hidden aux image. As it's hidden, if set loading to 'lazy' it won't ever trigger the loading mechanism\n    if (this._display === 'cover') {\n      this._loadingStrategy = 'eager';\n    }\n  }\n  get display(): string {\n    return this._display;\n  }\n\n  @Input()\n  set src(val: string) {\n    if (!this.debugDisplay) {\n      this._src = (val !== undefined && val !== null) ? val : '';\n    }\n\n    // When using SSR (Server Side Rendering), avoid the loading animation while the image resource is being loaded\n    const imageState = this.transferStateHelper.checkImageShellState('shell-images-state', this._src);\n\n    if (imageState === ImageShellState.SSR || imageState === ImageShellState.BROWSER_FROM_SSR) {\n      this._imageProcessedInServer();\n    } else {\n      if (this._display === 'cover') {\n        // Unset the background-image until the image is loaded\n        this.backgroundImage = 'unset';\n      }\n    }\n  }\n\n  @Input()\n  set alt(val: string) {\n    this._alt = (val !== undefined && val !== null) ? val : '';\n  }\n\n  constructor(\n    private transferStateHelper: TransferStateHelper\n  ) { }\n\n  _imageProcessedInServer(): void {\n    this.imageSSR = true;\n\n    // Also set backgroundImage so it's ready when transitioning from SSR to the browser\n    if (this._display === 'cover') {\n      this.backgroundImage = 'url(' + this._src + ')';\n    }\n  }\n\n  _imageLoaded(): void {\n    this.imageLoaded = true;\n\n    // If it's a cover image then set the background-image property accordingly\n    if (this._display === 'cover') {\n      // Now that the image is loaded, set the background image\n      this.backgroundImage = 'url(' + this._src + ')';\n    }\n  }\n\n  _imageLoadError(event: Event): void {\n    // Image error event get's called when the src is empty. We use emty values for the shell.\n    // (see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Image_loading_errors)\n    // Avoid that shell case\n    if (this._src && this._src !== '') {\n      this.imageLoaded = false;\n      this.imageSSR = false;\n\n      setTimeout(() => {\n        this.imageError = true;\n      }, 500);\n    }\n  }\n}\n","<ion-spinner class=\"spinner\"></ion-spinner>\n<img class=\"inner-img\" [src]=\"_src\" [alt]=\"_alt\" [attr.loading]=\"_loadingStrategy\" (load)=\"_imageLoaded()\" (error)=\"_imageLoadError($event)\"/>\n<ng-content *ngIf=\"_display === 'cover'\"></ng-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}