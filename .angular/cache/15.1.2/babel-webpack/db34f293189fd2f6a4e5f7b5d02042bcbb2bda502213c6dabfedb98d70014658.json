{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { VideoPlaylistModel } from './video-playlist.model';\nimport { DataStore } from '../shell/data-store';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utils/transfer-state-helper\";\nimport * as i2 from \"@angular/common/http\";\nexport class VideoPlaylistService {\n  constructor(platformId, transferStateHelper, http) {\n    this.platformId = platformId;\n    this.transferStateHelper = transferStateHelper;\n    this.http = http;\n  }\n  getVideoPlaylistDataSource() {\n    const rawDataSource = this.http.get('./assets/sample-data/video-playlist/video-playlist.json');\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('video-playlist-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getVideoPlaylistStore(dataSource) {\n    // Use cache if available\n    if (!this.videoPlaylistDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = new VideoPlaylistModel();\n      this.videoPlaylistDataStore = new DataStore(shellModel);\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.videoPlaylistDataStore.load(dataSource, 0);\n      } else {\n        // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.videoPlaylistDataStore.load(dataSource);\n      }\n    }\n    return this.videoPlaylistDataStore;\n  }\n}\nVideoPlaylistService.ɵfac = function VideoPlaylistService_Factory(t) {\n  return new (t || VideoPlaylistService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.TransferStateHelper), i0.ɵɵinject(i2.HttpClient));\n};\nVideoPlaylistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VideoPlaylistService,\n  factory: VideoPlaylistService.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAA6BA,WAAW,QAAQ,eAAe;AAC/D,SAASC,UAAU,QAAQ,sBAAsB;AAGjD,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,gBAAgB,QAAQ,iBAAiB;;;;AAGlD,OAAM,MAAOC,oBAAoB;EAI/BC,YAC+BC,UAAkB,EACvCC,mBAAwC,EACxCC,IAAgB;IAFK,eAAU,GAAVF,UAAU;IAC/B,wBAAmB,GAAnBC,mBAAmB;IACnB,SAAI,GAAJC,IAAI;EACV;EAEGC,0BAA0B;IAC/B,MAAMC,aAAa,GAAG,IAAI,CAACF,IAAI,CAACG,GAAG,CAAqB,yDAAyD,CAAC;IAElH;IACA;IACA;IACA,MAAMC,gBAAgB,GAAG,IAAI,CAACL,mBAAmB,CAACM,oBAAoB,CAAC,sBAAsB,EAAEH,aAAa,CAAC;IAE7G,OAAOE,gBAAgB;EACzB;EAEOE,qBAAqB,CAACC,UAA0C;IACrE;IACA,IAAI,CAAC,IAAI,CAACC,sBAAsB,EAAE;MAChC;MACA,MAAMC,UAAU,GAAuB,IAAIjB,kBAAkB,EAAE;MAC/D,IAAI,CAACgB,sBAAsB,GAAG,IAAIf,SAAS,CAACgB,UAAU,CAAC;MAEvD;MACA;MACA,IAAId,gBAAgB,CAAC,IAAI,CAACG,UAAU,CAAC,IAAIS,UAAU,CAAC,WAAW,CAAC,EAAE;QAChE;QACA,IAAI,CAACC,sBAAsB,CAACE,IAAI,CAACH,UAAU,EAAE,CAAC,CAAC;OAChD,MAAM;QAAE;QACP;QACA,IAAI,CAACC,sBAAsB,CAACE,IAAI,CAACH,UAAU,CAAC;;;IAIhD,OAAO,IAAI,CAACC,sBAAsB;EACpC;;AAxCWZ,oBAAoB;mBAApBA,oBAAoB,cAKrBN,WAAW;AAAA;AALVM,oBAAoB;SAApBA,oBAAoB;EAAAe,SAApBf,oBAAoB;AAAA","names":["PLATFORM_ID","HttpClient","VideoPlaylistModel","DataStore","TransferStateHelper","isPlatformServer","VideoPlaylistService","constructor","platformId","transferStateHelper","http","getVideoPlaylistDataSource","rawDataSource","get","cachedDataSource","checkDataSourceState","getVideoPlaylistStore","dataSource","videoPlaylistDataStore","shellModel","load","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/video-playlist/video-playlist.service.ts"],"sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { VideoPlaylistModel } from './video-playlist.model';\nimport { DataStore } from '../shell/data-store';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class VideoPlaylistService {\n\n  private videoPlaylistDataStore: DataStore<VideoPlaylistModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  public getVideoPlaylistDataSource(): Observable<VideoPlaylistModel> {\n    const rawDataSource = this.http.get<VideoPlaylistModel>('./assets/sample-data/video-playlist/video-playlist.json');\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('video-playlist-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getVideoPlaylistStore(dataSource: Observable<VideoPlaylistModel>): DataStore<VideoPlaylistModel> {\n    // Use cache if available\n    if (!this.videoPlaylistDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: VideoPlaylistModel = new VideoPlaylistModel();\n      this.videoPlaylistDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.videoPlaylistDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.videoPlaylistDataStore.load(dataSource);\n      }\n    }\n\n    return this.videoPlaylistDataStore;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}