{"ast":null,"code":"import { ActivatedRouteSnapshot } from '@angular/router';\nimport { FirebaseCrudService } from '../firebase-crud.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../firebase-crud.service\";\nexport class FirebaseUserDetailsResolver {\n  constructor(firebaseCrudService) {\n    this.firebaseCrudService = firebaseCrudService;\n  }\n  resolve(route) {\n    const userId = route.paramMap.get('id');\n    // We created a FirebaseCombinedUserModel to combine the userData with the details of the userSkills (from the skills collection).\n    // They are 2 different collections and we need to combine them into 1 dataSource.\n    const combinedUserDataSource = this.firebaseCrudService.getCombinedUserDataSource(userId);\n    const combinedUserDataStore = this.firebaseCrudService.getCombinedUserStore(combinedUserDataSource);\n    // The user details page has a section with related users, showing users with the same skills\n    // For this we created another datastore which depends on the combinedUser data store\n    // The DataStore subscribes to the DataSource, to avoid creating two subscribers to the combinedUserDataSource,\n    // use the combinedUserDataStore timeline instead. (The timeline is a Subject, and is intended to have many subscribers)\n    // Using, and thus subscribing to the timeline won't trigger two requests to the firebase endpoint\n    const relatedUsersDataSource = this.firebaseCrudService.getRelatedUsersDataSource(combinedUserDataStore.state, userId);\n    const relatedUsersDataStore = this.firebaseCrudService.getRelatedUsersStore(relatedUsersDataSource);\n    return {\n      user: combinedUserDataStore,\n      relatedUsers: relatedUsersDataStore\n    };\n  }\n}\nFirebaseUserDetailsResolver.ɵfac = function FirebaseUserDetailsResolver_Factory(t) {\n  return new (t || FirebaseUserDetailsResolver)(i0.ɵɵinject(i1.FirebaseCrudService));\n};\nFirebaseUserDetailsResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FirebaseUserDetailsResolver,\n  factory: FirebaseUserDetailsResolver.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,sBAAsB,QAAQ,iBAAiB;AAOjE,SAASC,mBAAmB,QAAQ,0BAA0B;;;AAG9D,OAAM,MAAOC,2BAA2B;EAEtCC,YAAoBC,mBAAwC;IAAxC,wBAAmB,GAAnBA,mBAAmB;EAAwB;EAE/DC,OAAO,CAACC,KAA6B;IACnC,MAAMC,MAAM,GAAGD,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IAEvC;IACA;IAEA,MAAMC,sBAAsB,GAA0C,IAAI,CAACN,mBAAmB,CAC7FO,yBAAyB,CAACJ,MAAM,CAAC;IAElC,MAAMK,qBAAqB,GAAyC,IAAI,CAACR,mBAAmB,CAC3FS,oBAAoB,CAACH,sBAAsB,CAAC;IAG7C;IACA;IACA;IACA;IACA;IACA,MAAMI,sBAAsB,GAAgD,IAAI,CAACV,mBAAmB,CACnGW,yBAAyB,CAACH,qBAAqB,CAACI,KAAK,EAAET,MAAM,CAAC;IAE/D,MAAMU,qBAAqB,GAA+C,IAAI,CAACb,mBAAmB,CACjGc,oBAAoB,CAACJ,sBAAsB,CAAC;IAE7C,OAAO;MAACK,IAAI,EAAEP,qBAAqB;MAAEQ,YAAY,EAAEH;IAAqB,CAAC;EAC3E;;AA7BWf,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;SAA3BA,2BAA2B;EAAAmB,SAA3BnB,2BAA2B;AAAA","names":["ActivatedRouteSnapshot","FirebaseCrudService","FirebaseUserDetailsResolver","constructor","firebaseCrudService","resolve","route","userId","paramMap","get","combinedUserDataSource","getCombinedUserDataSource","combinedUserDataStore","getCombinedUserStore","relatedUsersDataSource","getRelatedUsersDataSource","state","relatedUsersDataStore","getRelatedUsersStore","user","relatedUsers","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/firebase/crud/user/firebase-user-details.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { FirebaseCombinedUserModel } from './firebase-user.model';\nimport { FirebaseListingItemModel } from '../listing/firebase-listing.model';\n\nimport { DataStore } from '../../../shell/data-store';\nimport { FirebaseCrudService } from '../firebase-crud.service';\n\n@Injectable()\nexport class FirebaseUserDetailsResolver implements Resolve<any> {\n\n  constructor(private firebaseCrudService: FirebaseCrudService) {}\n\n  resolve(route: ActivatedRouteSnapshot) {\n    const userId = route.paramMap.get('id');\n\n    // We created a FirebaseCombinedUserModel to combine the userData with the details of the userSkills (from the skills collection).\n    // They are 2 different collections and we need to combine them into 1 dataSource.\n\n    const combinedUserDataSource: Observable<FirebaseCombinedUserModel> = this.firebaseCrudService\n    .getCombinedUserDataSource(userId);\n\n    const combinedUserDataStore: DataStore<FirebaseCombinedUserModel> = this.firebaseCrudService\n    .getCombinedUserStore(combinedUserDataSource);\n\n\n    // The user details page has a section with related users, showing users with the same skills\n    // For this we created another datastore which depends on the combinedUser data store\n    // The DataStore subscribes to the DataSource, to avoid creating two subscribers to the combinedUserDataSource,\n    // use the combinedUserDataStore timeline instead. (The timeline is a Subject, and is intended to have many subscribers)\n    // Using, and thus subscribing to the timeline won't trigger two requests to the firebase endpoint\n    const relatedUsersDataSource: Observable<Array<FirebaseListingItemModel>> = this.firebaseCrudService\n    .getRelatedUsersDataSource(combinedUserDataStore.state, userId);\n\n    const relatedUsersDataStore: DataStore<Array<FirebaseListingItemModel>> = this.firebaseCrudService\n    .getRelatedUsersStore(relatedUsersDataSource);\n\n    return {user: combinedUserDataStore, relatedUsers: relatedUsersDataStore};\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}