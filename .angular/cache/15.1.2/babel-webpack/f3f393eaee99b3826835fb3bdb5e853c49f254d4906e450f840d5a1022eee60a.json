{"ast":null,"code":"import { ShowcaseService } from '../../showcase.service';\nimport { ShowcaseShellUserModel } from '../../showcase-shell.model';\nimport { DataStore } from '../../../shell/data-store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"../../../shell/aspect-ratio/aspect-ratio.component\";\nimport * as i5 from \"../../../shell/image-shell/image-shell.component\";\nimport * as i6 from \"../../../shell/text-shell/text-shell.component\";\nconst _c0 = function () {\n  return {\n    w: 1,\n    h: 1\n  };\n};\nfunction DataStoreListPage_ion_item_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-thumbnail\", 1)(2, \"app-aspect-ratio\", 8);\n    i0.ɵɵelement(3, \"app-image-shell\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"ion-label\")(5, \"h2\", 10);\n    i0.ɵɵelement(6, \"app-text-shell\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"h3\", 12);\n    i0.ɵɵelement(8, \"app-text-shell\", 11);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const user_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(5, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", user_r1 == null ? null : user_r1.avatar)(\"alt\", \"Sample Image\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", user_r1 == null ? null : user_r1.first_name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"data\", user_r1 == null ? null : user_r1.last_name);\n  }\n}\nexport class DataStoreListPage {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n  }\n  get isShell() {\n    return this.data && this.data.isShell ? true : false;\n  }\n  ngOnInit() {\n    const dataSource = this.showcaseService.getListDataSource();\n    // Initialize the model specifying that it is a shell model\n    const shellModel = [new ShowcaseShellUserModel(), new ShowcaseShellUserModel(), new ShowcaseShellUserModel()];\n    this.dataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.dataStore.load(dataSource);\n    this.dataStore.state.subscribe(data => {\n      this.data = data;\n    });\n  }\n}\nDataStoreListPage.ɵfac = function DataStoreListPage_Factory(t) {\n  return new (t || DataStoreListPage)(i0.ɵɵdirectiveInject(i1.ShowcaseService));\n};\nDataStoreListPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataStoreListPage,\n  selectors: [[\"app-data-store-list\"]],\n  hostVars: 2,\n  hostBindings: function DataStoreListPage_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"is-shell\", ctx.isShell);\n    }\n  },\n  decls: 43,\n  vars: 1,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/app-shell\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [\"lines\", \"full\", 1, \"users-list\"], [4, \"ngFor\", \"ngForOf\"], [\"href\", \"https://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\", \"target\", \"_blank\"], [3, \"ratio\"], [\"animation\", \"spinner\", 3, \"src\", \"alt\"], [1, \"user-name\"], [\"animation\", \"bouncing\", 3, \"data\"], [1, \"user-lastname\"]],\n  template: function DataStoreListPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" DataStore - List example \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"p\");\n      i0.ɵɵtext(9, \" When you fetch data from a remote API, sometimes you request a list of items. If that\\u2019s the case you would end up having an \");\n      i0.ɵɵelementStart(10, \"b\");\n      i0.ɵɵtext(11, \"Observable\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \" of type \");\n      i0.ɵɵelementStart(13, \"code\");\n      i0.ɵɵtext(14, \"Observable<Array<YourModel>>\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \". \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17, \" The \");\n      i0.ɵɵelementStart(18, \"b\");\n      i0.ɵɵtext(19, \"DataStore\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(20, \" class works by assigning a shell property to any object. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"pre\");\n      i0.ɵɵtext(22, \"const myObj = new YourModel();\\nObject.assign(myObj, {isShell: false});\\n\\nObject.assign([1, 2, 3], {isShell: false});\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"p\");\n      i0.ɵɵtext(24, \" In Javascript, everything is an object (including Arrays). That\\u2019s why you can assign properties to Arrays independently of their values. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"ion-list\", 5);\n      i0.ɵɵtemplate(26, DataStoreListPage_ion_item_26_Template, 9, 6, \"ion-item\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"p\");\n      i0.ɵɵtext(28, \" In this example we keep track of the current state of the data stream in a local \");\n      i0.ɵɵelementStart(29, \"code\");\n      i0.ɵɵtext(30, \"data\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \" property. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"p\");\n      i0.ɵɵtext(33, \" Note how we define its type using \");\n      i0.ɵɵelementStart(34, \"a\", 7);\n      i0.ɵɵtext(35, \"Typescript intersection typing\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(36, \" like this \");\n      i0.ɵɵelementStart(37, \"code\");\n      i0.ɵɵtext(38, \"data: Array<YourModel> & ShellModel;\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(39, \" to indicate it's an array that has a shell model appended (by the \");\n      i0.ɵɵelementStart(40, \"b\");\n      i0.ɵɵtext(41, \"DataStore\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \"). \");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(26);\n      i0.ɵɵproperty(\"ngForOf\", ctx.data);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.IonBackButton, i3.IonButtons, i3.IonContent, i3.IonHeader, i3.IonItem, i3.IonLabel, i3.IonList, i3.IonThumbnail, i3.IonTitle, i3.IonToolbar, i3.IonBackButtonDelegate, i4.AspectRatioComponent, i5.ImageShellComponent, i6.TextShellComponent],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background);\\n}\\n.showcase-content[_ngcontent-%COMP%]   ion-item-divider[_ngcontent-%COMP%] {\\n  --background: var(--ion-color-secondary);\\n  --color: var(--ion-color-lightest);\\n  text-transform: uppercase;\\n  font-weight: 500;\\n  letter-spacing: 1px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 60px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  background: #CCC;\\n  padding: 10px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  color: #F92672;\\n  font-weight: 500;\\n}\\n\\n.users-list[_ngcontent-%COMP%]   ion-item[_ngcontent-%COMP%] {\\n  --padding-start: 0px;\\n}\\n\\n.user-name[_ngcontent-%COMP%]    > app-text-shell[_ngcontent-%COMP%] {\\n  --text-shell-line-height: 17px;\\n  max-width: 120px;\\n}\\n.user-name[_ngcontent-%COMP%]    > app-text-shell.text-loaded[_ngcontent-%COMP%] {\\n  max-width: inherit;\\n}\\n\\n.user-lastname[_ngcontent-%COMP%]    > app-text-shell[_ngcontent-%COMP%] {\\n  --text-shell-line-height: 14px;\\n  max-width: 120px;\\n}\\n.user-lastname[_ngcontent-%COMP%]    > app-text-shell.text-loaded[_ngcontent-%COMP%] {\\n  max-width: inherit;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvZGF0YS1zdG9yZS1saXN0L2RhdGEtc3RvcmUtbGlzdC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYXBwL3Nob3djYXNlL2FwcC1zaGVsbC9kYXRhLXN0b3JlLWxpc3QvZGF0YS1zdG9yZS1saXN0LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1DQUFBO0FDQ0Y7QURDRTtFQUNFLHdDQUFBO0VBQ0Esa0NBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUNDSjtBREVFO0VBQ0Usc0JBQUE7QUNBSjtBREdFO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtBQ0RKO0FESUU7RUFDRSxjQUFBO0VBQ0EsZ0JBQUE7QUNGSjs7QUNsQkU7RUFDRSxvQkFBQTtBRHFCSjs7QUNqQkE7RUFDRSw4QkFBQTtFQUNBLGdCQUFBO0FEb0JGO0FDbkJFO0VBQ0Usa0JBQUE7QURxQko7O0FDakJBO0VBQ0UsOEJBQUE7RUFDQSxnQkFBQTtBRG9CRjtBQ25CRTtFQUNFLGtCQUFBO0FEcUJKIiwic291cmNlc0NvbnRlbnQiOlsiLnNob3djYXNlLWNvbnRlbnQge1xuICAtLWJhY2tncm91bmQ6IHZhcigtLWFwcC1iYWNrZ3JvdW5kKTtcblxuICBpb24taXRlbS1kaXZpZGVyIHtcbiAgICAtLWJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1zZWNvbmRhcnkpO1xuICAgIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodGVzdCk7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIH1cblxuICAuc2hvd2Nhc2Utc2VjdGlvbiB7XG4gICAgbWFyZ2luOiAyMHB4IDIwcHggNjBweDtcbiAgfVxuXG4gIHByZSB7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGJhY2tncm91bmQ6ICNDQ0M7XG4gICAgcGFkZGluZzogMTBweDtcbiAgfVxuXG4gIGNvZGUge1xuICAgIGNvbG9yOiAjRjkyNjcyO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIH1cbn1cbiIsIi5zaG93Y2FzZS1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1hcHAtYmFja2dyb3VuZCk7XG59XG4uc2hvd2Nhc2UtY29udGVudCBpb24taXRlbS1kaXZpZGVyIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbiAgLS1jb2xvcjogdmFyKC0taW9uLWNvbG9yLWxpZ2h0ZXN0KTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbn1cbi5zaG93Y2FzZS1jb250ZW50IC5zaG93Y2FzZS1zZWN0aW9uIHtcbiAgbWFyZ2luOiAyMHB4IDIwcHggNjBweDtcbn1cbi5zaG93Y2FzZS1jb250ZW50IHByZSB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgYmFja2dyb3VuZDogI0NDQztcbiAgcGFkZGluZzogMTBweDtcbn1cbi5zaG93Y2FzZS1jb250ZW50IGNvZGUge1xuICBjb2xvcjogI0Y5MjY3MjtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuLnVzZXJzLWxpc3QgaW9uLWl0ZW0ge1xuICAtLXBhZGRpbmctc3RhcnQ6IDBweDtcbn1cblxuLnVzZXItbmFtZSA+IGFwcC10ZXh0LXNoZWxsIHtcbiAgLS10ZXh0LXNoZWxsLWxpbmUtaGVpZ2h0OiAxN3B4O1xuICBtYXgtd2lkdGg6IDEyMHB4O1xufVxuLnVzZXItbmFtZSA+IGFwcC10ZXh0LXNoZWxsLnRleHQtbG9hZGVkIHtcbiAgbWF4LXdpZHRoOiBpbmhlcml0O1xufVxuXG4udXNlci1sYXN0bmFtZSA+IGFwcC10ZXh0LXNoZWxsIHtcbiAgLS10ZXh0LXNoZWxsLWxpbmUtaGVpZ2h0OiAxNHB4O1xuICBtYXgtd2lkdGg6IDEyMHB4O1xufVxuLnVzZXItbGFzdG5hbWUgPiBhcHAtdGV4dC1zaGVsbC50ZXh0LWxvYWRlZCB7XG4gIG1heC13aWR0aDogaW5oZXJpdDtcbn0iLCJAaW1wb3J0IFwiLi4vYXBwLXNoZWxsLnBhZ2VcIjtcblxuLnVzZXJzLWxpc3Qge1xuICBpb24taXRlbSB7XG4gICAgLS1wYWRkaW5nLXN0YXJ0OiAwcHg7XG4gIH1cbn1cblxuLnVzZXItbmFtZSA+IGFwcC10ZXh0LXNoZWxsIHtcbiAgLS10ZXh0LXNoZWxsLWxpbmUtaGVpZ2h0OiAxN3B4O1xuICBtYXgtd2lkdGg6IDEyMHB4O1xuICAmLnRleHQtbG9hZGVkIHtcbiAgICBtYXgtd2lkdGg6IGluaGVyaXQ7XG4gIH1cbn1cblxuLnVzZXItbGFzdG5hbWUgPiBhcHAtdGV4dC1zaGVsbCB7XG4gIC0tdGV4dC1zaGVsbC1saW5lLWhlaWdodDogMTRweDtcbiAgbWF4LXdpZHRoOiAxMjBweDtcbiAgJi50ZXh0LWxvYWRlZCB7XG4gICAgbWF4LXdpZHRoOiBpbmhlcml0O1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,wBAAwB;AACxD,SAASC,sBAAsB,QAAQ,4BAA4B;AACnE,SAASC,SAAS,QAAoB,2BAA2B;;;;;;;;;;;;;;;;IC0B3DC,gCAAoC;IAG9BA,qCAAmG;IACrGA,iBAAmB;IAErBA,iCAAW;IAEPA,qCAAgF;IAClFA,iBAAK;IACLA,8BAA0B;IACxBA,qCAA+E;IACjFA,iBAAK;;;;IAVaA,eAAoB;IAApBA,kDAAoB;IACCA,eAAoB;IAApBA,6DAAoB;IAKzCA,eAAyB;IAAzBA,kEAAyB;IAGzBA,eAAwB;IAAxBA,iEAAwB;;;AD9BpD,OAAM,MAAOC,iBAAiB;EAS5BC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;EAAqB;EAJxD,IAAmCC,OAAO;IACxC,OAAQ,IAAI,CAACC,IAAI,IAAI,IAAI,CAACA,IAAI,CAACD,OAAO,GAAI,IAAI,GAAG,KAAK;EACxD;EAIAE,QAAQ;IACN,MAAMC,UAAU,GAAG,IAAI,CAACJ,eAAe,CAACK,iBAAiB,EAAE;IAE3D;IACA,MAAMC,UAAU,GAAkC,CAChD,IAAIX,sBAAsB,EAAE,EAC5B,IAAIA,sBAAsB,EAAE,EAC5B,IAAIA,sBAAsB,EAAE,CAC7B;IACD,IAAI,CAACY,SAAS,GAAG,IAAIX,SAAS,CAACU,UAAU,CAAC;IAC1C;IACA,IAAI,CAACC,SAAS,CAACC,IAAI,CAACJ,UAAU,CAAC;IAE/B,IAAI,CAACG,SAAS,CAACE,KAAK,CAACC,SAAS,CAACR,IAAI,IAAG;MACpC,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC,CAAC;EACJ;;AA3BWJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAa;EAAAC;EAAAC;IAAA;;;;;;;;;MCV9BhB,kCAAY;MAGNA,qCAAoE;MACtEA,iBAAc;MACdA,iCAAW;MACTA,0CACF;MAAAA,iBAAY;MAIhBA,sCAAsC;MAGhCA,kJAA4H;MAAAA,0BAAG;MAAAA,2BAAU;MAAAA,iBAAI;MAACA,0BAAQ;MAAAA,6BAAM;MAAAA,6CAAwC;MAAAA,iBAAO;MAAAA,mBAC7M;MAAAA,iBAAI;MACJA,0BAAG;MACDA,sBAAI;MAAAA,0BAAG;MAAAA,0BAAS;MAAAA,iBAAI;MAACA,2EACvB;MAAAA,iBAAI;MACRA,4BAAK;MACLA,yIAIA;MAAAA,iBAAM;MACFA,0BAAG;MACDA,gKACF;MAAAA,iBAAI;MACJA,oCAA0C;MACxCA,8EAcW;MACbA,iBAAW;MACXA,0BAAG;MACDA,mGAAiF;MAAAA,6BAAM;MAAAA,qBAAI;MAAAA,iBAAO;MAACA,4BACrG;MAAAA,iBAAI;MACJA,0BAAG;MACDA,oDAAkC;MAAAA,6BAA8G;MAAAA,+CAA8B;MAAAA,iBAAI;MAACA,4BAAU;MAAAA,6BAAM;MAAAA,qDAA0C;MAAAA,iBAAO;MACpPA,oFAAkE;MAAAA,0BAAG;MAAAA,0BAAS;MAAAA,iBAAI;MAAAA,oBACpF;MAAAA,iBAAI;;;MAtByBA,gBAAO;MAAPA,kCAAO","names":["ShowcaseService","ShowcaseShellUserModel","DataStore","i0","DataStoreListPage","constructor","showcaseService","isShell","data","ngOnInit","dataSource","getListDataSource","shellModel","dataStore","load","state","subscribe","selectors","hostVars","hostBindings"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-list/data-store-list.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-list/data-store-list.page.html"],"sourcesContent":["import { Component, OnInit, HostBinding } from '@angular/core';\nimport { ShowcaseService } from '../../showcase.service';\nimport { ShowcaseShellUserModel } from '../../showcase-shell.model';\nimport { DataStore, ShellModel } from '../../../shell/data-store';\n\n@Component({\n  selector: 'app-data-store-list',\n  templateUrl: './data-store-list.page.html',\n  styleUrls: ['./data-store-list.page.scss'],\n})\nexport class DataStoreListPage implements OnInit {\n\n  dataStore: DataStore<Array<ShowcaseShellUserModel>>;\n  data: Array<ShowcaseShellUserModel> & ShellModel;\n\n  @HostBinding('class.is-shell') get isShell() {\n    return (this.data && this.data.isShell) ? true : false;\n  }\n\n  constructor(private showcaseService: ShowcaseService) { }\n\n  ngOnInit() {\n    const dataSource = this.showcaseService.getListDataSource();\n\n    // Initialize the model specifying that it is a shell model\n    const shellModel: Array<ShowcaseShellUserModel> = [\n      new ShowcaseShellUserModel(),\n      new ShowcaseShellUserModel(),\n      new ShowcaseShellUserModel()\n    ];\n    this.dataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.dataStore.load(dataSource);\n\n    this.dataStore.state.subscribe(data => {\n      this.data = data;\n    });\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/app-shell\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      DataStore - List example\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      When you fetch data from a remote API, sometimes you request a list of items. If that’s the case you would end up having an <b>Observable</b> of type <code>Observable&lt;Array&lt;YourModel&gt;&gt;</code>.\n    </p>\n    <p>\n      The <b>DataStore</b> class works by assigning a shell property to any object.\n    </p>\n<pre>\nconst myObj = new YourModel();\nObject.assign(myObj, &#123;isShell: false&#125;);\n\nObject.assign([1, 2, 3], &#123;isShell: false&#125;);\n</pre>\n    <p>\n      In Javascript, everything is an object (including Arrays). That’s why you can assign properties to Arrays independently of their values.\n    </p>\n    <ion-list lines=\"full\" class=\"users-list\">\n      <ion-item *ngFor=\"let user of data\">\n        <ion-thumbnail slot=\"start\">\n          <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n            <app-image-shell animation=\"spinner\" [src]=\"user?.avatar\" [alt]=\"'Sample Image'\"></app-image-shell>\n          </app-aspect-ratio>\n        </ion-thumbnail>\n        <ion-label>\n          <h2 class=\"user-name\">\n            <app-text-shell [data]=\"user?.first_name\" animation=\"bouncing\"></app-text-shell>\n          </h2>\n          <h3 class=\"user-lastname\">\n            <app-text-shell [data]=\"user?.last_name\" animation=\"bouncing\"></app-text-shell>\n          </h3>\n        </ion-label>\n      </ion-item>\n    </ion-list>\n    <p>\n      In this example we keep track of the current state of the data stream in a local <code>data</code> property.\n    </p>\n    <p>\n      Note how we define its type using <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\" target=\"_blank\">Typescript intersection typing</a> like this <code>data: Array&lt;YourModel&gt; & ShellModel;</code>\n      to indicate it's an array that has a shell model appended (by the <b>DataStore</b>).\n    </p>\n  </section>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}