{"ast":null,"code":"import _asyncToGenerator from \"/Users/teeicloud/TitanEstates/Titan Estates/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { LoadingController } from '@ionic/angular';\nimport { defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { ShowcaseService } from '../../showcase.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@ionic/angular\";\nexport class BlockingResolver {\n  constructor(showcaseService, loadingController) {\n    this.showcaseService = showcaseService;\n    this.loadingController = loadingController;\n  }\n  presentLoader() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loadingElement = yield _this.loadingController.create({\n        message: 'Loading ...'\n      });\n      yield _this.loadingElement.present();\n    })();\n  }\n  dismissLoader() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.loadingElement) {\n        yield _this2.loadingElement.dismiss();\n      }\n    })();\n  }\n  resolve() {\n    // WITHOUT LOADING INDICATOR\n    // Base Observable (where we get data from)\n    // const dataObservable = this.showcaseService.getData();\n    // Basic Resolver that returns the base Observable\n    // return dataObservable;\n    // WITH LOADING INDICATOR\n    // Base Observable (where we get data from)\n    const dataObservable = this.showcaseService.getDataSourceWithDelay().pipe(finalize(() => {\n      console.log('dataObservable COMPLETED - HIDE LOADER');\n      this.dismissLoader();\n    }));\n    const deferedObservable = defer(() => {\n      // Will be logged at the moment of subscription\n      console.log('dataObservable STARTED - SHOW LOADER');\n      this.presentLoader();\n      return dataObservable;\n    });\n    // Basic Resolver that returns the base Observable\n    return deferedObservable;\n  }\n}\nBlockingResolver.ɵfac = function BlockingResolver_Factory(t) {\n  return new (t || BlockingResolver)(i0.ɵɵinject(i1.ShowcaseService), i0.ɵɵinject(i2.LoadingController));\n};\nBlockingResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlockingResolver,\n  factory: BlockingResolver.ɵfac\n});","map":{"version":3,"mappings":";AAEA,SAASA,iBAAiB,QAAQ,gBAAgB;AAElD,SAASC,KAAK,QAAQ,MAAM;AAC5B,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,SAASC,eAAe,QAAQ,wBAAwB;;;;AAGxD,OAAM,MAAOC,gBAAgB;EAG3BC,YACUC,eAAgC,EAChCC,iBAAoC;IADpC,oBAAe,GAAfD,eAAe;IACf,sBAAiB,GAAjBC,iBAAiB;EACvB;EAEEC,aAAa;IAAA;IAAA;MACjB,KAAI,CAACC,cAAc,SAAS,KAAI,CAACF,iBAAiB,CAACG,MAAM,CAAC;QACxDC,OAAO,EAAE;OACV,CAAC;MAEF,MAAM,KAAI,CAACF,cAAc,CAACG,OAAO,EAAE;IAAC;EACtC;EAEMC,aAAa;IAAA;IAAA;MACjB,IAAI,MAAI,CAACJ,cAAc,EAAE;QACvB,MAAM,MAAI,CAACA,cAAc,CAACK,OAAO,EAAE;;IACpC;EACH;EAEAC,OAAO;IACL;IAEA;IACA;IAEA;IACA;IAGA;IAEA;IACA,MAAMC,cAAc,GAAG,IAAI,CAACV,eAAe,CAACW,sBAAsB,EAAE,CAACC,IAAI,CACvEhB,QAAQ,CAAC,MAAK;MACZiB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD,IAAI,CAACP,aAAa,EAAE;IACtB,CAAC,CAAC,CACH;IAED,MAAMQ,iBAAiB,GAAGpB,KAAK,CAAC,MAAK;MACnC;MACAkB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD,IAAI,CAACZ,aAAa,EAAE;MACpB,OAAOQ,cAAc;IACvB,CAAC,CAAC;IAEF;IACA,OAAOK,iBAAiB;EAC1B;;AAnDWjB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAkB,SAAhBlB,gBAAgB;AAAA","names":["LoadingController","defer","finalize","ShowcaseService","BlockingResolver","constructor","showcaseService","loadingController","presentLoader","loadingElement","create","message","present","dismissLoader","dismiss","resolve","dataObservable","getDataSourceWithDelay","pipe","console","log","deferedObservable","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/route-resolvers-ux/blocking-resolvers/blocking.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { LoadingController } from '@ionic/angular';\n\nimport { defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { ShowcaseService } from '../../showcase.service';\n\n@Injectable()\nexport class BlockingResolver implements Resolve<any> {\n  private loadingElement: any;\n\n  constructor(\n    private showcaseService: ShowcaseService,\n    private loadingController: LoadingController\n  ) { }\n\n  async presentLoader() {\n    this.loadingElement = await this.loadingController.create({\n      message: 'Loading ...'\n    });\n\n    await this.loadingElement.present();\n  }\n\n  async dismissLoader() {\n    if (this.loadingElement) {\n      await this.loadingElement.dismiss();\n    }\n  }\n\n  resolve() {\n    // WITHOUT LOADING INDICATOR\n\n    // Base Observable (where we get data from)\n    // const dataObservable = this.showcaseService.getData();\n\n    // Basic Resolver that returns the base Observable\n    // return dataObservable;\n\n\n    // WITH LOADING INDICATOR\n\n    // Base Observable (where we get data from)\n    const dataObservable = this.showcaseService.getDataSourceWithDelay().pipe(\n      finalize(() => {\n        console.log('dataObservable COMPLETED - HIDE LOADER');\n        this.dismissLoader();\n      })\n    );\n\n    const deferedObservable = defer(() => {\n      // Will be logged at the moment of subscription\n      console.log('dataObservable STARTED - SHOW LOADER');\n      this.presentLoader();\n      return dataObservable;\n    });\n\n    // Basic Resolver that returns the base Observable\n    return deferedObservable;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}