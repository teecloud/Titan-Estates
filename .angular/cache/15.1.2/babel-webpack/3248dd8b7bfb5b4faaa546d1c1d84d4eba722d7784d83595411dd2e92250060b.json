{"ast":null,"code":"import { isPlatformServer } from '@angular/common';\nimport { PLATFORM_ID } from '@angular/core';\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport var ImageShellState;\n(function (ImageShellState) {\n  ImageShellState[\"SSR\"] = \"ssr-loaded\";\n  ImageShellState[\"BROWSER_FROM_SSR\"] = \"browser-loaded-from-ssr\";\n  ImageShellState[\"NOT_FOUND\"] = \"not-found\";\n})(ImageShellState || (ImageShellState = {}));\nexport class TransferStateHelper {\n  constructor(platformId, state) {\n    this.platformId = platformId;\n    this.state = state;\n  }\n  // Method with generic param\n  checkDataSourceState(stateKey, dataSource) {\n    const dataKey = makeStateKey(stateKey);\n    if (isPlatformServer(this.platformId)) {\n      // When loading resource in the server, store the result in the TransferState\n      // to use when transitioning to the browser from the SSR rendered app\n      return dataSource.pipe(tap(data => {\n        this.state.set(dataKey, data);\n      }));\n    } else {\n      // Check if we have data in the TransferState\n      if (this.state.hasKey(dataKey)) {\n        const stateData = this.state.get(dataKey, null);\n        if (stateData && stateData !== null) {\n          const cachedDataSource = of(stateData);\n          // After using it, remove data from state\n          // this.state.remove(dataKey);\n          // Set a flag to track if the dataSource is being cached in the server state or not\n          Object.assign(cachedDataSource, {\n            ssr_state: true\n          });\n          return cachedDataSource;\n        } else {\n          return dataSource;\n        }\n      } else {\n        return dataSource;\n      }\n    }\n  }\n  // This method checks if a specific image was previously handled in the server\n  checkImageShellState(stateKey, imageSource) {\n    let imageState = ImageShellState.NOT_FOUND;\n    // Make sure we are not dealing with empty image sources\n    if (imageSource !== '') {\n      // We will store a collection of image sources in the state\n      const dataKey = makeStateKey(stateKey);\n      if (isPlatformServer(this.platformId)) {\n        // When loading resource in the server, store the result in the TransferState\n        // to use when transitioning to the browser from the SSR rendered app\n        const stateImages = this.state.get(dataKey, []);\n        stateImages.push(imageSource);\n        this.state.set(dataKey, stateImages);\n        // Running in the server, in this execution the image is set in the transfer state for the first time\n        imageState = ImageShellState.SSR;\n      } else {\n        // Check if we have data in the TransferState\n        if (this.state.hasKey(dataKey)) {\n          const stateData = this.state.get(dataKey, []);\n          // Check if the image was previously loaded in the server\n          if (stateData.includes(imageSource)) {\n            imageState = ImageShellState.BROWSER_FROM_SSR;\n          }\n        }\n      }\n    }\n    return imageState;\n  }\n}\nTransferStateHelper.ɵfac = function TransferStateHelper_Factory(t) {\n  return new (t || TransferStateHelper)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.TransferState));\n};\nTransferStateHelper.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransferStateHelper,\n  factory: TransferStateHelper.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iBAAiB;AAClD,SAA6BC,WAAW,QAAQ,eAAe;AAC/D,SAASC,YAAY,EAAEC,aAAa,QAAQ,2BAA2B;AACvE,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC,WAAYC,eAIX;AAJD,WAAYA,eAAe;EACzBA,qCAAkB;EAClBA,+DAA4C;EAC5CA,0CAAuB;AACzB,CAAC,EAJWA,eAAe,KAAfA,eAAe;AAS3B,OAAM,MAAOC,mBAAmB;EAE9BC,YAC+BC,UAAkB,EACvCC,KAAoB;IADC,eAAU,GAAVD,UAAU;IAC/B,UAAK,GAALC,KAAK;EACX;EAEJ;EACAC,oBAAoB,CAAIC,QAAgB,EAAEC,UAAyB;IACjE,MAAMC,OAAO,GAAGZ,YAAY,CAAIU,QAAQ,CAAC;IAEzC,IAAIZ,gBAAgB,CAAC,IAAI,CAACS,UAAU,CAAC,EAAE;MACrC;MACA;MACA,OAAOI,UAAU,CAACE,IAAI,CACpBV,GAAG,CACAW,IAAO,IAAI;QACV,IAAI,CAACN,KAAK,CAACO,GAAG,CAACH,OAAO,EAAEE,IAAI,CAAC;MAC/B,CAAC,CACF,CACF;KACF,MAAM;MACL;MACA,IAAI,IAAI,CAACN,KAAK,CAACQ,MAAM,CAACJ,OAAO,CAAC,EAAE;QAC9B,MAAMK,SAAS,GAAG,IAAI,CAACT,KAAK,CAACU,GAAG,CAACN,OAAO,EAAE,IAAI,CAAC;QAE/C,IAAIK,SAAS,IAAIA,SAAS,KAAK,IAAI,EAAE;UACnC,MAAME,gBAAgB,GAAGjB,EAAE,CAACe,SAAS,CAAC;UAEtC;UACA;UAEA;UACAG,MAAM,CAACC,MAAM,CAACF,gBAAgB,EAAE;YAACG,SAAS,EAAE;UAAI,CAAC,CAAC;UAElD,OAAOH,gBAAgB;SACxB,MAAM;UACL,OAAOR,UAAU;;OAEpB,MAAM;QACL,OAAOA,UAAU;;;EAGvB;EAEA;EACAY,oBAAoB,CAACb,QAAgB,EAAEc,WAAmB;IACxD,IAAIC,UAAU,GAAoBrB,eAAe,CAACsB,SAAS;IAE3D;IACA,IAAIF,WAAW,KAAK,EAAE,EAAE;MACtB;MACA,MAAMZ,OAAO,GAAGZ,YAAY,CAAgBU,QAAQ,CAAC;MAErD,IAAIZ,gBAAgB,CAAC,IAAI,CAACS,UAAU,CAAC,EAAE;QACrC;QACA;QAEA,MAAMoB,WAAW,GAAG,IAAI,CAACnB,KAAK,CAACU,GAAG,CAACN,OAAO,EAAE,EAAE,CAAC;QAC/Ce,WAAW,CAACC,IAAI,CAACJ,WAAW,CAAC;QAE7B,IAAI,CAAChB,KAAK,CAACO,GAAG,CAACH,OAAO,EAAEe,WAAW,CAAC;QAEpC;QACAF,UAAU,GAAGrB,eAAe,CAACyB,GAAG;OACjC,MAAM;QACL;QACA,IAAI,IAAI,CAACrB,KAAK,CAACQ,MAAM,CAACJ,OAAO,CAAC,EAAE;UAC9B,MAAMK,SAAS,GAAG,IAAI,CAACT,KAAK,CAACU,GAAG,CAACN,OAAO,EAAE,EAAE,CAAC;UAE7C;UACA,IAAIK,SAAS,CAACa,QAAQ,CAACN,WAAW,CAAC,EAAE;YACnCC,UAAU,GAAGrB,eAAe,CAAC2B,gBAAgB;;;;;IAMrD,OAAON,UAAU;EACnB;;AA/EWpB,mBAAmB;mBAAnBA,mBAAmB,cAGpBN,WAAW;AAAA;AAHVM,mBAAmB;SAAnBA,mBAAmB;EAAA2B,SAAnB3B,mBAAmB;EAAA4B,YAFlB;AAAM","names":["isPlatformServer","PLATFORM_ID","makeStateKey","TransferState","of","tap","ImageShellState","TransferStateHelper","constructor","platformId","state","checkDataSourceState","stateKey","dataSource","dataKey","pipe","data","set","hasKey","stateData","get","cachedDataSource","Object","assign","ssr_state","checkImageShellState","imageSource","imageState","NOT_FOUND","stateImages","push","SSR","includes","BROWSER_FROM_SSR","factory","providedIn"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/utils/transfer-state-helper.ts"],"sourcesContent":["import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport enum ImageShellState {\n  SSR = 'ssr-loaded',\n  BROWSER_FROM_SSR = 'browser-loaded-from-ssr',\n  NOT_FOUND = 'not-found'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransferStateHelper {\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private state: TransferState,\n  ) { }\n\n  // Method with generic param\n  checkDataSourceState<T>(stateKey: string, dataSource: Observable<T>): Observable<T> {\n    const dataKey = makeStateKey<T>(stateKey);\n\n    if (isPlatformServer(this.platformId)) {\n      // When loading resource in the server, store the result in the TransferState\n      // to use when transitioning to the browser from the SSR rendered app\n      return dataSource.pipe(\n        tap(\n          (data: T) => {\n            this.state.set(dataKey, data);\n          }\n        )\n      );\n    } else {\n      // Check if we have data in the TransferState\n      if (this.state.hasKey(dataKey)) {\n        const stateData = this.state.get(dataKey, null);\n\n        if (stateData && stateData !== null) {\n          const cachedDataSource = of(stateData);\n\n          // After using it, remove data from state\n          // this.state.remove(dataKey);\n\n          // Set a flag to track if the dataSource is being cached in the server state or not\n          Object.assign(cachedDataSource, {ssr_state: true});\n\n          return cachedDataSource;\n        } else {\n          return dataSource;\n        }\n      } else {\n        return dataSource;\n      }\n    }\n  }\n\n  // This method checks if a specific image was previously handled in the server\n  checkImageShellState(stateKey: string, imageSource: string): ImageShellState {\n    let imageState: ImageShellState = ImageShellState.NOT_FOUND;\n\n    // Make sure we are not dealing with empty image sources\n    if (imageSource !== '') {\n      // We will store a collection of image sources in the state\n      const dataKey = makeStateKey<Array<string>>(stateKey);\n\n      if (isPlatformServer(this.platformId)) {\n        // When loading resource in the server, store the result in the TransferState\n        // to use when transitioning to the browser from the SSR rendered app\n\n        const stateImages = this.state.get(dataKey, []);\n        stateImages.push(imageSource);\n\n        this.state.set(dataKey, stateImages);\n\n        // Running in the server, in this execution the image is set in the transfer state for the first time\n        imageState = ImageShellState.SSR;\n      } else {\n        // Check if we have data in the TransferState\n        if (this.state.hasKey(dataKey)) {\n          const stateData = this.state.get(dataKey, []);\n\n          // Check if the image was previously loaded in the server\n          if (stateData.includes(imageSource)) {\n            imageState = ImageShellState.BROWSER_FROM_SSR;\n          }\n        }\n      }\n    }\n\n    return imageState;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}