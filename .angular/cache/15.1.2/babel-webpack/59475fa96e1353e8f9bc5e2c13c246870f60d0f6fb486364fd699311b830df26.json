{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/auth';\nimport { user } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { VERSION } from '@angular/fire';\nconst loggedIn = map(user => !!user);\nclass AuthGuard {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n    this.canActivate = (next, state) => {\n      const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n      return user(this.auth).pipe(take(1), authPipeFactory(next, state), map(can => {\n        if (typeof can === 'boolean') {\n          return can;\n        } else if (Array.isArray(can)) {\n          return this.router.createUrlTree(can);\n        } else {\n          // TODO(EdricChan03): Add tests\n          return this.router.parseUrl(can);\n        }\n      }));\n    };\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Auth));\n};\nAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'any'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.Auth\n    }];\n  }, null);\n})();\nconst canActivate = pipe => ({\n  canActivate: [AuthGuard],\n  data: {\n    authGuardPipe: pipe\n  }\n});\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap(user => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nconst hasCustomClaim = claim => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\nconst redirectUnauthorizedTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nconst redirectLoggedInTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\nclass AuthGuardModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth-guard');\n  }\n}\nAuthGuardModule.ɵfac = function AuthGuardModule_Factory(t) {\n  return new (t || AuthGuardModule)();\n};\nAuthGuardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthGuardModule\n});\nAuthGuardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AuthGuard]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuardModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AuthGuard]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AuthGuard, AuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };","map":{"version":3,"names":["i0","Injectable","NgModule","i1","of","pipe","map","take","switchMap","i2","user","registerVersion","VERSION","loggedIn","AuthGuard","constructor","router","auth","canActivate","next","state","authPipeFactory","data","authGuardPipe","can","Array","isArray","createUrlTree","parseUrl","ɵfac","Router","Auth","ɵprov","type","args","providedIn","isNotAnonymous","isAnonymous","idTokenResult","getIdTokenResult","emailVerified","customClaims","claims","hasCustomClaim","claim","hasOwnProperty","redirectUnauthorizedTo","redirect","redirectLoggedInTo","AuthGuardModule","full","ɵmod","ɵinj","providers"],"sources":["/Users/teeicloud/TitanEstates/Titan Estates/node_modules/@angular/fire/fesm2015/angular-fire-auth-guard.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/auth';\nimport { user } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { VERSION } from '@angular/fire';\n\nconst loggedIn = map(user => !!user);\nclass AuthGuard {\n    constructor(router, auth) {\n        this.router = router;\n        this.auth = auth;\n        this.canActivate = (next, state) => {\n            const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n            return user(this.auth).pipe(take(1), authPipeFactory(next, state), map(can => {\n                if (typeof can === 'boolean') {\n                    return can;\n                }\n                else if (Array.isArray(can)) {\n                    return this.router.createUrlTree(can);\n                }\n                else {\n                    // TODO(EdricChan03): Add tests\n                    return this.router.parseUrl(can);\n                }\n            }));\n        };\n    }\n}\nAuthGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuard, deps: [{ token: i1.Router }, { token: i2.Auth }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuard, providedIn: 'any' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.Auth }]; } });\nconst canActivate = (pipe) => ({\n    canActivate: [AuthGuard], data: { authGuardPipe: pipe }\n});\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap((user) => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nconst hasCustomClaim = (claim) => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\nconst redirectUnauthorizedTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nconst redirectLoggedInTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n\nclass AuthGuardModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'auth-guard');\n    }\n}\nAuthGuardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAuthGuardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule });\nAuthGuardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule, providers: [AuthGuard] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [AuthGuard]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AuthGuard, AuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}