{"ast":null,"code":"export class PasswordValidator {\n  // If our validation fails, we return an object with a key for the error name and a value of true.\n  // Otherwise, if the validation passes, we simply return null because there is no error.\n  static areNotEqual(formGroup) {\n    let firstControlValue;\n    let valid = true;\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control = formGroup.controls[key];\n        if (firstControlValue === undefined) {\n          firstControlValue = control.value;\n        } else {\n          // check if the value of the first control is equal to the value of the second control\n          if (firstControlValue !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n    if (valid) {\n      return null;\n    }\n    return {\n      areNotEqual: true\n    };\n  }\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,iBAAiB;EAE5B;EACA;EAEA,OAAOC,WAAW,CAACC,SAA2B;IAC5C,IAAIC,iBAAsB;IAC1B,IAAIC,KAAK,GAAG,IAAI;IAEhB,KAAK,MAAMC,GAAG,IAAIH,SAAS,CAACI,QAAQ,EAAE;MACpC,IAAIJ,SAAS,CAACI,QAAQ,CAACC,cAAc,CAACF,GAAG,CAAC,EAAE;QAC1C,MAAMG,OAAO,GAA2CN,SAAS,CAACI,QAAQ,CAACD,GAAG,CAAC;QAE/E,IAAIF,iBAAiB,KAAKM,SAAS,EAAE;UACnCN,iBAAiB,GAAGK,OAAO,CAACE,KAAK;SAClC,MAAM;UACL;UACA,IAAIP,iBAAiB,KAAKK,OAAO,CAACE,KAAK,EAAE;YACvCN,KAAK,GAAG,KAAK;YACb;;;;;IAMR,IAAIA,KAAK,EAAE;MACT,OAAO,IAAI;;IAGb,OAAO;MACLH,WAAW,EAAE;KACd;EACH","names":["PasswordValidator","areNotEqual","formGroup","firstControlValue","valid","key","controls","hasOwnProperty","control","undefined","value"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/validators/password.validator.ts"],"sourcesContent":["import { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n\n  // If our validation fails, we return an object with a key for the error name and a value of true.\n  // Otherwise, if the validation passes, we simply return null because there is no error.\n\n  static areNotEqual(formGroup: UntypedFormGroup) {\n    let firstControlValue: any;\n    let valid = true;\n\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control: UntypedFormControl = <UntypedFormControl>formGroup.controls[key];\n\n        if (firstControlValue === undefined) {\n          firstControlValue = control.value;\n        } else {\n          // check if the value of the first control is equal to the value of the second control\n          if (firstControlValue !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areNotEqual: true\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}