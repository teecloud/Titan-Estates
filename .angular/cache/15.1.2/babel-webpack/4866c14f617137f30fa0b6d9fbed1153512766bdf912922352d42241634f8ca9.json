{"ast":null,"code":"import { ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"../../../shell/aspect-ratio/aspect-ratio.component\";\nfunction NonBlockingResolversPage_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelement(2, \"ion-spinner\");\n    i0.ɵɵelementStart(3, \"p\")(4, \"b\");\n    i0.ɵɵtext(5, \"You can show a static shell while fetching data from the backend\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"background-image\": a0\n  };\n};\nconst _c1 = function () {\n  return {\n    w: 2,\n    h: 1\n  };\n};\nconst _c2 = function () {\n  return {\n    w: 1,\n    h: 1\n  };\n};\nfunction NonBlockingResolversPage_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-row\", 7)(2, \"ion-col\", 8)(3, \"div\", 9)(4, \"app-aspect-ratio\", 10)(5, \"h4\", 11);\n    i0.ɵɵtext(6, \"Heading on top of a cover image\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(7, \"ion-col\", 12)(8, \"app-aspect-ratio\", 10);\n    i0.ɵɵelement(9, \"img\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"ion-col\", 14)(11, \"h3\", 15);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(6, _c0, \"url(\" + (ctx_r1.routeResolveData == null ? null : ctx_r1.routeResolveData.cover) + \")\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(8, _c1));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(9, _c2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r1.routeResolveData == null ? null : ctx_r1.routeResolveData.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.routeResolveData == null ? null : ctx_r1.routeResolveData.title, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.routeResolveData == null ? null : ctx_r1.routeResolveData.description, \" \");\n  }\n}\nexport class NonBlockingResolversPage {\n  constructor(route) {\n    this.route = route;\n  }\n  ngOnInit() {\n    console.log('Showcase NON Blocking Resovlers - ngOnInit()');\n    if (this.route && this.route.data) {\n      // We resolved a promise for the data Observable\n      const promiseObservable = this.route.data;\n      console.log('Showcase NON Blocking Resovlers - Route Resolve Observable => promiseObservable: ', promiseObservable);\n      if (promiseObservable) {\n        promiseObservable.subscribe(promiseValue => {\n          const dataObservable = promiseValue['data'];\n          console.log('Showcase NON Blocking Resovlers - Subscribe to promiseObservable => dataObservable: ', dataObservable);\n          if (dataObservable) {\n            dataObservable.subscribe(observableValue => {\n              const pageData = observableValue;\n              // eslint-disable-next-line max-len\n              console.log('Showcase NON Blocking Resovlers - Subscribe to dataObservable (will emmit just one value) => PageData (' + (pageData && pageData.isShell ? 'SHELL' : 'REAL') + '): ', pageData);\n              if (pageData) {\n                this.routeResolveData = pageData;\n              }\n            });\n          } else {\n            console.warn('No dataObservable coming from Route Resolver promiseObservable');\n          }\n        });\n      } else {\n        console.warn('No promiseObservable coming from Route Resolver data');\n      }\n    } else {\n      console.warn('No data coming from Route Resolver');\n    }\n  }\n}\nNonBlockingResolversPage.ɵfac = function NonBlockingResolversPage_Factory(t) {\n  return new (t || NonBlockingResolversPage)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\nNonBlockingResolversPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NonBlockingResolversPage,\n  selectors: [[\"app-showcase-non-blocking-resolvers\"]],\n  decls: 12,\n  vars: 2,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/route-resolvers-ux\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [4, \"ngIf\"], [2, \"margin\", \"20px 40px\", \"text-align\", \"center\"], [2, \"background-color\", \"#FFF\", \"padding\", \"10px\"], [\"size\", \"12\"], [2, \"background-size\", \"cover\", \"background-repeat\", \"no-repeat\", 3, \"ngStyle\"], [3, \"ratio\"], [2, \"margin\", \"10px\", \"text-align\", \"center\", \"color\", \"#FFF\"], [\"size\", \"4\"], [\"alt\", \"Sample Image\", 2, \"width\", \"100%\", \"height\", \"100%\", 3, \"src\"], [\"size\", \"8\"], [2, \"margin-top\", \"0px\"]],\n  template: function NonBlockingResolversPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" NON Blocking Resovler Showcase \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"p\");\n      i0.ɵɵtext(9, \" With Non-Blocking Resolvers, page transition is immediate. However UX degrades because you are showing a static loading indicator while the server sends data back to the client. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, NonBlockingResolversPage_ng_container_10_Template, 6, 0, \"ng-container\", 5);\n      i0.ɵɵtemplate(11, NonBlockingResolversPage_ng_container_11_Template, 15, 10, \"ng-container\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngIf\", !ctx.routeResolveData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.routeResolveData);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgStyle, i3.IonBackButton, i3.IonButtons, i3.IonCol, i3.IonContent, i3.IonHeader, i3.IonRow, i3.IonSpinner, i3.IonTitle, i3.IonToolbar, i3.IonBackButtonDelegate, i4.AspectRatioComponent],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background-shade);\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 100px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2Uvcm91dGUtcmVzb2x2ZXJzLXV4L25vbi1ibG9ja2luZy1yZXNvbHZlcnMvbm9uLWJsb2NraW5nLXJlc29sdmVycy5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9yb3V0ZS1yZXNvbHZlcnMtdXgvbm9uLWJsb2NraW5nLXJlc29sdmVycy9ub24tYmxvY2tpbmctcmVzb2x2ZXJzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHlDQUFBO0FDQ0Y7QURDRTtFQUNFLHVCQUFBO0FDQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuc2hvd2Nhc2UtY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0tYXBwLWJhY2tncm91bmQtc2hhZGUpO1xuXG4gIC5zaG93Y2FzZS1zZWN0aW9uIHtcbiAgICBtYXJnaW46IDIwcHggMjBweCAxMDBweDtcbiAgfVxufVxuIiwiLnNob3djYXNlLWNvbnRlbnQge1xuICAtLWJhY2tncm91bmQ6IHZhcigtLWFwcC1iYWNrZ3JvdW5kLXNoYWRlKTtcbn1cbi5zaG93Y2FzZS1jb250ZW50IC5zaG93Y2FzZS1zZWN0aW9uIHtcbiAgbWFyZ2luOiAyMHB4IDIwcHggMTAwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,cAAc,QAAQ,iBAAiB;;;;;;;;ICe5CC,6BAAwC;IACtCA,8BAAoD;IAClDA,8BAA2B;IAC3BA,yBAAG;IACEA,gFAAgE;IAAAA,iBAAI;IAG7EA,0BAAe;;;;;;;;;;;;;;;;;;;;;;IACfA,6BAAuC;IACrCA,kCAAwD;IAIWA,+CAA+B;IAAAA,iBAAK;IAIrGA,mCAAkB;IAEdA,0BAA4F;IAC9FA,iBAAmB;IAErBA,oCAAkB;IAEdA,aACF;IAAAA,iBAAK;IACLA,0BAAG;IACDA,aACF;IAAAA,iBAAI;IAGVA,0BAAe;;;;IApBJA,eAAwE;IAAxEA,6IAAwE;IACzDA,eAAoB;IAApBA,kDAAoB;IAMtBA,eAAoB;IAApBA,kDAAoB;IAC/BA,eAA+B;IAA/BA,8GAA+B;IAKpCA,eACF;IADEA,uGACF;IAEEA,eACF;IADEA,6GACF;;;ADjCV,OAAM,MAAOC,wBAAwB;EAInCC,YACUC,KAAqB;IAArB,UAAK,GAALA,KAAK;EACX;EAEJC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAE3D,IAAI,IAAI,CAACH,KAAK,IAAI,IAAI,CAACA,KAAK,CAACI,IAAI,EAAE;MACjC;MACA,MAAMC,iBAAiB,GAAG,IAAI,CAACL,KAAK,CAACI,IAAI;MACzCF,OAAO,CAACC,GAAG,CAAC,mFAAmF,EAAEE,iBAAiB,CAAC;MAEnH,IAAIA,iBAAiB,EAAE;QACrBA,iBAAiB,CAACC,SAAS,CAACC,YAAY,IAAG;UACzC,MAAMC,cAAc,GAAGD,YAAY,CAAC,MAAM,CAAC;UAC3CL,OAAO,CAACC,GAAG,CAAC,sFAAsF,EAAEK,cAAc,CAAC;UAEnH,IAAIA,cAAc,EAAE;YAClBA,cAAc,CAACF,SAAS,CAACG,eAAe,IAAG;cACzC,MAAMC,QAAQ,GAAuBD,eAAe;cACpD;cACAP,OAAO,CAACC,GAAG,CAAC,yGAAyG,IAAKO,QAAQ,IAAIA,QAAQ,CAACC,OAAO,GAAI,OAAO,GAAG,MAAM,CAAC,GAAG,KAAK,EAAED,QAAQ,CAAC;cAC9L,IAAIA,QAAQ,EAAE;gBACZ,IAAI,CAACE,gBAAgB,GAAGF,QAAQ;;YAEpC,CAAC,CAAC;WACH,MAAM;YACLR,OAAO,CAACW,IAAI,CAAC,gEAAgE,CAAC;;QAElF,CAAC,CAAC;OACH,MAAM;QACLX,OAAO,CAACW,IAAI,CAAC,sDAAsD,CAAC;;KAEvE,MAAM;MACLX,OAAO,CAACW,IAAI,CAAC,oCAAoC,CAAC;;EAEtD;;AAxCWf,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXrCrB,kCAAY;MAGNA,qCAA6E;MAC/EA,iBAAc;MACdA,iCAAW;MACTA,gDACF;MAAAA,iBAAY;MAIhBA,sCAAsC;MAGhCA,mMACF;MAAAA,iBAAI;MACJA,6FAOe;MACfA,+FAuBe;MACjBA,iBAAU;;;MAhCOA,gBAAuB;MAAvBA,4CAAuB;MAQvBA,eAAsB;MAAtBA,2CAAsB","names":["ActivatedRoute","i0","NonBlockingResolversPage","constructor","route","ngOnInit","console","log","data","promiseObservable","subscribe","promiseValue","dataObservable","observableValue","pageData","isShell","routeResolveData","warn","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/route-resolvers-ux/non-blocking-resolvers/non-blocking-resolvers.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/route-resolvers-ux/non-blocking-resolvers/non-blocking-resolvers.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// You can also use a Class object as a shell model\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\n\n@Component({\n  selector: 'app-showcase-non-blocking-resolvers',\n  templateUrl: './non-blocking-resolvers.page.html',\n  styleUrls: ['./non-blocking-resolvers.page.scss']\n})\nexport class NonBlockingResolversPage implements OnInit {\n  // We will assign data coming from the Route Resolver to this property\n  routeResolveData: ShowcaseShellModel;\n\n  constructor(\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    console.log('Showcase NON Blocking Resovlers - ngOnInit()');\n\n    if (this.route && this.route.data) {\n      // We resolved a promise for the data Observable\n      const promiseObservable = this.route.data;\n      console.log('Showcase NON Blocking Resovlers - Route Resolve Observable => promiseObservable: ', promiseObservable);\n\n      if (promiseObservable) {\n        promiseObservable.subscribe(promiseValue => {\n          const dataObservable = promiseValue['data'];\n          console.log('Showcase NON Blocking Resovlers - Subscribe to promiseObservable => dataObservable: ', dataObservable);\n\n          if (dataObservable) {\n            dataObservable.subscribe(observableValue => {\n              const pageData: ShowcaseShellModel = observableValue;\n              // eslint-disable-next-line max-len\n              console.log('Showcase NON Blocking Resovlers - Subscribe to dataObservable (will emmit just one value) => PageData (' + ((pageData && pageData.isShell) ? 'SHELL' : 'REAL') + '): ', pageData);\n              if (pageData) {\n                this.routeResolveData = pageData;\n              }\n            });\n          } else {\n            console.warn('No dataObservable coming from Route Resolver promiseObservable');\n          }\n        });\n      } else {\n        console.warn('No promiseObservable coming from Route Resolver data');\n      }\n    } else {\n      console.warn('No data coming from Route Resolver');\n    }\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/route-resolvers-ux\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      NON Blocking Resovler Showcase\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      With Non-Blocking Resolvers, page transition is immediate. However UX degrades because you are showing a static loading indicator while the server sends data back to the client.\n    </p>\n    <ng-container *ngIf=\"!routeResolveData\">\n      <div style=\"margin: 20px 40px; text-align: center;\">\n        <ion-spinner></ion-spinner>\n        <p>\n          <b>You can show a static shell while fetching data from the backend</b>\n        </p>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"routeResolveData\">\n      <ion-row style=\"background-color: #FFF; padding: 10px;\">\n        <ion-col size=\"12\">\n          <div [ngStyle]=\"{'background-image': 'url(' + routeResolveData?.cover + ')'}\" style=\"background-size: cover; background-repeat: no-repeat;\">\n            <app-aspect-ratio [ratio]=\"{w:2, h:1}\">\n              <h4 style=\"margin: 10px; text-align: center; color: #FFF;\">Heading on top of a cover image</h4>\n            </app-aspect-ratio>\n          </div>\n        </ion-col>\n        <ion-col size=\"4\">\n          <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n            <img [src]=\"routeResolveData?.image\" alt=\"Sample Image\" style=\"width: 100%; height: 100%;\"/>\n          </app-aspect-ratio>\n        </ion-col>\n        <ion-col size=\"8\">\n          <h3 style=\"margin-top: 0px;\">\n            {{ routeResolveData?.title }}\n          </h3>\n          <p>\n            {{ routeResolveData?.description }}\n          </p>\n        </ion-col>\n      </ion-row>\n    </ng-container>\n  </section>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}