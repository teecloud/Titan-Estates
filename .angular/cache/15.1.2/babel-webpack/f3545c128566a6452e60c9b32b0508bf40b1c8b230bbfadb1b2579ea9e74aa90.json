{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { DataStore } from '../shell/data-store';\nimport { FoodListingModel } from './listing/food-listing.model';\nimport { FoodDetailsModel } from './details/food-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utils/transfer-state-helper\";\nimport * as i2 from \"@angular/common/http\";\nexport class FoodService {\n  constructor(platformId, transferStateHelper, http) {\n    this.platformId = platformId;\n    this.transferStateHelper = transferStateHelper;\n    this.http = http;\n  }\n  getListingDataSource() {\n    const rawDataSource = this.http.get('./assets/sample-data/food/listing.json').pipe(map(data => {\n      // Note: HttpClient cannot know how to instantiate a class for the returned data\n      // We need to properly cast types from json data\n      const listing = new FoodListingModel();\n      // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n      // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n      // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n      Object.assign(listing, data);\n      return listing;\n    }));\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-listing-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getListingStore(dataSource) {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = new FoodListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else {\n        // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n  getDetailsDataSource(slug) {\n    const rawDataSource = this.http.get('./assets/sample-data/food/details.json').pipe(mergeMap(details => details.items.filter(item => item.slug === slug)), map(data => {\n      // Note: HttpClient cannot know how to instantiate a class for the returned data\n      // We need to properly cast types from json data\n      const details = new FoodDetailsModel();\n      // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n      // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n      // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n      Object.assign(details, data);\n      return details;\n    }));\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-details-state', rawDataSource);\n    return cachedDataSource;\n  }\n  getDetailsStore(dataSource) {\n    // Initialize the model specifying that it is a shell model\n    const shellModel = new FoodDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.detailsDataStore.load(dataSource, 0);\n    } else {\n      // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n}\nFoodService.ɵfac = function FoodService_Factory(t) {\n  return new (t || FoodService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.TransferStateHelper), i0.ɵɵinject(i2.HttpClient));\n};\nFoodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodService,\n  factory: FoodService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["PLATFORM_ID","HttpClient","map","mergeMap","DataStore","FoodListingModel","FoodDetailsModel","TransferStateHelper","isPlatformServer","FoodService","constructor","platformId","transferStateHelper","http","getListingDataSource","rawDataSource","get","pipe","data","listing","Object","assign","cachedDataSource","checkDataSourceState","getListingStore","dataSource","listingDataStore","shellModel","load","getDetailsDataSource","slug","details","items","filter","item","getDetailsStore","detailsDataStore","factory"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/food/food.service.ts"],"sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { FoodListingModel } from './listing/food-listing.model';\nimport { FoodDetailsModel } from './details/food-details.model';\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class FoodService {\n  private listingDataStore: DataStore<FoodListingModel>;\n  private detailsDataStore: DataStore<FoodDetailsModel>;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private transferStateHelper: TransferStateHelper,\n    private http: HttpClient\n  ) { }\n\n  public getListingDataSource(): Observable<FoodListingModel> {\n    const rawDataSource = this.http.get<FoodListingModel>('./assets/sample-data/food/listing.json')\n    .pipe(\n      map(\n        (data: FoodListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new FoodListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-listing-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getListingStore(dataSource: Observable<FoodListingModel>): DataStore<FoodListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FoodListingModel = new FoodListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.listingDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.listingDataStore.load(dataSource);\n      }\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(slug: string): Observable<FoodDetailsModel> {\n    const rawDataSource = this.http.get<{items: Array<FoodDetailsModel>}>('./assets/sample-data/food/details.json')\n    .pipe(\n      mergeMap(details => details.items.filter(item => item.slug === slug)),\n      map(\n        (data: FoodDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new FoodDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-details-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDetailsStore(dataSource: Observable<FoodDetailsModel>): DataStore<FoodDetailsModel> {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: FoodDetailsModel = new FoodDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.detailsDataStore.load(dataSource, 0);\n    } else { // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.detailsDataStore.load(dataSource);\n    }\n\n    return this.detailsDataStore;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}