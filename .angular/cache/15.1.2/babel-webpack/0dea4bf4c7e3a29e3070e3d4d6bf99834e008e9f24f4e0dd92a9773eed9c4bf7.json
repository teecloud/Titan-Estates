{"ast":null,"code":"import { take, finalize } from 'rxjs/operators';\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\nimport { DataStore } from '../../../shell/data-store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../../../shell/aspect-ratio/aspect-ratio.component\";\nimport * as i4 from \"../../../shell/image-shell/image-shell.component\";\nimport * as i5 from \"../../../shell/text-shell/text-shell.component\";\nconst _c0 = function () {\n  return {\n    w: 2,\n    h: 1\n  };\n};\nconst _c1 = function () {\n  return {\n    w: 1,\n    h: 1\n  };\n};\nexport class DataStoreBasicPage {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n    this.dataStoreButtonDisabled = true;\n  }\n  ngOnInit() {\n    this.showcaseDataStore();\n  }\n  showcaseDataStore() {\n    // Prevent rage clicks on the 'Fetch more Data' button\n    this.dataStoreButtonDisabled = true;\n    const dataSource = this.showcaseService.getSimpleDataSource();\n    // Initialize the model specifying that it is a shell model\n    const shellModel = new ShowcaseShellModel();\n    const dataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    dataStore.load(dataSource);\n    dataStore.state.pipe(take(2),\n    // DataStore will emit a mock object and the real data fetched from the source. Emit those two values and then complete.\n    finalize(() => this.dataStoreButtonDisabled = false)).subscribe(data => {\n      this.dataStoreData = data;\n    });\n  }\n}\nDataStoreBasicPage.ɵfac = function DataStoreBasicPage_Factory(t) {\n  return new (t || DataStoreBasicPage)(i0.ɵɵdirectiveInject(i1.ShowcaseService));\n};\nDataStoreBasicPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataStoreBasicPage,\n  selectors: [[\"app-data-store-basic\"]],\n  decls: 31,\n  vars: 12,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/app-shell\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [2, \"background-color\", \"#FFF\", \"padding\", \"10px\", \"margin\", \"20px\"], [\"size\", \"12\"], [\"animation\", \"spinner\", 1, \"add-overlay\", 3, \"display\", \"src\", \"alt\"], [3, \"ratio\"], [2, \"margin\", \"10px\", \"text-align\", \"center\", \"color\", \"#FFF\"], [\"size\", \"4\"], [\"animation\", \"spinner\", 3, \"src\", \"alt\"], [\"size\", \"8\"], [2, \"margin-top\", \"0px\"], [3, \"data\"], [\"lines\", \"3\", 3, \"data\"], [3, \"disabled\", \"click\"]],\n  template: function DataStoreBasicPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" DataStore - Basic example \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"p\");\n      i0.ɵɵtext(9, \" Using the \");\n      i0.ɵɵelementStart(10, \"code\");\n      i0.ɵɵtext(11, \"DataStore\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \" utility you can keep track and append shell values to the data stream. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"p\");\n      i0.ɵɵtext(14, \" This drastically reduces the boilerplate needed to add app shell loading interactions to your app. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"ion-row\", 5)(16, \"ion-col\", 6)(17, \"app-image-shell\", 7)(18, \"app-aspect-ratio\", 8)(19, \"h4\", 9);\n      i0.ɵɵtext(20, \"Heading on top of a cover image\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(21, \"ion-col\", 10)(22, \"app-aspect-ratio\", 8);\n      i0.ɵɵelement(23, \"app-image-shell\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"ion-col\", 12)(25, \"h3\", 13);\n      i0.ɵɵelement(26, \"app-text-shell\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"p\");\n      i0.ɵɵelement(28, \"app-text-shell\", 15);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(29, \"ion-button\", 16);\n      i0.ɵɵlistener(\"click\", function DataStoreBasicPage_Template_ion_button_click_29_listener() {\n        return ctx.showcaseDataStore();\n      });\n      i0.ɵɵtext(30, \"Fetch more Data\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"display\", \"cover\")(\"src\", ctx.dataStoreData == null ? null : ctx.dataStoreData.cover)(\"alt\", \"Sample Image Cover\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(10, _c0));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(11, _c1));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"src\", ctx.dataStoreData == null ? null : ctx.dataStoreData.image)(\"alt\", \"Sample Image\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"data\", ctx.dataStoreData == null ? null : ctx.dataStoreData.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"data\", ctx.dataStoreData == null ? null : ctx.dataStoreData.description);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.dataStoreButtonDisabled);\n    }\n  },\n  dependencies: [i2.IonBackButton, i2.IonButton, i2.IonButtons, i2.IonCol, i2.IonContent, i2.IonHeader, i2.IonRow, i2.IonTitle, i2.IonToolbar, i2.IonBackButtonDelegate, i3.AspectRatioComponent, i4.ImageShellComponent, i5.TextShellComponent],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background);\\n}\\n.showcase-content[_ngcontent-%COMP%]   ion-item-divider[_ngcontent-%COMP%] {\\n  --background: var(--ion-color-secondary);\\n  --color: var(--ion-color-lightest);\\n  text-transform: uppercase;\\n  font-weight: 500;\\n  letter-spacing: 1px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 60px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  background: #CCC;\\n  padding: 10px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  color: #F92672;\\n  font-weight: 500;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvZGF0YS1zdG9yZS1iYXNpYy9kYXRhLXN0b3JlLWJhc2ljLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1DQUFBO0FDQ0Y7QURDRTtFQUNFLHdDQUFBO0VBQ0Esa0NBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUNDSjtBREVFO0VBQ0Usc0JBQUE7QUNBSjtBREdFO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtBQ0RKO0FESUU7RUFDRSxjQUFBO0VBQ0EsZ0JBQUE7QUNGSiIsInNvdXJjZXNDb250ZW50IjpbIi5zaG93Y2FzZS1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1hcHAtYmFja2dyb3VuZCk7XG5cbiAgaW9uLWl0ZW0tZGl2aWRlciB7XG4gICAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbiAgICAtLWNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHRlc3QpO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICB9XG5cbiAgLnNob3djYXNlLXNlY3Rpb24ge1xuICAgIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG4gIH1cblxuICBwcmUge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBiYWNrZ3JvdW5kOiAjQ0NDO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cblxuICBjb2RlIHtcbiAgICBjb2xvcjogI0Y5MjY3MjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG59XG4iLCIuc2hvd2Nhc2UtY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0tYXBwLWJhY2tncm91bmQpO1xufVxuLnNob3djYXNlLWNvbnRlbnQgaW9uLWl0ZW0tZGl2aWRlciB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG4gIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodGVzdCk7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCAuc2hvd2Nhc2Utc2VjdGlvbiB7XG4gIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBwcmUge1xuICBmb250LXNpemU6IDE0cHg7XG4gIGJhY2tncm91bmQ6ICNDQ0M7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBjb2RlIHtcbiAgY29sb3I6ICNGOTI2NzI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,gBAAgB;AAE/C,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,eAAe,QAAQ,wBAAwB;AAExD,SAASC,SAAS,QAAQ,2BAA2B;;;;;;;;;;;;;;;;;;;AAOrD,OAAM,MAAOC,kBAAkB;EAM7BC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IAFnC,4BAAuB,GAAG,IAAI;EAE0B;EAExDC,QAAQ;IACN,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB;IACf;IACA,IAAI,CAACC,uBAAuB,GAAG,IAAI;IAEnC,MAAMC,UAAU,GAAG,IAAI,CAACJ,eAAe,CAACK,mBAAmB,EAAE;IAE7D;IACA,MAAMC,UAAU,GAAuB,IAAIX,kBAAkB,EAAE;IAC/D,MAAMY,SAAS,GAAG,IAAIV,SAAS,CAACS,UAAU,CAAC;IAC3C;IACAC,SAAS,CAACC,IAAI,CAACJ,UAAU,CAAC;IAE1BG,SAAS,CAACE,KAAK,CAACC,IAAI,CAClBjB,IAAI,CAAC,CAAC,CAAC;IAAE;IACTC,QAAQ,CAAC,MAAM,IAAI,CAACS,uBAAuB,GAAG,KAAK,CAAC,CACrD,CAACQ,SAAS,CAACC,IAAI,IAAG;MACjB,IAAI,CAACC,aAAa,GAAGD,IAAI;IAC3B,CAAC,CAAC;EACJ;;AA9BWd,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb/BC,kCAAY;MAGNA,qCAAoE;MACtEA,iBAAc;MACdA,iCAAW;MACTA,2CACF;MAAAA,iBAAY;MAIhBA,sCAAsC;MAGhCA,2BAAU;MAAAA,6BAAM;MAAAA,0BAAS;MAAAA,iBAAO;MAACA,yFACnC;MAAAA,iBAAI;MACJA,0BAAG;MACDA,qHACF;MAAAA,iBAAI;MACJA,mCAAsE;MAIHA,gDAA+B;MAAAA,iBAAK;MAIrGA,oCAAkB;MAEdA,uCAA2G;MAC7GA,iBAAmB;MAErBA,oCAAkB;MAEdA,sCAA+D;MACjEA,iBAAK;MACLA,0BAAG;MACDA,sCAA+E;MACjFA,iBAAI;MAGRA,uCAA+E;MAAnEA;QAAA,OAASC,uBAAmB;MAAA,EAAC;MAAsCD,gCAAe;MAAAA,iBAAa;;;MApB9CA,gBAAmB;MAAnBA,iCAAmB;MACxDA,eAAoB;MAApBA,mDAAoB;MAMtBA,eAAoB;MAApBA,mDAAoB;MACCA,eAA4B;MAA5BA,gFAA4B;MAKjDA,eAA6B;MAA7BA,iFAA6B;MAG7BA,eAAmC;MAAnCA,uFAAmC;MAIfA,eAAoC;MAApCA,sDAAoC","names":["take","finalize","ShowcaseShellModel","ShowcaseService","DataStore","DataStoreBasicPage","constructor","showcaseService","ngOnInit","showcaseDataStore","dataStoreButtonDisabled","dataSource","getSimpleDataSource","shellModel","dataStore","load","state","pipe","subscribe","data","dataStoreData","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-basic/data-store-basic.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-basic/data-store-basic.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { take, finalize } from 'rxjs/operators';\n\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\n\nimport { DataStore } from '../../../shell/data-store';\n\n@Component({\n  selector: 'app-data-store-basic',\n  templateUrl: './data-store-basic.page.html',\n  styleUrls: ['./data-store-basic.page.scss'],\n})\nexport class DataStoreBasicPage implements OnInit {\n  // Fetch data with the DataStore utility and assign it to this property\n  // DataStore data is async (Observable)\n  dataStoreData: ShowcaseShellModel;\n  dataStoreButtonDisabled = true;\n\n  constructor(private showcaseService: ShowcaseService) { }\n\n  ngOnInit() {\n    this.showcaseDataStore();\n  }\n\n  showcaseDataStore(): void {\n    // Prevent rage clicks on the 'Fetch more Data' button\n    this.dataStoreButtonDisabled = true;\n\n    const dataSource = this.showcaseService.getSimpleDataSource();\n\n    // Initialize the model specifying that it is a shell model\n    const shellModel: ShowcaseShellModel = new ShowcaseShellModel();\n    const dataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    dataStore.load(dataSource);\n\n    dataStore.state.pipe(\n      take(2), // DataStore will emit a mock object and the real data fetched from the source. Emit those two values and then complete.\n      finalize(() => this.dataStoreButtonDisabled = false)\n    ).subscribe(data => {\n      this.dataStoreData = data;\n    });\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/app-shell\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      DataStore - Basic example\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      Using the <code>DataStore</code> utility you can keep track and append shell values to the data stream.\n    </p>\n    <p>\n      This drastically reduces the boilerplate needed to add app shell loading interactions to your app.\n    </p>\n    <ion-row style=\"background-color: #FFF; padding: 10px; margin: 20px;\">\n      <ion-col size=\"12\">\n        <app-image-shell animation=\"spinner\" class=\"add-overlay\" [display]=\"'cover'\" [src]=\"dataStoreData?.cover\" [alt]=\"'Sample Image Cover'\">\n          <app-aspect-ratio [ratio]=\"{w:2, h:1}\">\n            <h4 style=\"margin: 10px; text-align: center; color: #FFF;\">Heading on top of a cover image</h4>\n          </app-aspect-ratio>\n        </app-image-shell>\n      </ion-col>\n      <ion-col size=\"4\">\n        <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          <app-image-shell animation=\"spinner\" [src]=\"dataStoreData?.image\" [alt]=\"'Sample Image'\"></app-image-shell>\n        </app-aspect-ratio>\n      </ion-col>\n      <ion-col size=\"8\">\n        <h3 style=\"margin-top: 0px;\">\n          <app-text-shell [data]=\"dataStoreData?.title\"></app-text-shell>\n        </h3>\n        <p>\n          <app-text-shell [data]=\"dataStoreData?.description\" lines=\"3\"></app-text-shell>\n        </p>\n      </ion-col>\n    </ion-row>\n    <ion-button (click)=\"showcaseDataStore()\" [disabled]=\"dataStoreButtonDisabled\">Fetch more Data</ion-button>\n  </section>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}