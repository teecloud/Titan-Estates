{"ast":null,"code":"import { Subject, merge } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ShowcaseShellUserModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\nimport { DataStore } from '../../../shell/data-store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"../../../shell/aspect-ratio/aspect-ratio.component\";\nimport * as i5 from \"../../../shell/image-shell/image-shell.component\";\nimport * as i6 from \"../../../shell/text-shell/text-shell.component\";\nfunction DataStorePaginationPage_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8)(1, \"small\");\n    i0.ɵɵtext(2, \"(No more pages available)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function () {\n  return {\n    w: 1,\n    h: 1\n  };\n};\nfunction DataStorePaginationPage_ion_row_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-row\", 9)(1, \"ion-col\", 10)(2, \"app-aspect-ratio\", 11);\n    i0.ɵɵelement(3, \"app-image-shell\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"ion-col\", 13)(5, \"h3\", 14);\n    i0.ɵɵelement(6, \"app-text-shell\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵelement(8, \"app-text-shell\", 16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const user_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(5, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", user_r2 == null ? null : user_r2.avatar)(\"alt\", \"Sample Image\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", user_r2 == null ? null : user_r2.first_name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"data\", user_r2 == null ? null : user_r2.last_name);\n  }\n}\nexport class DataStorePaginationPage {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n    this.loadMorePages = true;\n    this.currentPage = 0;\n    this.triggerNewPageLoading = new Subject();\n    this.newPageTriggerObservable = this.triggerNewPageLoading.asObservable();\n  }\n  ngOnInit() {\n    const dataSource = this.showcaseService.getPaginationDataSource(1);\n    if (!this.remoteApiDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = [new ShowcaseShellUserModel(), new ShowcaseShellUserModel()];\n      this.remoteApiDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.remoteApiDataStore.load(dataSource);\n    }\n    const newDataObservable = this.newPageTriggerObservable.pipe(switchMap(pageNumber => {\n      const pageDataSource = this.showcaseService.getPaginationDataSource(pageNumber);\n      const newDataShell = [new ShowcaseShellUserModel(), new ShowcaseShellUserModel(), new ShowcaseShellUserModel()];\n      const dataSourceWithShellObservable = DataStore.AppendShell(pageDataSource, newDataShell, 400);\n      return dataSourceWithShellObservable;\n    }));\n    merge(this.remoteApiDataStore.state, newDataObservable).subscribe(result => {\n      console.log('result', result);\n      // When successfully load next page, update currentPage pointer\n      if (!result.isShell && result.length > 0) {\n        this.currentPage++;\n      }\n      if (this.loadMorePages) {\n        this.pagedUsers = result;\n      }\n      if (this.currentPage === 4) {\n        this.loadMorePages = false;\n      }\n    });\n  }\n  getNextPageUsers() {\n    this.triggerNewPageLoading.next(this.currentPage + 1);\n  }\n}\nDataStorePaginationPage.ɵfac = function DataStorePaginationPage_Factory(t) {\n  return new (t || DataStorePaginationPage)(i0.ɵɵdirectiveInject(i1.ShowcaseService));\n};\nDataStorePaginationPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataStorePaginationPage,\n  selectors: [[\"app-data-store-pagination\"]],\n  decls: 30,\n  vars: 4,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/app-shell\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [\"style\", \"margin-inline-start: 10px;\", 4, \"ngIf\"], [\"style\", \"background-color: #FFF; padding: 10px;\", 4, \"ngFor\", \"ngForOf\"], [3, \"disabled\", \"click\"], [2, \"margin-inline-start\", \"10px\"], [2, \"background-color\", \"#FFF\", \"padding\", \"10px\"], [\"size\", \"4\"], [3, \"ratio\"], [\"animation\", \"spinner\", 3, \"src\", \"alt\"], [\"size\", \"8\"], [2, \"margin-top\", \"0px\"], [3, \"data\"], [\"lines\", \"3\", 3, \"data\"]],\n  template: function DataStorePaginationPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" DataStore - Pagination example \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"p\");\n      i0.ɵɵtext(9, \" This example is useful for use cases that require the data stream to be updated based on user actions. \");\n      i0.ɵɵelementStart(10, \"i\");\n      i0.ɵɵtext(11, \"Pagination\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \" and \");\n      i0.ɵɵelementStart(13, \"i\");\n      i0.ɵɵtext(14, \"filtering\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \" are the clear use cases that come to my mind. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17, \" For these use cases you get the initial data stream and then, upon user interaction, you request an update for that stream. For example requesting your remote API for the next page of results or a filtered set of results. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"p\");\n      i0.ɵɵtext(19, \" This example shows you how to merge the initial data stream with future data streams that may arise from user interaction. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"p\")(21, \"b\");\n      i0.ɵɵtext(22);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(23, DataStorePaginationPage_span_23_Template, 3, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"p\")(25, \"small\");\n      i0.ɵɵtext(26, \"Each time you click the button we fetch users from the next page.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(27, DataStorePaginationPage_ion_row_27_Template, 9, 6, \"ion-row\", 6);\n      i0.ɵɵelementStart(28, \"ion-button\", 7);\n      i0.ɵɵlistener(\"click\", function DataStorePaginationPage_Template_ion_button_click_28_listener() {\n        return ctx.getNextPageUsers();\n      });\n      i0.ɵɵtext(29, \"Fetch next page\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(22);\n      i0.ɵɵtextInterpolate1(\"Current page: \", ctx.currentPage, \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.loadMorePages);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.pagedUsers);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.loadMorePages || ctx.pagedUsers.isShell);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.IonBackButton, i3.IonButton, i3.IonButtons, i3.IonCol, i3.IonContent, i3.IonHeader, i3.IonRow, i3.IonTitle, i3.IonToolbar, i3.IonBackButtonDelegate, i4.AspectRatioComponent, i5.ImageShellComponent, i6.TextShellComponent],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background);\\n}\\n.showcase-content[_ngcontent-%COMP%]   ion-item-divider[_ngcontent-%COMP%] {\\n  --background: var(--ion-color-secondary);\\n  --color: var(--ion-color-lightest);\\n  text-transform: uppercase;\\n  font-weight: 500;\\n  letter-spacing: 1px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 60px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  background: #CCC;\\n  padding: 10px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  color: #F92672;\\n  font-weight: 500;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvZGF0YS1zdG9yZS1wYWdpbmF0aW9uL2RhdGEtc3RvcmUtcGFnaW5hdGlvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQ0FBQTtBQ0NGO0FEQ0U7RUFDRSx3Q0FBQTtFQUNBLGtDQUFBO0VBQ0EseUJBQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0FDQ0o7QURFRTtFQUNFLHNCQUFBO0FDQUo7QURHRTtFQUNFLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGFBQUE7QUNESjtBRElFO0VBQ0UsY0FBQTtFQUNBLGdCQUFBO0FDRkoiLCJzb3VyY2VzQ29udGVudCI6WyIuc2hvd2Nhc2UtY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0tYXBwLWJhY2tncm91bmQpO1xuXG4gIGlvbi1pdGVtLWRpdmlkZXIge1xuICAgIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG4gICAgLS1jb2xvcjogdmFyKC0taW9uLWNvbG9yLWxpZ2h0ZXN0KTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgfVxuXG4gIC5zaG93Y2FzZS1zZWN0aW9uIHtcbiAgICBtYXJnaW46IDIwcHggMjBweCA2MHB4O1xuICB9XG5cbiAgcHJlIHtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgYmFja2dyb3VuZDogI0NDQztcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5cbiAgY29kZSB7XG4gICAgY29sb3I6ICNGOTI2NzI7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgfVxufVxuIiwiLnNob3djYXNlLWNvbnRlbnQge1xuICAtLWJhY2tncm91bmQ6IHZhcigtLWFwcC1iYWNrZ3JvdW5kKTtcbn1cbi5zaG93Y2FzZS1jb250ZW50IGlvbi1pdGVtLWRpdmlkZXIge1xuICAtLWJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1zZWNvbmRhcnkpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHRlc3QpO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsZXR0ZXItc3BhY2luZzogMXB4O1xufVxuLnNob3djYXNlLWNvbnRlbnQgLnNob3djYXNlLXNlY3Rpb24ge1xuICBtYXJnaW46IDIwcHggMjBweCA2MHB4O1xufVxuLnNob3djYXNlLWNvbnRlbnQgcHJlIHtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBiYWNrZ3JvdW5kOiAjQ0NDO1xuICBwYWRkaW5nOiAxMHB4O1xufVxuLnNob3djYXNlLWNvbnRlbnQgY29kZSB7XG4gIGNvbG9yOiAjRjkyNjcyO1xuICBmb250LXdlaWdodDogNTAwO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["Subject","merge","switchMap","ShowcaseShellUserModel","ShowcaseService","DataStore","i0","DataStorePaginationPage","constructor","showcaseService","triggerNewPageLoading","asObservable","ngOnInit","dataSource","getPaginationDataSource","remoteApiDataStore","shellModel","load","newDataObservable","newPageTriggerObservable","pipe","pageNumber","pageDataSource","newDataShell","dataSourceWithShellObservable","AppendShell","state","subscribe","result","console","log","isShell","length","currentPage","loadMorePages","pagedUsers","getNextPageUsers","next","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-pagination/data-store-pagination.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-pagination/data-store-pagination.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, Subject, merge } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { ShowcaseShellUserModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\n\nimport { DataStore, ShellModel } from '../../../shell/data-store';\n\n@Component({\n  selector: 'app-data-store-pagination',\n  templateUrl: './data-store-pagination.page.html',\n  styleUrls: ['./data-store-pagination.page.scss'],\n})\nexport class DataStorePaginationPage implements OnInit {\n  // View model\n  pagedUsers: Array<ShowcaseShellUserModel> & ShellModel;\n\n  // View data store\n  remoteApiDataStore: DataStore<Array<ShowcaseShellUserModel>>;\n\n  loadMorePages = true;\n  currentPage = 0;\n\n  triggerNewPageLoading: Subject<any> = new Subject<any>();\n  newPageTriggerObservable: Observable<any> = this.triggerNewPageLoading.asObservable();\n\n  constructor(private showcaseService: ShowcaseService) { }\n\n  ngOnInit() {\n    const dataSource = this.showcaseService.getPaginationDataSource(1);\n\n    if (!this.remoteApiDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<ShowcaseShellUserModel> = [\n        new ShowcaseShellUserModel(),\n        new ShowcaseShellUserModel()\n      ];\n      this.remoteApiDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.remoteApiDataStore.load(dataSource);\n    }\n\n    const newDataObservable = this.newPageTriggerObservable.pipe(\n      switchMap((pageNumber) => {\n        const pageDataSource = this.showcaseService.getPaginationDataSource(pageNumber);\n        const newDataShell = [\n          new ShowcaseShellUserModel(),\n          new ShowcaseShellUserModel(),\n          new ShowcaseShellUserModel()\n        ];\n\n        const dataSourceWithShellObservable = DataStore.AppendShell(pageDataSource, newDataShell, 400);\n\n        return dataSourceWithShellObservable;\n      })\n    );\n\n    merge(\n      this.remoteApiDataStore.state,\n      newDataObservable\n    )\n    .subscribe(result => {\n      console.log('result', result);\n\n      // When successfully load next page, update currentPage pointer\n      if (!result.isShell && result.length > 0) {\n        this.currentPage ++;\n      }\n\n      if (this.loadMorePages) {\n        this.pagedUsers = result;\n      }\n\n      if (this.currentPage === 4) {\n        this.loadMorePages = false;\n      }\n    });\n  }\n\n  getNextPageUsers(): void {\n    this.triggerNewPageLoading.next(this.currentPage + 1);\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/app-shell\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      DataStore - Pagination example\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      This example is useful for use cases that require the data stream to be updated based on user actions. <i>Pagination</i> and <i>filtering</i> are the clear use cases that come to my mind.\n    </p>\n    <p>\n      For these use cases you get the initial data stream and then, upon user interaction, you request an update for that stream. For example requesting your remote API for the next page of results or a filtered set of results.\n    </p>\n    <p>\n      This example shows you how to merge the initial data stream with future data streams that may arise from user interaction.\n    </p>\n    <p>\n      <b>Current page: {{ currentPage }}</b>\n      <span *ngIf=\"!loadMorePages\" style=\"margin-inline-start: 10px;\"><small>(No more pages available)</small></span>\n    </p>\n    <p>\n      <small>Each time you click the button we fetch users from the next page.</small>\n    </p>\n    <ion-row style=\"background-color: #FFF; padding: 10px;\" *ngFor=\"let user of pagedUsers\">\n      <ion-col size=\"4\">\n        <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          <app-image-shell animation=\"spinner\" [src]=\"user?.avatar\" [alt]=\"'Sample Image'\"></app-image-shell>\n        </app-aspect-ratio>\n      </ion-col>\n      <ion-col size=\"8\">\n        <h3 style=\"margin-top: 0px;\">\n          <app-text-shell [data]=\"user?.first_name\"></app-text-shell>\n        </h3>\n        <p>\n          <app-text-shell [data]=\"user?.last_name\" lines=\"3\"></app-text-shell>\n        </p>\n      </ion-col>\n    </ion-row>\n    <ion-button (click)=\"getNextPageUsers()\" [disabled]=\"!loadMorePages || pagedUsers.isShell\">Fetch next page</ion-button>\n  </section>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}