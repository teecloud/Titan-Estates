{"ast":null,"code":"import { Observable, of, Subject, merge } from 'rxjs';\nimport { ShowcaseShellUserModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\nimport { DataStore } from '../../../shell/data-store';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"../../../shell/aspect-ratio/aspect-ratio.component\";\nimport * as i5 from \"../../../shell/image-shell/image-shell.component\";\nimport * as i6 from \"../../../shell/text-shell/text-shell.component\";\nconst _c0 = function () {\n  return {\n    w: 1,\n    h: 1\n  };\n};\nfunction DataStoreStackedPage_ng_template_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-row\", 11)(1, \"ion-col\", 12)(2, \"app-aspect-ratio\", 13);\n    i0.ɵɵelement(3, \"app-image-shell\", 14);\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"ion-col\", 15)(6, \"h3\", 16);\n    i0.ɵɵelement(7, \"app-text-shell\", 17);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵelement(10, \"app-text-shell\", 18);\n    i0.ɵɵpipe(11, \"async\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const user_r4 = ctx.user;\n    let tmp_1_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ratio\", i0.ɵɵpureFunction0(11, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", (tmp_1_0 = i0.ɵɵpipeBind1(4, 5, user_r4)) == null ? null : tmp_1_0.avatar)(\"alt\", \"Sample Image\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"data\", (tmp_3_0 = i0.ɵɵpipeBind1(8, 7, user_r4)) == null ? null : tmp_3_0.first_name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", (tmp_4_0 = i0.ɵɵpipeBind1(11, 9, user_r4)) == null ? null : tmp_4_0.last_name);\n  }\n}\nfunction DataStoreStackedPage_div_49_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    user: a0\n  };\n};\nfunction DataStoreStackedPage_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DataStoreStackedPage_div_49_ng_container_1_Template, 1, 0, \"ng-container\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r5 = ctx.$implicit;\n    i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(38);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, user_r5));\n  }\n}\nfunction DataStoreStackedPage_div_50_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction DataStoreStackedPage_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DataStoreStackedPage_div_50_ng_container_1_Template, 1, 0, \"ng-container\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r7 = ctx.$implicit;\n    i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(38);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, user_r7));\n  }\n}\nexport class DataStoreStackedPage {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n    // View model\n    this.stackedUsers = [];\n    this.shellUsers = [];\n    // Emulate a tream of events that trigger the loading of new items\n    this.triggerNewItemsLoading = new Subject();\n    this.newItemsTriggerObservable = this.triggerNewItemsLoading.asObservable();\n  }\n  ngOnInit() {\n    const openDataStream = this.showcaseService.getOpenDataStream();\n    if (!this.openDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel = [new ShowcaseShellUserModel(), new ShowcaseShellUserModel(), new ShowcaseShellUserModel(), new ShowcaseShellUserModel()];\n      this.openDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.openDataStore.load(openDataStream);\n    }\n    // Each time the user triggers the loading of new items, ask the service to get those new items\n    const newDataObservable = this.newItemsTriggerObservable.pipe(switchMap(() => {\n      const newValuesObservable = this.showcaseService.getStackedValuesDataSource();\n      const newDataShell = [new ShowcaseShellUserModel(), new ShowcaseShellUserModel()];\n      const newValuesWithShellObservable = DataStore.AppendShell(newValuesObservable, newDataShell, 400);\n      return newValuesWithShellObservable;\n    }));\n    merge(this.openDataStore.state, newDataObservable).subscribe(data => {\n      console.log('data', data);\n      if (data.isShell) {\n        const shellsAsObservables = [...data].map(val => {\n          // Transform plain shell values into async Observables (to comply with the layout markup)\n          return of(val);\n        });\n        // When loading new data, override the shellUsers property\n        this.shellUsers = shellsAsObservables;\n      } else {\n        // Clear shellUsers property\n        this.shellUsers = [];\n        const dataWithShell = [...data].map(val => {\n          // Transform plain values into async Observables (to comply with the layout markup)\n          return DataStore.AppendShell(of(val), new ShowcaseShellUserModel(), 400);\n        });\n        // Concat data to existing stackedUsers property\n        this.stackedUsers.push(...dataWithShell);\n      }\n    });\n  }\n  loadStackedResults() {\n    this.triggerNewItemsLoading.next(null);\n  }\n  pushValuesToOpenStream() {\n    this.showcaseService.pushValuesToOpenStream();\n  }\n}\nDataStoreStackedPage.ɵfac = function DataStoreStackedPage_Factory(t) {\n  return new (t || DataStoreStackedPage)(i0.ɵɵdirectiveInject(i1.ShowcaseService));\n};\nDataStoreStackedPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataStoreStackedPage,\n  selectors: [[\"app-data-store-stacked\"]],\n  decls: 51,\n  vars: 2,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/app-shell\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [\"userTemplate\", \"\"], [1, \"stacked-items-demo\"], [1, \"showcase-section\", \"sticky-section\"], [\"size\", \"12\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [2, \"background-color\", \"#FFF\", \"padding\", \"10px\"], [\"size\", \"4\"], [3, \"ratio\"], [\"animation\", \"spinner\", 3, \"src\", \"alt\"], [\"size\", \"8\"], [2, \"margin-top\", \"0px\"], [3, \"data\"], [\"lines\", \"3\", 3, \"data\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function DataStoreStackedPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" DataStore - Stacked shells example \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"p\");\n      i0.ɵɵtext(9, \" Once you have values coming from the initial data stream, the shell animation would be off. If its an \");\n      i0.ɵɵelementStart(10, \"b\");\n      i0.ɵɵtext(11, \"open stream\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \", then each time a new value arrives, it will be added to the view state without the shell animation. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"p\");\n      i0.ɵɵtext(14, \" This example is handy If you want to change the default functionality and apply independent shell animations to each value coming from the \");\n      i0.ɵɵelementStart(15, \"b\");\n      i0.ɵɵtext(16, \"open data stream\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(17, \". \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"p\");\n      i0.ɵɵtext(19, \" It's also a good example if you want to implement an \");\n      i0.ɵɵelementStart(20, \"b\");\n      i0.ɵɵtext(21, \"infinite scroll\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22, \" feature. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"p\")(24, \"b\");\n      i0.ɵɵtext(25, \"Note:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(26, \" For this to work we will be transforming plain values into Observables, thus the need to update our markup and specify the binded model as async. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"pre\");\n      i0.ɵɵtext(28, \"<h3>\\n  <app-text-shell [data]=\\\"\");\n      i0.ɵɵelementStart(29, \"b\");\n      i0.ɵɵtext(30, \"(user | async)?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \".first_name\\\"></app-text-shell>\\n</h3>\\n<p>\\n  <app-text-shell [data]=\\\"\");\n      i0.ɵɵelementStart(32, \"b\");\n      i0.ɵɵtext(33, \"(user | async)?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \".last_name\\\" lines=\\\"3\\\"></app-text-shell>\\n</p>\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"p\");\n      i0.ɵɵtext(36, \" Also as we are dealing with a mix of shell models and real values that get stacked one after the other, we need to have two seperate lists. One to show the shell values and another to contain the stacked values. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(37, DataStoreStackedPage_ng_template_37_Template, 12, 12, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(39, \"div\", 6)(40, \"section\", 7)(41, \"ion-row\")(42, \"ion-col\", 8)(43, \"ion-button\", 9);\n      i0.ɵɵlistener(\"click\", function DataStoreStackedPage_Template_ion_button_click_43_listener() {\n        return ctx.pushValuesToOpenStream();\n      });\n      i0.ɵɵtext(44, \"Push values to open stream\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(45, \"ion-col\", 8)(46, \"ion-button\", 9);\n      i0.ɵɵlistener(\"click\", function DataStoreStackedPage_Template_ion_button_click_46_listener() {\n        return ctx.loadStackedResults();\n      });\n      i0.ɵɵtext(47, \"Load New Values\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(48, \"section\", 4);\n      i0.ɵɵtemplate(49, DataStoreStackedPage_div_49_Template, 2, 4, \"div\", 10);\n      i0.ɵɵtemplate(50, DataStoreStackedPage_div_50_Template, 2, 4, \"div\", 10);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(49);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stackedUsers);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.shellUsers);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgTemplateOutlet, i3.IonBackButton, i3.IonButton, i3.IonButtons, i3.IonCol, i3.IonContent, i3.IonHeader, i3.IonRow, i3.IonTitle, i3.IonToolbar, i3.IonBackButtonDelegate, i4.AspectRatioComponent, i5.ImageShellComponent, i6.TextShellComponent, i2.AsyncPipe],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background);\\n}\\n.showcase-content[_ngcontent-%COMP%]   ion-item-divider[_ngcontent-%COMP%] {\\n  --background: var(--ion-color-secondary);\\n  --color: var(--ion-color-lightest);\\n  text-transform: uppercase;\\n  font-weight: 500;\\n  letter-spacing: 1px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 60px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  background: #CCC;\\n  padding: 10px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  color: #F92672;\\n  font-weight: 500;\\n}\\n\\n.stacked-items-demo[_ngcontent-%COMP%] {\\n  background-color: #ececec;\\n  background-image: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='40' viewBox='0 0 40 40'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.38'%3E%3Cpath d='M0 38.59l2.83-2.83 1.41 1.41L1.41 40H0v-1.41zM0 1.4l2.83 2.83 1.41-1.41L1.41 0H0v1.41zM38.59 40l-2.83-2.83 1.41-1.41L40 38.59V40h-1.41zM40 1.41l-2.83 2.83-1.41-1.41L38.59 0H40v1.41zM20 18.6l2.83-2.83 1.41 1.41L21.41 20l2.83 2.83-1.41 1.41L20 21.41l-2.83 2.83-1.41-1.41L18.59 20l-2.83-2.83 1.41-1.41L20 18.59z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\");\\n  padding: 0px 0px 20px;\\n}\\n\\n.sticky-section[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0px;\\n  background: #ececec;\\n  padding: 20px;\\n  margin: 0px 0px 60px !important;\\n  z-index: 10;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvZGF0YS1zdG9yZS1zdGFja2VkL2RhdGEtc3RvcmUtc3RhY2tlZC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYXBwL3Nob3djYXNlL2FwcC1zaGVsbC9kYXRhLXN0b3JlLXN0YWNrZWQvZGF0YS1zdG9yZS1zdGFja2VkLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1DQUFBO0FDQ0Y7QURDRTtFQUNFLHdDQUFBO0VBQ0Esa0NBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUNDSjtBREVFO0VBQ0Usc0JBQUE7QUNBSjtBREdFO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtBQ0RKO0FESUU7RUFDRSxjQUFBO0VBQ0EsZ0JBQUE7QUNGSjs7QUNuQkE7RUFDRSx5QkFBQTtFQUNBLHdpQkFBQTtFQUNBLHFCQUFBO0FEc0JGOztBQ25CQTtFQUNFLGdCQUFBO0VBQ0EsUUFBQTtFQUNBLG1CQUFBO0VBQ0EsYUFBQTtFQUNBLCtCQUFBO0VBQ0EsV0FBQTtBRHNCRiIsInNvdXJjZXNDb250ZW50IjpbIi5zaG93Y2FzZS1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1hcHAtYmFja2dyb3VuZCk7XG5cbiAgaW9uLWl0ZW0tZGl2aWRlciB7XG4gICAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbiAgICAtLWNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHRlc3QpO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICB9XG5cbiAgLnNob3djYXNlLXNlY3Rpb24ge1xuICAgIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG4gIH1cblxuICBwcmUge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBiYWNrZ3JvdW5kOiAjQ0NDO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cblxuICBjb2RlIHtcbiAgICBjb2xvcjogI0Y5MjY3MjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG59XG4iLCIuc2hvd2Nhc2UtY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0tYXBwLWJhY2tncm91bmQpO1xufVxuLnNob3djYXNlLWNvbnRlbnQgaW9uLWl0ZW0tZGl2aWRlciB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG4gIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodGVzdCk7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCAuc2hvd2Nhc2Utc2VjdGlvbiB7XG4gIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBwcmUge1xuICBmb250LXNpemU6IDE0cHg7XG4gIGJhY2tncm91bmQ6ICNDQ0M7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBjb2RlIHtcbiAgY29sb3I6ICNGOTI2NzI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbi5zdGFja2VkLWl0ZW1zLWRlbW8ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNlY2VjO1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzQwJyBoZWlnaHQ9JzQwJyB2aWV3Qm94PScwIDAgNDAgNDAnJTNFJTNDZyBmaWxsLXJ1bGU9J2V2ZW5vZGQnJTNFJTNDZyBmaWxsPSclMjNmZmZmZmYnIGZpbGwtb3BhY2l0eT0nMC4zOCclM0UlM0NwYXRoIGQ9J00wIDM4LjU5bDIuODMtMi44MyAxLjQxIDEuNDFMMS40MSA0MEgwdi0xLjQxek0wIDEuNGwyLjgzIDIuODMgMS40MS0xLjQxTDEuNDEgMEgwdjEuNDF6TTM4LjU5IDQwbC0yLjgzLTIuODMgMS40MS0xLjQxTDQwIDM4LjU5VjQwaC0xLjQxek00MCAxLjQxbC0yLjgzIDIuODMtMS40MS0xLjQxTDM4LjU5IDBINDB2MS40MXpNMjAgMTguNmwyLjgzLTIuODMgMS40MSAxLjQxTDIxLjQxIDIwbDIuODMgMi44My0xLjQxIDEuNDFMMjAgMjEuNDFsLTIuODMgMi44My0xLjQxLTEuNDFMMTguNTkgMjBsLTIuODMtMi44MyAxLjQxLTEuNDFMMjAgMTguNTl6Jy8lM0UlM0MvZyUzRSUzQy9nJTNFJTNDL3N2ZyUzRVwiKTtcbiAgcGFkZGluZzogMHB4IDBweCAyMHB4O1xufVxuXG4uc3RpY2t5LXNlY3Rpb24ge1xuICBwb3NpdGlvbjogc3RpY2t5O1xuICB0b3A6IDBweDtcbiAgYmFja2dyb3VuZDogI2VjZWNlYztcbiAgcGFkZGluZzogMjBweDtcbiAgbWFyZ2luOiAwcHggMHB4IDYwcHggIWltcG9ydGFudDtcbiAgei1pbmRleDogMTA7XG59IiwiQGltcG9ydCBcIi4uL2FwcC1zaGVsbC5wYWdlXCI7XG5cbi5zdGFja2VkLWl0ZW1zLWRlbW8ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNlY2VjO1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzQwJyBoZWlnaHQ9JzQwJyB2aWV3Qm94PScwIDAgNDAgNDAnJTNFJTNDZyBmaWxsLXJ1bGU9J2V2ZW5vZGQnJTNFJTNDZyBmaWxsPSclMjNmZmZmZmYnIGZpbGwtb3BhY2l0eT0nMC4zOCclM0UlM0NwYXRoIGQ9J00wIDM4LjU5bDIuODMtMi44MyAxLjQxIDEuNDFMMS40MSA0MEgwdi0xLjQxek0wIDEuNGwyLjgzIDIuODMgMS40MS0xLjQxTDEuNDEgMEgwdjEuNDF6TTM4LjU5IDQwbC0yLjgzLTIuODMgMS40MS0xLjQxTDQwIDM4LjU5VjQwaC0xLjQxek00MCAxLjQxbC0yLjgzIDIuODMtMS40MS0xLjQxTDM4LjU5IDBINDB2MS40MXpNMjAgMTguNmwyLjgzLTIuODMgMS40MSAxLjQxTDIxLjQxIDIwbDIuODMgMi44My0xLjQxIDEuNDFMMjAgMjEuNDFsLTIuODMgMi44My0xLjQxLTEuNDFMMTguNTkgMjBsLTIuODMtMi44MyAxLjQxLTEuNDFMMjAgMTguNTl6Jy8lM0UlM0MvZyUzRSUzQy9nJTNFJTNDL3N2ZyUzRVwiKTtcbiAgcGFkZGluZzogMHB4IDBweCAyMHB4O1xufVxuXG4uc3RpY2t5LXNlY3Rpb24ge1xuICBwb3NpdGlvbjogc3RpY2t5O1xuICB0b3A6IDBweDtcbiAgYmFja2dyb3VuZDogI2VjZWNlYztcbiAgcGFkZGluZzogMjBweDtcbiAgbWFyZ2luOiAwcHggMHB4IDYwcHggIWltcG9ydGFudDtcbiAgei1pbmRleDogMTA7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Observable","of","Subject","merge","ShowcaseShellUserModel","ShowcaseService","DataStore","switchMap","i0","DataStoreStackedPage","constructor","showcaseService","triggerNewItemsLoading","asObservable","ngOnInit","openDataStream","getOpenDataStream","openDataStore","shellModel","load","newDataObservable","newItemsTriggerObservable","pipe","newValuesObservable","getStackedValuesDataSource","newDataShell","newValuesWithShellObservable","AppendShell","state","subscribe","data","console","log","isShell","shellsAsObservables","map","val","shellUsers","dataWithShell","stackedUsers","push","loadStackedResults","next","pushValuesToOpenStream","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-stacked/data-store-stacked.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-stacked/data-store-stacked.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, of, ReplaySubject, Subject, merge } from 'rxjs';\n\nimport { ShowcaseShellUserModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\n\nimport { DataStore } from '../../../shell/data-store';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-data-store-stacked',\n  templateUrl: './data-store-stacked.page.html',\n  styleUrls: ['./data-store-stacked.page.scss'],\n})\nexport class DataStoreStackedPage implements OnInit {\n  // View model\n  stackedUsers: Array<Observable<ShowcaseShellUserModel>> = [];\n  shellUsers: Array<Observable<ShowcaseShellUserModel>> = [];\n  // View data store (it's an open stream of data)\n  openDataStore: DataStore<Array<ShowcaseShellUserModel>>;\n\n  // Emulate a tream of events that trigger the loading of new items\n  triggerNewItemsLoading: Subject<any> = new Subject<any>();\n  newItemsTriggerObservable: Observable<any> = this.triggerNewItemsLoading.asObservable();\n\n  constructor(private showcaseService: ShowcaseService) { }\n\n  ngOnInit() {\n    const openDataStream = this.showcaseService.getOpenDataStream();\n\n    if (!this.openDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<ShowcaseShellUserModel> = [\n        new ShowcaseShellUserModel(),\n        new ShowcaseShellUserModel(),\n        new ShowcaseShellUserModel(),\n        new ShowcaseShellUserModel()\n      ];\n      this.openDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.openDataStore.load(openDataStream);\n    }\n\n    // Each time the user triggers the loading of new items, ask the service to get those new items\n    const newDataObservable = this.newItemsTriggerObservable.pipe(\n      switchMap(() => {\n        const newValuesObservable = this.showcaseService.getStackedValuesDataSource();\n\n        const newDataShell = [\n          new ShowcaseShellUserModel(),\n          new ShowcaseShellUserModel()\n        ];\n\n        const newValuesWithShellObservable = DataStore.AppendShell(newValuesObservable, newDataShell, 400);\n\n        return newValuesWithShellObservable;\n      })\n    );\n\n    merge(\n      this.openDataStore.state,\n      newDataObservable\n    )\n    .subscribe(data => {\n      console.log('data', data);\n\n      if (data.isShell) {\n        const shellsAsObservables = [...data].map((val) => {\n          // Transform plain shell values into async Observables (to comply with the layout markup)\n          return of(val);\n        });\n\n        // When loading new data, override the shellUsers property\n        this.shellUsers = shellsAsObservables;\n      } else {\n        // Clear shellUsers property\n        this.shellUsers = [];\n\n        const dataWithShell = [...data].map((val) => {\n          // Transform plain values into async Observables (to comply with the layout markup)\n          return DataStore.AppendShell(of(val), new ShowcaseShellUserModel(), 400);\n        });\n\n        // Concat data to existing stackedUsers property\n        this.stackedUsers.push(...dataWithShell);\n      }\n    });\n  }\n\n  loadStackedResults(): void {\n    this.triggerNewItemsLoading.next(null);\n  }\n\n  pushValuesToOpenStream(): void {\n    this.showcaseService.pushValuesToOpenStream();\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/app-shell\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      DataStore - Stacked shells example\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      Once you have values coming from the initial data stream, the shell animation would be off. If its an <b>open stream</b>, then each time a new value arrives, it will be added to the view state without the shell animation.\n    </p>\n    <p>\n      This example is handy If you want to change the default functionality and apply independent shell animations to each value coming from the <b>open data stream</b>.\n    </p>\n    <p>\n      It's also a good example if you want to implement an <b>infinite scroll</b> feature.\n    </p>\n    <p>\n      <b>Note:</b> For this to work we will be transforming plain values into Observables, thus the need to update our markup and specify the binded model as async.\n    </p>\n<pre>\n&lt;h3&gt;\n  &lt;app-text-shell [data]=\"<b>(user | async)?</b>.first_name\">&lt;/app-text-shell&gt;\n&lt;/h3&gt;\n&lt;p&gt;\n  &lt;app-text-shell [data]=\"<b>(user | async)?</b>.last_name\" lines=\"3\">&lt;/app-text-shell&gt;\n&lt;/p&gt;\n</pre>\n    <p>\n      Also as we are dealing with a mix of shell models and real values that get stacked one after the other, we need to have two seperate lists. One to show the shell values and another to contain the stacked values.\n    </p>\n  </section>\n\n  <ng-template #userTemplate let-user=\"user\">\n    <ion-row style=\"background-color: #FFF; padding: 10px;\">\n      <ion-col size=\"4\">\n        <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          <app-image-shell animation=\"spinner\" [src]=\"(user | async)?.avatar\" [alt]=\"'Sample Image'\"></app-image-shell>\n        </app-aspect-ratio>\n      </ion-col>\n      <ion-col size=\"8\">\n        <h3 style=\"margin-top: 0px;\">\n          <app-text-shell [data]=\"(user | async)?.first_name\"></app-text-shell>\n        </h3>\n        <p>\n          <app-text-shell [data]=\"(user | async)?.last_name\" lines=\"3\"></app-text-shell>\n        </p>\n      </ion-col>\n    </ion-row>\n  </ng-template>\n\n  <div class=\"stacked-items-demo\">\n    <section class=\"showcase-section sticky-section\">\n      <ion-row>\n        <ion-col size=\"12\">\n          <ion-button (click)=\"pushValuesToOpenStream()\">Push values to open stream</ion-button>\n        </ion-col>\n        <ion-col size=\"12\">\n          <ion-button (click)=\"loadStackedResults()\">Load New Values</ion-button>\n        </ion-col>\n      </ion-row>\n    </section>\n\n    <section class=\"showcase-section\">\n      <div *ngFor=\"let user of stackedUsers\">\n        <ng-container *ngTemplateOutlet=\"userTemplate; context: { user: user }\"></ng-container>\n      </div>\n      <div *ngFor=\"let user of shellUsers\">\n        <ng-container *ngTemplateOutlet=\"userTemplate; context: { user: user }\"></ng-container>\n      </div>\n    </section>\n  </div>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}