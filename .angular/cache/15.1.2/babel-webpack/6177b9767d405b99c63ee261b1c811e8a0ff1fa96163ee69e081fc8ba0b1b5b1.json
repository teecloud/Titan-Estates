{"ast":null,"code":"import { ShowcasePostModel, ShowcaseCommentModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\nimport { DataStore } from '../../../shell/data-store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../showcase.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../../shell/text-shell/text-shell.component\";\nfunction DataStoreDependantPage_ion_item_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\")(2, \"h2\");\n    i0.ɵɵelement(3, \"app-text-shell\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵelement(5, \"app-text-shell\", 12);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const comment_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", comment_r1 == null ? null : comment_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"data\", comment_r1 == null ? null : comment_r1.body);\n  }\n}\nconst _c0 = function () {\n  return [\"/showcase/app-shell/data-store-multiple\"];\n};\nconst _c1 = function () {\n  return [\"/showcase/app-shell/data-store-combined\"];\n};\nexport class DataStoreDependantPage {\n  constructor(showcaseService) {\n    this.showcaseService = showcaseService;\n  }\n  ngOnInit() {\n    const postDataSource = this.showcaseService.getDependantDataSourcePost();\n    const postShellModel = new ShowcasePostModel();\n    this.postDataStore = new DataStore(postShellModel);\n    this.postDataStore.load(postDataSource);\n    this.postDataStore.state.subscribe(data => {\n      this.post = data;\n    });\n    const commentsShellModel = [new ShowcaseCommentModel(), new ShowcaseCommentModel(), new ShowcaseCommentModel()];\n    const commentsDataSource = this.showcaseService.getDependantDataSourcePostComments(this.postDataStore.state);\n    this.commentsDataStore = new DataStore(commentsShellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.commentsDataStore.load(commentsDataSource);\n    this.commentsDataStore.state.subscribe(data => {\n      this.comments = data;\n    });\n  }\n}\nDataStoreDependantPage.ɵfac = function DataStoreDependantPage_Factory(t) {\n  return new (t || DataStoreDependantPage)(i0.ɵɵdirectiveInject(i1.ShowcaseService));\n};\nDataStoreDependantPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataStoreDependantPage,\n  selectors: [[\"app-data-store-dependant\"]],\n  decls: 35,\n  vars: 13,\n  consts: [[\"color\", \"primary\"], [\"slot\", \"start\"], [\"defaultHref\", \"showcase/app-shell\"], [1, \"showcase-content\"], [1, \"showcase-section\"], [3, \"routerLink\"], [1, \"post\"], [\"animation\", \"bouncing\", 2, \"--text-shell-line-color\", \"#FFF\", 3, \"data\"], [\"animation\", \"bouncing\", \"lines\", \"3\", 2, \"--text-shell-line-color\", \"#fffdfd\", 3, \"data\"], [\"lines\", \"full\", 2, \"--background\", \"transparent\"], [4, \"ngFor\", \"ngForOf\"], [\"animation\", \"bouncing\", 2, \"--text-shell-line-height\", \"16px\", 3, \"data\"], [\"animation\", \"bouncing\", 3, \"data\"]],\n  template: function DataStoreDependantPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1);\n      i0.ɵɵelement(3, \"ion-back-button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-title\");\n      i0.ɵɵtext(5, \" DataStore - Dependant Data Sources \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"section\", 4)(8, \"p\");\n      i0.ɵɵtext(9, \" This example kinda mixes the two previous examples (\");\n      i0.ɵɵelementStart(10, \"a\", 5);\n      i0.ɵɵtext(11, \"multiple data stores\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \", \");\n      i0.ɵɵelementStart(13, \"a\", 5);\n      i0.ɵɵtext(14, \"one depending on the other\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \"). \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17, \" The uses cases in which to use this approach would be if you have different data sources that depend on each other, but you want the different sections of the view to 're-load' independently one from the other. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"p\");\n      i0.ɵɵtext(19, \" This contrasts the use case of the \");\n      i0.ɵɵelementStart(20, \"a\", 5);\n      i0.ɵɵtext(21, \"Combined Data Source\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22, \" where you transform multiple data sources into one, causing the hole view to be 're-loaded' as it's binded to just one combined Observable. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"p\");\n      i0.ɵɵtext(24, \" A good example can be a post and its comments. The comments depend on the post but you want them to 're-load' independently from the post. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 6)(26, \"h4\");\n      i0.ɵɵelement(27, \"app-text-shell\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"p\");\n      i0.ɵɵelement(29, \"app-text-shell\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"h6\");\n      i0.ɵɵtext(31, \"Comments\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"ion-list\", 9);\n      i0.ɵɵtemplate(33, DataStoreDependantPage_ion_item_33_Template, 6, 2, \"ion-item\", 10);\n      i0.ɵɵpipe(34, \"slice\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(10, _c0));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(11, _c1));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(12, _c1));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"data\", ctx.post == null ? null : ctx.post.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"data\", ctx.post == null ? null : ctx.post.body);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(34, 6, ctx.comments, 0, 5));\n    }\n  },\n  dependencies: [i2.NgForOf, i3.IonBackButton, i3.IonButtons, i3.IonContent, i3.IonHeader, i3.IonItem, i3.IonLabel, i3.IonList, i3.IonTitle, i3.IonToolbar, i3.IonBackButtonDelegate, i3.RouterLinkWithHrefDelegate, i4.RouterLink, i5.TextShellComponent, i2.SlicePipe],\n  styles: [\".showcase-content[_ngcontent-%COMP%] {\\n  --background: var(--app-background);\\n}\\n.showcase-content[_ngcontent-%COMP%]   ion-item-divider[_ngcontent-%COMP%] {\\n  --background: var(--ion-color-secondary);\\n  --color: var(--ion-color-lightest);\\n  text-transform: uppercase;\\n  font-weight: 500;\\n  letter-spacing: 1px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   .showcase-section[_ngcontent-%COMP%] {\\n  margin: 20px 20px 60px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  background: #CCC;\\n  padding: 10px;\\n}\\n.showcase-content[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  color: #F92672;\\n  font-weight: 500;\\n}\\n\\n.post[_ngcontent-%COMP%] {\\n  background-color: #ececec;\\n  background-image: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='40' viewBox='0 0 40 40'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.38'%3E%3Cpath d='M0 38.59l2.83-2.83 1.41 1.41L1.41 40H0v-1.41zM0 1.4l2.83 2.83 1.41-1.41L1.41 0H0v1.41zM38.59 40l-2.83-2.83 1.41-1.41L40 38.59V40h-1.41zM40 1.41l-2.83 2.83-1.41-1.41L38.59 0H40v1.41zM20 18.6l2.83-2.83 1.41 1.41L21.41 20l2.83 2.83-1.41 1.41L20 21.41l-2.83 2.83-1.41-1.41L18.59 20l-2.83-2.83 1.41-1.41L20 18.59z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\");\\n  padding: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi9UaXRhbiUyMEVzdGF0ZXMvc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvZGF0YS1zdG9yZS1kZXBlbmRhbnQvZGF0YS1zdG9yZS1kZXBlbmRhbnQucGFnZS5zY3NzIiwid2VicGFjazovLy4vc3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvZGF0YS1zdG9yZS1kZXBlbmRhbnQvZGF0YS1zdG9yZS1kZXBlbmRhbnQucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsbUNBQUE7QUNDRjtBRENFO0VBQ0Usd0NBQUE7RUFDQSxrQ0FBQTtFQUNBLHlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtBQ0NKO0FERUU7RUFDRSxzQkFBQTtBQ0FKO0FER0U7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0FDREo7QURJRTtFQUNFLGNBQUE7RUFDQSxnQkFBQTtBQ0ZKOztBQ25CQTtFQUNFLHlCQUFBO0VBQ0Esd2lCQUFBO0VBQ0EsYUFBQTtBRHNCRiIsInNvdXJjZXNDb250ZW50IjpbIi5zaG93Y2FzZS1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1hcHAtYmFja2dyb3VuZCk7XG5cbiAgaW9uLWl0ZW0tZGl2aWRlciB7XG4gICAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbiAgICAtLWNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHRlc3QpO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICB9XG5cbiAgLnNob3djYXNlLXNlY3Rpb24ge1xuICAgIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG4gIH1cblxuICBwcmUge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBiYWNrZ3JvdW5kOiAjQ0NDO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cblxuICBjb2RlIHtcbiAgICBjb2xvcjogI0Y5MjY3MjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG59XG4iLCIuc2hvd2Nhc2UtY29udGVudCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0tYXBwLWJhY2tncm91bmQpO1xufVxuLnNob3djYXNlLWNvbnRlbnQgaW9uLWl0ZW0tZGl2aWRlciB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG4gIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodGVzdCk7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCAuc2hvd2Nhc2Utc2VjdGlvbiB7XG4gIG1hcmdpbjogMjBweCAyMHB4IDYwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBwcmUge1xuICBmb250LXNpemU6IDE0cHg7XG4gIGJhY2tncm91bmQ6ICNDQ0M7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG4uc2hvd2Nhc2UtY29udGVudCBjb2RlIHtcbiAgY29sb3I6ICNGOTI2NzI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbi5wb3N0IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPSc0MCcgaGVpZ2h0PSc0MCcgdmlld0JveD0nMCAwIDQwIDQwJyUzRSUzQ2cgZmlsbC1ydWxlPSdldmVub2RkJyUzRSUzQ2cgZmlsbD0nJTIzZmZmZmZmJyBmaWxsLW9wYWNpdHk9JzAuMzgnJTNFJTNDcGF0aCBkPSdNMCAzOC41OWwyLjgzLTIuODMgMS40MSAxLjQxTDEuNDEgNDBIMHYtMS40MXpNMCAxLjRsMi44MyAyLjgzIDEuNDEtMS40MUwxLjQxIDBIMHYxLjQxek0zOC41OSA0MGwtMi44My0yLjgzIDEuNDEtMS40MUw0MCAzOC41OVY0MGgtMS40MXpNNDAgMS40MWwtMi44MyAyLjgzLTEuNDEtMS40MUwzOC41OSAwSDQwdjEuNDF6TTIwIDE4LjZsMi44My0yLjgzIDEuNDEgMS40MUwyMS40MSAyMGwyLjgzIDIuODMtMS40MSAxLjQxTDIwIDIxLjQxbC0yLjgzIDIuODMtMS40MS0xLjQxTDE4LjU5IDIwbC0yLjgzLTIuODMgMS40MS0xLjQxTDIwIDE4LjU5eicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIik7XG4gIHBhZGRpbmc6IDIwcHg7XG59IiwiQGltcG9ydCBcIi4uL2FwcC1zaGVsbC5wYWdlXCI7XG5cbi5wb3N0IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPSc0MCcgaGVpZ2h0PSc0MCcgdmlld0JveD0nMCAwIDQwIDQwJyUzRSUzQ2cgZmlsbC1ydWxlPSdldmVub2RkJyUzRSUzQ2cgZmlsbD0nJTIzZmZmZmZmJyBmaWxsLW9wYWNpdHk9JzAuMzgnJTNFJTNDcGF0aCBkPSdNMCAzOC41OWwyLjgzLTIuODMgMS40MSAxLjQxTDEuNDEgNDBIMHYtMS40MXpNMCAxLjRsMi44MyAyLjgzIDEuNDEtMS40MUwxLjQxIDBIMHYxLjQxek0zOC41OSA0MGwtMi44My0yLjgzIDEuNDEtMS40MUw0MCAzOC41OVY0MGgtMS40MXpNNDAgMS40MWwtMi44MyAyLjgzLTEuNDEtMS40MUwzOC41OSAwSDQwdjEuNDF6TTIwIDE4LjZsMi44My0yLjgzIDEuNDEgMS40MUwyMS40MSAyMGwyLjgzIDIuODMtMS40MSAxLjQxTDIwIDIxLjQxbC0yLjgzIDIuODMtMS40MS0xLjQxTDE4LjU5IDIwbC0yLjgzLTIuODMgMS40MS0xLjQxTDIwIDE4LjU5eicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIik7XG4gIHBhZGRpbmc6IDIwcHg7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,iBAAiB,EAAEC,oBAAoB,QAAQ,4BAA4B;AACpF,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,SAAS,QAAQ,2BAA2B;;;;;;;;;ICgC/CC,gCAAuD;IAGjDA,qCAAqH;IACvHA,iBAAK;IACLA,yBAAG;IACDA,qCAA6E;IAC/EA,iBAAI;;;;IAJcA,eAAsB;IAAtBA,kEAAsB;IAGtBA,eAAsB;IAAtBA,kEAAsB;;;;;;;;;AD/BlD,OAAM,MAAOC,sBAAsB;EAOjCC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;EAAqB;EAExDC,QAAQ;IAEN,MAAMC,cAAc,GAAG,IAAI,CAACF,eAAe,CAACG,0BAA0B,EAAE;IAExE,MAAMC,cAAc,GAAsB,IAAIX,iBAAiB,EAAE;IACjE,IAAI,CAACY,aAAa,GAAG,IAAIT,SAAS,CAACQ,cAAc,CAAC;IAClD,IAAI,CAACC,aAAa,CAACC,IAAI,CAACJ,cAAc,CAAC;IACvC,IAAI,CAACG,aAAa,CAACE,KAAK,CAACC,SAAS,CAACC,IAAI,IAAG;MACxC,IAAI,CAACC,IAAI,GAAGD,IAAI;IAClB,CAAC,CAAC;IAEF,MAAME,kBAAkB,GAAgC,CACtD,IAAIjB,oBAAoB,EAAE,EAC1B,IAAIA,oBAAoB,EAAE,EAC1B,IAAIA,oBAAoB,EAAE,CAC3B;IAED,MAAMkB,kBAAkB,GAAG,IAAI,CAACZ,eAAe,CAACa,kCAAkC,CAAC,IAAI,CAACR,aAAa,CAACE,KAAK,CAAC;IAE5G,IAAI,CAACO,iBAAiB,GAAG,IAAIlB,SAAS,CAACe,kBAAkB,CAAC;IAC1D;IACA,IAAI,CAACG,iBAAiB,CAACR,IAAI,CAACM,kBAAkB,CAAC;IAE/C,IAAI,CAACE,iBAAiB,CAACP,KAAK,CAACC,SAAS,CAACC,IAAI,IAAG;MAC5C,IAAI,CAACM,QAAQ,GAAGN,IAAI;IACtB,CAAC,CAAC;EAEJ;;AApCWX,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVnCvB,kCAAY;MAGNA,qCAAoE;MACtEA,iBAAc;MACdA,iCAAW;MACTA,oDACF;MAAAA,iBAAY;MAIhBA,sCAAsC;MAGhCA,qEAAoD;MAAAA,6BAA8D;MAAAA,qCAAoB;MAAAA,iBAAI;MAAAA,mBAAE;MAAAA,6BAA8D;MAAAA,2CAA0B;MAAAA,iBAAI;MAAAA,oBAC1O;MAAAA,iBAAI;MACJA,0BAAG;MACDA,qOACF;MAAAA,iBAAI;MACJA,0BAAG;MACDA,qDAAmC;MAAAA,6BAA8D;MAAAA,qCAAoB;MAAAA,iBAAI;MAACA,8JAC5H;MAAAA,iBAAI;MACJA,0BAAG;MACDA,6JACF;MAAAA,iBAAI;MAENA,+BAAkB;MAEdA,qCAAkH;MACpHA,iBAAK;MACLA,0BAAG;MACDA,qCAA8H;MAChIA,iBAAI;MACJA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MACjBA,oCAAyD;MACvDA,oFASW;;MACbA,iBAAW;;;MA/B8CA,gBAA0D;MAA1DA,wDAA0D;MAA8BA,eAA0D;MAA1DA,wDAA0D;MAMnKA,eAA0D;MAA1DA,wDAA0D;MAQhFA,eAAoB;MAApBA,+DAAoB;MAGpBA,eAAmB;MAAnBA,8DAAmB;MAILA,eAAuB;MAAvBA,mEAAuB","names":["ShowcasePostModel","ShowcaseCommentModel","ShowcaseService","DataStore","i0","DataStoreDependantPage","constructor","showcaseService","ngOnInit","postDataSource","getDependantDataSourcePost","postShellModel","postDataStore","load","state","subscribe","data","post","commentsShellModel","commentsDataSource","getDependantDataSourcePostComments","commentsDataStore","comments","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-dependant/data-store-dependant.page.ts","/Users/teeicloud/TitanEstates/Titan Estates/src/app/showcase/app-shell/data-store-dependant/data-store-dependant.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ShowcasePostModel, ShowcaseCommentModel } from '../../showcase-shell.model';\nimport { ShowcaseService } from '../../showcase.service';\nimport { DataStore } from '../../../shell/data-store';\n\n@Component({\n  selector: 'app-data-store-dependant',\n  templateUrl: './data-store-dependant.page.html',\n  styleUrls: ['./data-store-dependant.page.scss'],\n})\nexport class DataStoreDependantPage implements OnInit {\n\n  postDataStore: DataStore<ShowcasePostModel>;\n  commentsDataStore: DataStore<Array<ShowcaseCommentModel>>;\n  post: ShowcasePostModel;\n  comments: Array<ShowcaseCommentModel>;\n\n  constructor(private showcaseService: ShowcaseService) { }\n\n  ngOnInit() {\n\n    const postDataSource = this.showcaseService.getDependantDataSourcePost();\n\n    const postShellModel: ShowcasePostModel = new ShowcasePostModel();\n    this.postDataStore = new DataStore(postShellModel);\n    this.postDataStore.load(postDataSource);\n    this.postDataStore.state.subscribe(data => {\n      this.post = data;\n    });\n\n    const commentsShellModel: Array<ShowcaseCommentModel> = [\n      new ShowcaseCommentModel(),\n      new ShowcaseCommentModel(),\n      new ShowcaseCommentModel()\n    ];\n\n    const commentsDataSource = this.showcaseService.getDependantDataSourcePostComments(this.postDataStore.state);\n\n    this.commentsDataStore = new DataStore(commentsShellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.commentsDataStore.load(commentsDataSource);\n\n    this.commentsDataStore.state.subscribe(data => {\n      this.comments = data;\n    });\n\n  }\n\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/app-shell\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      DataStore - Dependant Data Sources\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      This example kinda mixes the two previous examples (<a [routerLink]=\"['/showcase/app-shell/data-store-multiple']\">multiple data stores</a>, <a [routerLink]=\"['/showcase/app-shell/data-store-combined']\">one depending on the other</a>).\n    </p>\n    <p>\n      The uses cases in which to use this approach would be if you have different data sources that depend on each other, but you want the different sections of the view to 're-load' independently one from the other.\n    </p>\n    <p>\n      This contrasts the use case of the <a [routerLink]=\"['/showcase/app-shell/data-store-combined']\">Combined Data Source</a> where you transform multiple data sources into one, causing the hole view to be 're-loaded' as it's binded to just one combined Observable.\n    </p>\n    <p>\n      A good example can be a post and its comments. The comments depend on the post but you want them to 're-load' independently from the post.\n    </p>\n  </section>\n  <div class=\"post\">\n    <h4>\n      <app-text-shell [data]=\"post?.title\" animation=\"bouncing\" style=\"--text-shell-line-color: #FFF;\"></app-text-shell>\n    </h4>\n    <p>\n      <app-text-shell [data]=\"post?.body\" animation=\"bouncing\" lines=\"3\" style=\"--text-shell-line-color: #fffdfd;\"></app-text-shell>\n    </p>\n    <h6>Comments</h6>\n    <ion-list lines=\"full\" style=\"--background: transparent\">\n      <ion-item *ngFor=\"let comment of comments | slice:0:5\">\n        <ion-label>\n          <h2>\n            <app-text-shell [data]=\"comment?.name\" animation=\"bouncing\" style=\"--text-shell-line-height: 16px;\"></app-text-shell>\n          </h2>\n          <p>\n            <app-text-shell [data]=\"comment?.body\" animation=\"bouncing\"></app-text-shell>\n          </p>\n        </ion-label>\n      </ion-item>\n    </ion-list>\n  </div>\n</ion-content>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}